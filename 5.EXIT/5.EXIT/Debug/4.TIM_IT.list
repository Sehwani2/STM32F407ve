
4.TIM_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080076e8  080076e8  000176e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a84  08007a84  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000204  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eb4f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002586  00000000  00000000  0002ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000da8  00000000  00000000  00031320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8f  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022960  00000000  00000000  00032b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000119a4  00000000  00000000  000554b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cda80  00000000  00000000  00066e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047b8  00000000  00000000  001348dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00139094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076d0 	.word	0x080076d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080076d0 	.word	0x080076d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b6b      	ldr	r3, [pc, #428]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6a      	ldr	r2, [pc, #424]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5c      	ldr	r2, [pc, #368]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	484b      	ldr	r0, [pc, #300]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f34:	f001 fd3e 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4847      	ldr	r0, [pc, #284]	; (8001064 <_7SEG_GPIO_Init+0x1c0>)
 8000f46:	f001 fd35 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4842      	ldr	r0, [pc, #264]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f56:	f001 fd2d 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	483e      	ldr	r0, [pc, #248]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f66:	f001 fd25 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	483c      	ldr	r0, [pc, #240]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f78:	f001 fd1c 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4837      	ldr	r0, [pc, #220]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f8a:	f001 fd13 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4831      	ldr	r0, [pc, #196]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f9c:	f001 fd0a 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482d      	ldr	r0, [pc, #180]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000fac:	f001 fd02 	bl	80029b4 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fbe:	f001 fcf9 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4827      	ldr	r0, [pc, #156]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fd0:	f001 fcf0 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fe2:	f001 fce7 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000ff4:	f001 fcde 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001006:	f001 fcd5 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001018:	f001 fccc 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800102a:	f001 fcc3 	bl	80029b4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 800102e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001032:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800103c:	f001 fcba 	bl	80029b4 <HAL_GPIO_Init>


	_7SEG_SetNumber(DGT1, 0, ON);
 8001040:	2201      	movs	r2, #1
 8001042:	2100      	movs	r1, #0
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f813 	bl	8001070 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800104a:	2201      	movs	r2, #1
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f80e 	bl	8001070 <_7SEG_SetNumber>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800
 800106c:	40021000 	.word	0x40021000

08001070 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 81dc 	bne.w	800143c <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4bcb      	ldr	r3, [pc, #812]	; (80013b4 <_7SEG_SetNumber+0x344>)
 8001088:	fb83 2301 	smull	r2, r3, r3, r1
 800108c:	109a      	asrs	r2, r3, #2
 800108e:	17cb      	asrs	r3, r1, #31
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1aca      	subs	r2, r1, r3
 800109c:	2a09      	cmp	r2, #9
 800109e:	f200 81ba 	bhi.w	8001416 <_7SEG_SetNumber+0x3a6>
 80010a2:	a301      	add	r3, pc, #4	; (adr r3, 80010a8 <_7SEG_SetNumber+0x38>)
 80010a4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001175 	.word	0x08001175
 80010b4:	080011c7 	.word	0x080011c7
 80010b8:	08001219 	.word	0x08001219
 80010bc:	0800126b 	.word	0x0800126b
 80010c0:	080012bd 	.word	0x080012bd
 80010c4:	0800130f 	.word	0x0800130f
 80010c8:	08001361 	.word	0x08001361
 80010cc:	080013c5 	.word	0x080013c5
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d6:	48b8      	ldr	r0, [pc, #736]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010d8:	f001 fe08 	bl	8002cec <HAL_GPIO_WritePin>
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	48b6      	ldr	r0, [pc, #728]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80010e4:	f001 fe02 	bl	8002cec <HAL_GPIO_WritePin>
 80010e8:	2200      	movs	r2, #0
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	48b2      	ldr	r0, [pc, #712]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010ee:	f001 fdfd 	bl	8002cec <HAL_GPIO_WritePin>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	48b0      	ldr	r0, [pc, #704]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010f8:	f001 fdf8 	bl	8002cec <HAL_GPIO_WritePin>
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	48af      	ldr	r0, [pc, #700]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001104:	f001 fdf2 	bl	8002cec <HAL_GPIO_WritePin>
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	48ac      	ldr	r0, [pc, #688]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001110:	f001 fdec 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	48a7      	ldr	r0, [pc, #668]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800111c:	f001 fde6 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001120:	e179      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001128:	48a4      	ldr	r0, [pc, #656]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800112a:	f001 fddf 	bl	8002cec <HAL_GPIO_WritePin>
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	48a1      	ldr	r0, [pc, #644]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001134:	f001 fdda 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113e:	489e      	ldr	r0, [pc, #632]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001140:	f001 fdd4 	bl	8002cec <HAL_GPIO_WritePin>
 8001144:	2201      	movs	r2, #1
 8001146:	2120      	movs	r1, #32
 8001148:	489b      	ldr	r0, [pc, #620]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800114a:	f001 fdcf 	bl	8002cec <HAL_GPIO_WritePin>
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	489a      	ldr	r0, [pc, #616]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001156:	f001 fdc9 	bl	8002cec <HAL_GPIO_WritePin>
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4897      	ldr	r0, [pc, #604]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001162:	f001 fdc3 	bl	8002cec <HAL_GPIO_WritePin>
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	4892      	ldr	r0, [pc, #584]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800116e:	f001 fdbd 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001172:	e150      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	488f      	ldr	r0, [pc, #572]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800117c:	f001 fdb6 	bl	8002cec <HAL_GPIO_WritePin>
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001186:	488d      	ldr	r0, [pc, #564]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001188:	f001 fdb0 	bl	8002cec <HAL_GPIO_WritePin>
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4889      	ldr	r0, [pc, #548]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001194:	f001 fdaa 	bl	8002cec <HAL_GPIO_WritePin>
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4888      	ldr	r0, [pc, #544]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011a0:	f001 fda4 	bl	8002cec <HAL_GPIO_WritePin>
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	4883      	ldr	r0, [pc, #524]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011aa:	f001 fd9f 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80011ae:	2201      	movs	r2, #1
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4881      	ldr	r0, [pc, #516]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011b4:	f001 fd9a 	bl	8002cec <HAL_GPIO_WritePin>
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	4880      	ldr	r0, [pc, #512]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011c0:	f001 fd94 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80011c4:	e127      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	487a      	ldr	r0, [pc, #488]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ce:	f001 fd8d 	bl	8002cec <HAL_GPIO_WritePin>
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4878      	ldr	r0, [pc, #480]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80011da:	f001 fd87 	bl	8002cec <HAL_GPIO_WritePin>
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4875      	ldr	r0, [pc, #468]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011e4:	f001 fd82 	bl	8002cec <HAL_GPIO_WritePin>
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4872      	ldr	r0, [pc, #456]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ee:	f001 fd7d 	bl	8002cec <HAL_GPIO_WritePin>
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	486f      	ldr	r0, [pc, #444]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011fa:	f001 fd77 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	486e      	ldr	r0, [pc, #440]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001206:	f001 fd71 	bl	8002cec <HAL_GPIO_WritePin>
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	486b      	ldr	r0, [pc, #428]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001212:	f001 fd6b 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001216:	e0fe      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121e:	4868      	ldr	r0, [pc, #416]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001220:	f001 fd64 	bl	8002cec <HAL_GPIO_WritePin>
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4863      	ldr	r0, [pc, #396]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800122c:	f001 fd5e 	bl	8002cec <HAL_GPIO_WritePin>
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	4861      	ldr	r0, [pc, #388]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001238:	f001 fd58 	bl	8002cec <HAL_GPIO_WritePin>
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	485d      	ldr	r0, [pc, #372]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001242:	f001 fd53 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	485a      	ldr	r0, [pc, #360]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800124e:	f001 fd4d 	bl	8002cec <HAL_GPIO_WritePin>
 8001252:	2201      	movs	r2, #1
 8001254:	2120      	movs	r1, #32
 8001256:	4858      	ldr	r0, [pc, #352]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001258:	f001 fd48 	bl	8002cec <HAL_GPIO_WritePin>
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001262:	4857      	ldr	r0, [pc, #348]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001264:	f001 fd42 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001268:	e0d5      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	4851      	ldr	r0, [pc, #324]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001272:	f001 fd3b 	bl	8002cec <HAL_GPIO_WritePin>
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127c:	4850      	ldr	r0, [pc, #320]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800127e:	f001 fd35 	bl	8002cec <HAL_GPIO_WritePin>
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	484b      	ldr	r0, [pc, #300]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800128a:	f001 fd2f 	bl	8002cec <HAL_GPIO_WritePin>
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	4849      	ldr	r0, [pc, #292]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001294:	f001 fd2a 	bl	8002cec <HAL_GPIO_WritePin>
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800129e:	f001 fd25 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80012aa:	f001 fd1f 	bl	8002cec <HAL_GPIO_WritePin>
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	4842      	ldr	r0, [pc, #264]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012b6:	f001 fd19 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80012ba:	e0ac      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	483d      	ldr	r0, [pc, #244]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012c4:	f001 fd12 	bl	8002cec <HAL_GPIO_WritePin>
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	483a      	ldr	r0, [pc, #232]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012ce:	f001 fd0d 	bl	8002cec <HAL_GPIO_WritePin>
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4838      	ldr	r0, [pc, #224]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012d8:	f001 fd08 	bl	8002cec <HAL_GPIO_WritePin>
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e2:	4837      	ldr	r0, [pc, #220]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012e4:	f001 fd02 	bl	8002cec <HAL_GPIO_WritePin>
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012f0:	f001 fcfc 	bl	8002cec <HAL_GPIO_WritePin>
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fa:	482f      	ldr	r0, [pc, #188]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012fc:	f001 fcf6 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	482d      	ldr	r0, [pc, #180]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001308:	f001 fcf0 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 800130c:	e083      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	482a      	ldr	r0, [pc, #168]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001316:	f001 fce9 	bl	8002cec <HAL_GPIO_WritePin>
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001320:	4825      	ldr	r0, [pc, #148]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001322:	f001 fce3 	bl	8002cec <HAL_GPIO_WritePin>
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800132e:	f001 fcdd 	bl	8002cec <HAL_GPIO_WritePin>
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001338:	f001 fcd8 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001342:	f001 fcd3 	bl	8002cec <HAL_GPIO_WritePin>
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800134e:	f001 fccd 	bl	8002cec <HAL_GPIO_WritePin>
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800135a:	f001 fcc7 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 800135e:	e05a      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001368:	f001 fcc0 	bl	8002cec <HAL_GPIO_WritePin>
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001374:	f001 fcba 	bl	8002cec <HAL_GPIO_WritePin>
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800137e:	f001 fcb5 	bl	8002cec <HAL_GPIO_WritePin>
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001388:	f001 fcb0 	bl	8002cec <HAL_GPIO_WritePin>
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001394:	f001 fcaa 	bl	8002cec <HAL_GPIO_WritePin>
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80013a0:	f001 fca4 	bl	8002cec <HAL_GPIO_WritePin>
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80013ac:	f001 fc9e 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80013b0:	e031      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
 80013b2:	bf00      	nop
 80013b4:	66666667 	.word	0x66666667
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	48c8      	ldr	r0, [pc, #800]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013cc:	f001 fc8e 	bl	8002cec <HAL_GPIO_WritePin>
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	48c6      	ldr	r0, [pc, #792]	; (80016f0 <_7SEG_SetNumber+0x680>)
 80013d8:	f001 fc88 	bl	8002cec <HAL_GPIO_WritePin>
 80013dc:	2200      	movs	r2, #0
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	48c2      	ldr	r0, [pc, #776]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013e2:	f001 fc83 	bl	8002cec <HAL_GPIO_WritePin>
 80013e6:	2200      	movs	r2, #0
 80013e8:	2120      	movs	r1, #32
 80013ea:	48c0      	ldr	r0, [pc, #768]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013ec:	f001 fc7e 	bl	8002cec <HAL_GPIO_WritePin>
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	48bf      	ldr	r0, [pc, #764]	; (80016f4 <_7SEG_SetNumber+0x684>)
 80013f8:	f001 fc78 	bl	8002cec <HAL_GPIO_WritePin>
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	48ba      	ldr	r0, [pc, #744]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001404:	f001 fc72 	bl	8002cec <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	48b9      	ldr	r0, [pc, #740]	; (80016f4 <_7SEG_SetNumber+0x684>)
 8001410:	f001 fc6c 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001414:	bf00      	nop
		}

		if(dp == ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	48b2      	ldr	r0, [pc, #712]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001422:	f001 fc63 	bl	8002cec <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8001426:	e1ff      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 81fc 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	48ad      	ldr	r0, [pc, #692]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001436:	f001 fc59 	bl	8002cec <HAL_GPIO_WritePin>
}
 800143a:	e1f5      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 81f2 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	4bac      	ldr	r3, [pc, #688]	; (80016f8 <_7SEG_SetNumber+0x688>)
 8001448:	fb83 2301 	smull	r2, r3, r3, r1
 800144c:	109a      	asrs	r2, r3, #2
 800144e:	17cb      	asrs	r3, r1, #31
 8001450:	1ad2      	subs	r2, r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	1aca      	subs	r2, r1, r3
 800145c:	2a09      	cmp	r2, #9
 800145e:	f200 81d0 	bhi.w	8001802 <_7SEG_SetNumber+0x792>
 8001462:	a301      	add	r3, pc, #4	; (adr r3, 8001468 <_7SEG_SetNumber+0x3f8>)
 8001464:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001468:	08001491 	.word	0x08001491
 800146c:	080014e7 	.word	0x080014e7
 8001470:	0800153d 	.word	0x0800153d
 8001474:	08001593 	.word	0x08001593
 8001478:	080015e9 	.word	0x080015e9
 800147c:	0800163f 	.word	0x0800163f
 8001480:	08001695 	.word	0x08001695
 8001484:	08001701 	.word	0x08001701
 8001488:	08001757 	.word	0x08001757
 800148c:	080017ad 	.word	0x080017ad
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4899      	ldr	r0, [pc, #612]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001498:	f001 fc28 	bl	8002cec <HAL_GPIO_WritePin>
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4896      	ldr	r0, [pc, #600]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014a4:	f001 fc22 	bl	8002cec <HAL_GPIO_WritePin>
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4893      	ldr	r0, [pc, #588]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014b0:	f001 fc1c 	bl	8002cec <HAL_GPIO_WritePin>
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	4890      	ldr	r0, [pc, #576]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014bc:	f001 fc16 	bl	8002cec <HAL_GPIO_WritePin>
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	488d      	ldr	r0, [pc, #564]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014c8:	f001 fc10 	bl	8002cec <HAL_GPIO_WritePin>
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	488a      	ldr	r0, [pc, #552]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014d4:	f001 fc0a 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4887      	ldr	r0, [pc, #540]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014e0:	f001 fc04 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80014e4:	e18d      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ec:	4883      	ldr	r0, [pc, #524]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014ee:	f001 fbfd 	bl	8002cec <HAL_GPIO_WritePin>
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	4880      	ldr	r0, [pc, #512]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014fa:	f001 fbf7 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	487d      	ldr	r0, [pc, #500]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001506:	f001 fbf1 	bl	8002cec <HAL_GPIO_WritePin>
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	487a      	ldr	r0, [pc, #488]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001512:	f001 fbeb 	bl	8002cec <HAL_GPIO_WritePin>
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	4877      	ldr	r0, [pc, #476]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800151e:	f001 fbe5 	bl	8002cec <HAL_GPIO_WritePin>
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	4874      	ldr	r0, [pc, #464]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800152a:	f001 fbdf 	bl	8002cec <HAL_GPIO_WritePin>
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4871      	ldr	r0, [pc, #452]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001536:	f001 fbd9 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 800153a:	e162      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	486e      	ldr	r0, [pc, #440]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001544:	f001 fbd2 	bl	8002cec <HAL_GPIO_WritePin>
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	486b      	ldr	r0, [pc, #428]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001550:	f001 fbcc 	bl	8002cec <HAL_GPIO_WritePin>
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	4868      	ldr	r0, [pc, #416]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800155c:	f001 fbc6 	bl	8002cec <HAL_GPIO_WritePin>
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4865      	ldr	r0, [pc, #404]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001568:	f001 fbc0 	bl	8002cec <HAL_GPIO_WritePin>
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4862      	ldr	r0, [pc, #392]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001574:	f001 fbba 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	485f      	ldr	r0, [pc, #380]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001580:	f001 fbb4 	bl	8002cec <HAL_GPIO_WritePin>
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	485c      	ldr	r0, [pc, #368]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800158c:	f001 fbae 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001590:	e137      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001598:	4858      	ldr	r0, [pc, #352]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800159a:	f001 fba7 	bl	8002cec <HAL_GPIO_WritePin>
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015a6:	f001 fba1 	bl	8002cec <HAL_GPIO_WritePin>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	4852      	ldr	r0, [pc, #328]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015b2:	f001 fb9b 	bl	8002cec <HAL_GPIO_WritePin>
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	484f      	ldr	r0, [pc, #316]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015be:	f001 fb95 	bl	8002cec <HAL_GPIO_WritePin>
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	484c      	ldr	r0, [pc, #304]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015ca:	f001 fb8f 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015d6:	f001 fb89 	bl	8002cec <HAL_GPIO_WritePin>
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4846      	ldr	r0, [pc, #280]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015e2:	f001 fb83 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80015e6:	e10c      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ee:	4843      	ldr	r0, [pc, #268]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015f0:	f001 fb7c 	bl	8002cec <HAL_GPIO_WritePin>
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4840      	ldr	r0, [pc, #256]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015fc:	f001 fb76 	bl	8002cec <HAL_GPIO_WritePin>
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001606:	483d      	ldr	r0, [pc, #244]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001608:	f001 fb70 	bl	8002cec <HAL_GPIO_WritePin>
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001614:	f001 fb6a 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4837      	ldr	r0, [pc, #220]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001620:	f001 fb64 	bl	8002cec <HAL_GPIO_WritePin>
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	4834      	ldr	r0, [pc, #208]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800162c:	f001 fb5e 	bl	8002cec <HAL_GPIO_WritePin>
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001636:	4831      	ldr	r0, [pc, #196]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001638:	f001 fb58 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 800163c:	e0e1      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	482d      	ldr	r0, [pc, #180]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001646:	f001 fb51 	bl	8002cec <HAL_GPIO_WritePin>
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001652:	f001 fb4b 	bl	8002cec <HAL_GPIO_WritePin>
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4827      	ldr	r0, [pc, #156]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800165e:	f001 fb45 	bl	8002cec <HAL_GPIO_WritePin>
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800166a:	f001 fb3f 	bl	8002cec <HAL_GPIO_WritePin>
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001676:	f001 fb39 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001682:	f001 fb33 	bl	8002cec <HAL_GPIO_WritePin>
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800168e:	f001 fb2d 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001692:	e0b6      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800169c:	f001 fb26 	bl	8002cec <HAL_GPIO_WritePin>
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016a8:	f001 fb20 	bl	8002cec <HAL_GPIO_WritePin>
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016b4:	f001 fb1a 	bl	8002cec <HAL_GPIO_WritePin>
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016c0:	f001 fb14 	bl	8002cec <HAL_GPIO_WritePin>
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016cc:	f001 fb0e 	bl	8002cec <HAL_GPIO_WritePin>
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016d8:	f001 fb08 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016e4:	f001 fb02 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80016e8:	e08b      	b.n	8001802 <_7SEG_SetNumber+0x792>
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020800 	.word	0x40020800
 80016f8:	66666667 	.word	0x66666667
 80016fc:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001708:	f001 faf0 	bl	8002cec <HAL_GPIO_WritePin>
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	4847      	ldr	r0, [pc, #284]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001714:	f001 faea 	bl	8002cec <HAL_GPIO_WritePin>
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4844      	ldr	r0, [pc, #272]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001720:	f001 fae4 	bl	8002cec <HAL_GPIO_WritePin>
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4841      	ldr	r0, [pc, #260]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800172c:	f001 fade 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	483e      	ldr	r0, [pc, #248]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001738:	f001 fad8 	bl	8002cec <HAL_GPIO_WritePin>
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	483b      	ldr	r0, [pc, #236]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001744:	f001 fad2 	bl	8002cec <HAL_GPIO_WritePin>
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4838      	ldr	r0, [pc, #224]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001750:	f001 facc 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001754:	e055      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4834      	ldr	r0, [pc, #208]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800175e:	f001 fac5 	bl	8002cec <HAL_GPIO_WritePin>
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4831      	ldr	r0, [pc, #196]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800176a:	f001 fabf 	bl	8002cec <HAL_GPIO_WritePin>
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001776:	f001 fab9 	bl	8002cec <HAL_GPIO_WritePin>
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001780:	482b      	ldr	r0, [pc, #172]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001782:	f001 fab3 	bl	8002cec <HAL_GPIO_WritePin>
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800178e:	f001 faad 	bl	8002cec <HAL_GPIO_WritePin>
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	4825      	ldr	r0, [pc, #148]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800179a:	f001 faa7 	bl	8002cec <HAL_GPIO_WritePin>
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4822      	ldr	r0, [pc, #136]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017a6:	f001 faa1 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 80017aa:	e02a      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017b4:	f001 fa9a 	bl	8002cec <HAL_GPIO_WritePin>
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017c0:	f001 fa94 	bl	8002cec <HAL_GPIO_WritePin>
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4819      	ldr	r0, [pc, #100]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017cc:	f001 fa8e 	bl	8002cec <HAL_GPIO_WritePin>
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4816      	ldr	r0, [pc, #88]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017d8:	f001 fa88 	bl	8002cec <HAL_GPIO_WritePin>
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017e4:	f001 fa82 	bl	8002cec <HAL_GPIO_WritePin>
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017f0:	f001 fa7c 	bl	8002cec <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017fc:	f001 fa76 	bl	8002cec <HAL_GPIO_WritePin>
				break;
 8001800:	bf00      	nop
		if(dp == ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001810:	f001 fa6c 	bl	8002cec <HAL_GPIO_WritePin>
}
 8001814:	e008      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001824:	f001 fa62 	bl	8002cec <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <CLCD_GPIO_Init+0x98>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8001856:	2301      	movs	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800186c:	f001 f8a2 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8001870:	2302      	movs	r3, #2
 8001872:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800187a:	f001 f89b 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 800187e:	2304      	movs	r3, #4
 8001880:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4812      	ldr	r0, [pc, #72]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001888:	f001 f894 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 800188c:	2310      	movs	r3, #16
 800188e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	480e      	ldr	r0, [pc, #56]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001896:	f001 f88d 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 800189a:	2320      	movs	r3, #32
 800189c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018a4:	f001 f886 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018b2:	f001 f87f 	bl	80029b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018c0:	f001 f878 	bl	80029b4 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000

080018d4 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da04      	bge.n	80018f0 <CLCD_Write_Instruction+0x1c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ee:	e003      	b.n	80018f8 <CLCD_Write_Instruction+0x24>
 80018f0:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018fa:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <CLCD_Write_Instruction+0x3c>
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800190e:	e003      	b.n	8001918 <CLCD_Write_Instruction+0x44>
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800191a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <CLCD_Write_Instruction+0x5c>
 8001926:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	e003      	b.n	8001938 <CLCD_Write_Instruction+0x64>
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f023 0320 	bic.w	r3, r3, #32
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800193a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <CLCD_Write_Instruction+0x7c>
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	e003      	b.n	8001958 <CLCD_Write_Instruction+0x84>
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f023 0310 	bic.w	r3, r3, #16
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195a:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <CLCD_Write_Instruction+0xd8>
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	e003      	b.n	80019b4 <CLCD_Write_Instruction+0xe0>
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019b6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <CLCD_Write_Instruction+0xf8>
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	e003      	b.n	80019d4 <CLCD_Write_Instruction+0x100>
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019d6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <CLCD_Write_Instruction+0x118>
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	e003      	b.n	80019f4 <CLCD_Write_Instruction+0x120>
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f023 0320 	bic.w	r3, r3, #32
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019f6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <CLCD_Write_Instruction+0x138>
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	e003      	b.n	8001a14 <CLCD_Write_Instruction+0x140>
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f023 0310 	bic.w	r3, r3, #16
 8001a14:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a16:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f000 fde5 	bl	8002624 <HAL_Delay>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da04      	bge.n	8001a84 <CLCD_Write_Display+0x1c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	e003      	b.n	8001a8c <CLCD_Write_Display+0x24>
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a8e:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <CLCD_Write_Display+0x3c>
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	e003      	b.n	8001aac <CLCD_Write_Display+0x44>
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aae:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <CLCD_Write_Display+0x5c>
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	e003      	b.n	8001acc <CLCD_Write_Display+0x64>
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ace:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <CLCD_Write_Display+0x7c>
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	e003      	b.n	8001aec <CLCD_Write_Display+0x84>
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f023 0310 	bic.w	r3, r3, #16
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aee:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <CLCD_Write_Display+0xd8>
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3e:	e003      	b.n	8001b48 <CLCD_Write_Display+0xe0>
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b4a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <CLCD_Write_Display+0xf8>
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5e:	e003      	b.n	8001b68 <CLCD_Write_Display+0x100>
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b6a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <CLCD_Write_Display+0x118>
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	e003      	b.n	8001b88 <CLCD_Write_Display+0x120>
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f023 0320 	bic.w	r3, r3, #32
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b8a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <CLCD_Write_Display+0x138>
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	e003      	b.n	8001ba8 <CLCD_Write_Display+0x140>
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f023 0310 	bic.w	r3, r3, #16
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001baa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bbe:	f023 0302 	bic.w	r3, r3, #2
 8001bc2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f000 fd1b 	bl	8002624 <HAL_Delay>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <CLCD_Gotoxy+0x1c>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d007      	beq.n	8001c26 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 8001c16:	e00d      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3b80      	subs	r3, #128	; 0x80
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe58 	bl	80018d4 <CLCD_Write_Instruction>
 8001c24:	e006      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3b40      	subs	r3, #64	; 0x40
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe51 	bl	80018d4 <CLCD_Write_Instruction>
 8001c32:	bf00      	nop
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 8001c50:	79ba      	ldrb	r2, [r7, #6]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffd0 	bl	8001bfc <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff feff 	bl	8001a68 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ef      	bne.n	8001c5c <CLCD_Puts+0x20>
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <CLCD_Init>:

void CLCD_Init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f000 fcca 	bl	8002624 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c90:	2028      	movs	r0, #40	; 0x28
 8001c92:	f7ff fe1f 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001c96:	200a      	movs	r0, #10
 8001c98:	f000 fcc4 	bl	8002624 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c9c:	2028      	movs	r0, #40	; 0x28
 8001c9e:	f7ff fe19 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f000 fcbe 	bl	8002624 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001ca8:	200c      	movs	r0, #12
 8001caa:	f7ff fe13 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 8001cae:	2006      	movs	r0, #6
 8001cb0:	f7ff fe10 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff fe0d 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fe0a 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fe07 	bl	80018d4 <CLCD_Write_Instruction>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a4f      	ldr	r2, [pc, #316]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a41      	ldr	r2, [pc, #260]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <MX_GPIO_Init+0x194>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001d6e:	2200      	movs	r2, #0
 8001d70:	21f7      	movs	r1, #247	; 0xf7
 8001d72:	483c      	ldr	r0, [pc, #240]	; (8001e64 <MX_GPIO_Init+0x198>)
 8001d74:	f000 ffba 	bl	8002cec <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2121      	movs	r1, #33	; 0x21
 8001d7c:	483a      	ldr	r0, [pc, #232]	; (8001e68 <MX_GPIO_Init+0x19c>)
 8001d7e:	f000 ffb5 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001d88:	4838      	ldr	r0, [pc, #224]	; (8001e6c <MX_GPIO_Init+0x1a0>)
 8001d8a:	f000 ffaf 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2140      	movs	r1, #64	; 0x40
 8001d92:	4837      	ldr	r0, [pc, #220]	; (8001e70 <MX_GPIO_Init+0x1a4>)
 8001d94:	f000 ffaa 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001d98:	23f7      	movs	r3, #247	; 0xf7
 8001d9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	482d      	ldr	r0, [pc, #180]	; (8001e64 <MX_GPIO_Init+0x198>)
 8001db0:	f000 fe00 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001db4:	2308      	movs	r3, #8
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4827      	ldr	r0, [pc, #156]	; (8001e64 <MX_GPIO_Init+0x198>)
 8001dc8:	f000 fdf4 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4823      	ldr	r0, [pc, #140]	; (8001e70 <MX_GPIO_Init+0x1a4>)
 8001de2:	f000 fde7 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001de6:	2321      	movs	r3, #33	; 0x21
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <MX_GPIO_Init+0x19c>)
 8001dfe:	f000 fdd9 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001e02:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4815      	ldr	r0, [pc, #84]	; (8001e6c <MX_GPIO_Init+0x1a0>)
 8001e18:	f000 fdcc 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e1c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_GPIO_Init+0x1a0>)
 8001e36:	f000 fdbd 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e3a:	2340      	movs	r3, #64	; 0x40
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_GPIO_Init+0x1a4>)
 8001e52:	f000 fdaf 	bl	80029b4 <HAL_GPIO_Init>

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40020800 	.word	0x40020800

08001e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7a:	f000 fb61 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7e:	f000 f84d 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e82:	f7ff ff23 	bl	8001ccc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e86:	f000 fabf 	bl	8002408 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001e8a:	f000 fa65 	bl	8002358 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001e8e:	f000 f8af 	bl	8001ff0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	4819      	ldr	r0, [pc, #100]	; (8001f00 <main+0x8c>)
 8001e9a:	f000 ff27 	bl	8002cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea4:	4816      	ldr	r0, [pc, #88]	; (8001f00 <main+0x8c>)
 8001ea6:	f000 ff21 	bl	8002cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb0:	4813      	ldr	r0, [pc, #76]	; (8001f00 <main+0x8c>)
 8001eb2:	f000 ff1b 	bl	8002cec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	4812      	ldr	r0, [pc, #72]	; (8001f04 <main+0x90>)
 8001ebc:	f000 ff16 	bl	8002cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	4810      	ldr	r0, [pc, #64]	; (8001f08 <main+0x94>)
 8001ec6:	f000 ff11 	bl	8002cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	480e      	ldr	r0, [pc, #56]	; (8001f08 <main+0x94>)
 8001ed0:	f000 ff0c 	bl	8002cec <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	490d      	ldr	r1, [pc, #52]	; (8001f0c <main+0x98>)
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <main+0x9c>)
 8001eda:	f001 ffc2 	bl	8003e62 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <main+0xa0>)
 8001ee0:	f001 fc20 	bl	8003724 <HAL_TIM_Base_Start_IT>

  CLCD_GPIO_Init();
 8001ee4:	f7ff fca6 	bl	8001834 <CLCD_GPIO_Init>
  CLCD_Init();
 8001ee8:	f7ff fecd 	bl	8001c86 <CLCD_Init>
  CLCD_Puts(0, 0, "hello world");
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <main+0xa4>)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fea3 	bl	8001c3c <CLCD_Puts>

  _7SEG_GPIO_Init();
 8001ef6:	f7fe ffd5 	bl	8000ea4 <_7SEG_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t a = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
  uint8_t str[20];
  while (1)
 8001efe:	e7fe      	b.n	8001efe <main+0x8a>
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	200001f0 	.word	0x200001f0
 8001f10:	20000240 	.word	0x20000240
 8001f14:	200001f8 	.word	0x200001f8
 8001f18:	080076e8 	.word	0x080076e8

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fc7f 	bl	800582e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <SystemClock_Config+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <SystemClock_Config+0xd0>)
 8001f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <SystemClock_Config+0xd0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f82:	2302      	movs	r3, #2
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f90:	23a8      	movs	r3, #168	; 0xa8
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fed7 	bl	8002d54 <HAL_RCC_OscConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fac:	f000 f890 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 f938 	bl	8003244 <HAL_RCC_ClockConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fda:	f000 f879 	bl	80020d0 <Error_Handler>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3750      	adds	r7, #80	; 0x50
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000

08001ff0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2027      	movs	r0, #39	; 0x27
 8001ffa:	f000 fc12 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ffe:	2027      	movs	r0, #39	; 0x27
 8002000:	f000 fc2b 	bl	800285a <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2037      	movs	r0, #55	; 0x37
 800200a:	f000 fc0a 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800200e:	2037      	movs	r0, #55	; 0x37
 8002010:	f000 fc23 	bl	800285a <HAL_NVIC_EnableIRQ>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_UART_RxCpltCallback+0x30>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10a      	bne.n	8002040 <HAL_UART_RxCpltCallback+0x28>
  {
	  HAL_UART_Receive_IT(&huart3, &rx3_data, 10);
 800202a:	220a      	movs	r2, #10
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <HAL_UART_RxCpltCallback+0x34>)
 800202e:	4808      	ldr	r0, [pc, #32]	; (8002050 <HAL_UART_RxCpltCallback+0x38>)
 8002030:	f001 ff17 	bl	8003e62 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 8002034:	230a      	movs	r3, #10
 8002036:	2201      	movs	r2, #1
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <HAL_UART_RxCpltCallback+0x34>)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_RxCpltCallback+0x38>)
 800203c:	f001 fe86 	bl	8003d4c <HAL_UART_Transmit>
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40004800 	.word	0x40004800
 800204c:	200001f0 	.word	0x200001f0
 8002050:	20000240 	.word	0x20000240

08002054 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM7)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d127      	bne.n	80020b6 <HAL_TIM_PeriodElapsedCallback+0x62>
  {
	  static unsigned char cnt =0;
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206a:	4816      	ldr	r0, [pc, #88]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800206c:	f000 fe57 	bl	8002d1e <HAL_GPIO_TogglePin>
	  _7SEG_SetNumber(DGT1, cnt/10, OFF);
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	08db      	lsrs	r3, r3, #3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	2000      	movs	r0, #0
 8002084:	f7fe fff4 	bl	8001070 <_7SEG_SetNumber>
	  _7SEG_SetNumber(DGT2, cnt%10, ON);
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800208e:	fba3 1302 	umull	r1, r3, r3, r2
 8002092:	08d9      	lsrs	r1, r3, #3
 8002094:	460b      	mov	r3, r1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2201      	movs	r2, #1
 80020a2:	4619      	mov	r1, r3
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7fe ffe3 	bl	8001070 <_7SEG_SetNumber>
	  cnt++;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020b4:	701a      	strb	r2, [r3, #0]
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40001400 	.word	0x40001400
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	200001f1 	.word	0x200001f1
 80020cc:	cccccccd 	.word	0xcccccccd

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_MspInit+0x4c>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_MspInit+0x4c>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x4c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x4c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002178:	f000 fa34 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <USART3_IRQHandler+0x10>)
 8002186:	f001 fe91 	bl	8003eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000240 	.word	0x20000240

08002194 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM7_IRQHandler+0x10>)
 800219a:	f001 fb33 	bl	8003804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200001f8 	.word	0x200001f8

080021a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c2:	f003 fb87 	bl	80058d4 <__errno>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2216      	movs	r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
  return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_exit>:

void _exit (int status)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffe7 	bl	80021b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ea:	e7fe      	b.n	80021ea <_exit+0x12>

080021ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00a      	b.n	8002214 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021fe:	f3af 8000 	nop.w
 8002202:	4601      	mov	r1, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	b2ca      	uxtb	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf0      	blt.n	80021fe <_read+0x12>
  }

  return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e009      	b.n	800224c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf1      	blt.n	8002238 <_write+0x12>
  }
  return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_close>:

int _close(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_isatty>:

int _isatty(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f003 faec 	bl	80058d4 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20020000 	.word	0x20020000
 8002328:	00000400 	.word	0x00000400
 800232c:	200001f4 	.word	0x200001f4
 8002330:	200003d8 	.word	0x200003d8

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235e:	463b      	mov	r3, r7
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <MX_TIM7_Init+0x64>)
 8002368:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <MX_TIM7_Init+0x68>)
 800236a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <MX_TIM7_Init+0x64>)
 800236e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002372:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_TIM7_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <MX_TIM7_Init+0x64>)
 800237c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002380:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_TIM7_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <MX_TIM7_Init+0x64>)
 800238a:	f001 f97b 	bl	8003684 <HAL_TIM_Base_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002394:	f7ff fe9c 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_TIM7_Init+0x64>)
 80023a6:	f001 fbf1 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023b0:	f7ff fe8e 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200001f8 	.word	0x200001f8
 80023c0:	40001400 	.word	0x40001400

080023c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_TIM_Base_MspInit+0x3c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10d      	bne.n	80023f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_TIM_Base_MspInit+0x40>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <HAL_TIM_Base_MspInit+0x40>)
 80023e0:	f043 0320 	orr.w	r3, r3, #32
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_TIM_Base_MspInit+0x40>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40001400 	.word	0x40001400
 8002404:	40023800 	.word	0x40023800

08002408 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <MX_USART3_UART_Init+0x50>)
 8002410:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_USART3_UART_Init+0x4c>)
 8002440:	f001 fc34 	bl	8003cac <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800244a:	f7ff fe41 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000240 	.word	0x20000240
 8002458:	40004800 	.word	0x40004800

0800245c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_UART_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12c      	bne.n	80024d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_UART_MspInit+0x88>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_UART_MspInit+0x88>)
 8002488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_UART_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_UART_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_UART_MspInit+0x88>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_UART_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c8:	2307      	movs	r3, #7
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <HAL_UART_MspInit+0x8c>)
 80024d4:	f000 fa6e 	bl	80029b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40004800 	.word	0x40004800
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020c00 	.word	0x40020c00

080024ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002524 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024f0:	f7ff ff20 	bl	8002334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800250c:	4c0a      	ldr	r4, [pc, #40]	; (8002538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800251a:	f003 f9e1 	bl	80058e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800251e:	f7ff fca9 	bl	8001e74 <main>
  bx  lr    
 8002522:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800252c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002530:	08007a8c 	.word	0x08007a8c
  ldr r2, =_sbss
 8002534:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002538:	200003d8 	.word	0x200003d8

0800253c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC_IRQHandler>
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_Init+0x40>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_Init+0x40>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x40>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 f94f 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	200f      	movs	r0, #15
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff fdb2 	bl	80020dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f967 	bl	8002876 <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f000 f92f 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000008 	.word	0x20000008
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	20000288 	.word	0x20000288

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000288 	.word	0x20000288

08002624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff ffee 	bl	800260c <HAL_GetTick>
 8002630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d005      	beq.n	800264a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_Delay+0x44>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264a:	bf00      	nop
 800264c:	f7ff ffde 	bl	800260c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8f7      	bhi.n	800264c <HAL_Delay+0x28>
  {
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000008 	.word	0x20000008

0800266c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <__NVIC_SetPriorityGrouping+0x44>)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <__NVIC_GetPriorityGrouping+0x18>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0307 	and.w	r3, r3, #7
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db0b      	blt.n	80026fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4907      	ldr	r1, [pc, #28]	; (8002708 <__NVIC_EnableIRQ+0x38>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	fa00 f202 	lsl.w	r2, r0, r2
 80026f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff29 	bl	800266c <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff3e 	bl	80026b4 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff31 	bl	80026d0 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa2 	bl	80027c8 <SysTick_Config>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff feb6 	bl	800260c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d008      	beq.n	80028c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e052      	b.n	8002966 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0216 	bic.w	r2, r2, #22
 80028ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_DMA_Abort+0x62>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0208 	bic.w	r2, r2, #8
 80028fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002910:	e013      	b.n	800293a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002912:	f7ff fe7b 	bl	800260c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b05      	cmp	r3, #5
 800291e:	d90c      	bls.n	800293a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2203      	movs	r2, #3
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e015      	b.n	8002966 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e4      	bne.n	8002912 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	223f      	movs	r2, #63	; 0x3f
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d004      	beq.n	800298c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00c      	b.n	80029a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2205      	movs	r2, #5
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e16b      	b.n	8002ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 815a 	bne.w	8002ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80b4 	beq.w	8002ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b60      	ldr	r3, [pc, #384]	; (8002cc0 <HAL_GPIO_Init+0x30c>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a5f      	ldr	r2, [pc, #380]	; (8002cc0 <HAL_GPIO_Init+0x30c>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b5d      	ldr	r3, [pc, #372]	; (8002cc0 <HAL_GPIO_Init+0x30c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <HAL_GPIO_Init+0x310>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_GPIO_Init+0x314>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02b      	beq.n	8002bda <HAL_GPIO_Init+0x226>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a51      	ldr	r2, [pc, #324]	; (8002ccc <HAL_GPIO_Init+0x318>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d025      	beq.n	8002bd6 <HAL_GPIO_Init+0x222>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_GPIO_Init+0x31c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01f      	beq.n	8002bd2 <HAL_GPIO_Init+0x21e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4f      	ldr	r2, [pc, #316]	; (8002cd4 <HAL_GPIO_Init+0x320>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d019      	beq.n	8002bce <HAL_GPIO_Init+0x21a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4e      	ldr	r2, [pc, #312]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x216>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4d      	ldr	r2, [pc, #308]	; (8002cdc <HAL_GPIO_Init+0x328>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x212>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <HAL_GPIO_Init+0x32c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <HAL_GPIO_Init+0x330>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x20a>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e00e      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e00c      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bc2:	2306      	movs	r3, #6
 8002bc4:	e00a      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	e008      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e004      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_GPIO_Init+0x228>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	f002 0203 	and.w	r2, r2, #3
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	4093      	lsls	r3, r2
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bec:	4935      	ldr	r1, [pc, #212]	; (8002cc4 <HAL_GPIO_Init+0x310>)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1e:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c48:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c9c:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_GPIO_Init+0x334>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	f67f ae90 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40021400 	.word	0x40021400
 8002ce0:	40021800 	.word	0x40021800
 8002ce4:	40021c00 	.word	0x40021c00
 8002ce8:	40013c00 	.word	0x40013c00

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d30:	887a      	ldrh	r2, [r7, #2]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	041a      	lsls	r2, r3, #16
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	400b      	ands	r3, r1
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e267      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d075      	beq.n	8002e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d72:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d112      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d96:	d10b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05b      	beq.n	8002e5c <HAL_RCC_OscConfig+0x108>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d157      	bne.n	8002e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e242      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x74>
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a75      	ldr	r2, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x98>
 8002dd2:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a6f      	ldr	r2, [pc, #444]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0xb0>
 8002dec:	4b69      	ldr	r3, [pc, #420]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a68      	ldr	r2, [pc, #416]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fbfe 	bl	800260c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff fbfa 	bl	800260c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e207      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0xc0>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7ff fbea 	bl	800260c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7ff fbe6 	bl	800260c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1f3      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0xe8>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d063      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d11c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1c7      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4937      	ldr	r1, [pc, #220]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	e03a      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec4:	4b34      	ldr	r3, [pc, #208]	; (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7ff fb9f 	bl	800260c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7ff fb9b 	bl	800260c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1a8      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4925      	ldr	r1, [pc, #148]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_OscConfig+0x244>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fb7e 	bl	800260c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f14:	f7ff fb7a 	bl	800260c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e187      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d036      	beq.n	8002fac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7ff fb5e 	bl	800260c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f54:	f7ff fb5a 	bl	800260c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e167      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_OscConfig+0x240>)
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x200>
 8002f72:	e01b      	b.n	8002fac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_OscConfig+0x248>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fb47 	bl	800260c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	e00e      	b.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f82:	f7ff fb43 	bl	800260c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d907      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e150      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ea      	bne.n	8002f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8097 	beq.w	80030e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fbe:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a7c      	ldr	r2, [pc, #496]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b7a      	ldr	r3, [pc, #488]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fea:	4b77      	ldr	r3, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff6:	4b74      	ldr	r3, [pc, #464]	; (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a73      	ldr	r2, [pc, #460]	; (80031c8 <HAL_RCC_OscConfig+0x474>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003002:	f7ff fb03 	bl	800260c <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7ff faff 	bl	800260c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e10c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x474>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x2ea>
 8003030:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a63      	ldr	r2, [pc, #396]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x30c>
 8003046:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a5e      	ldr	r2, [pc, #376]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	4b5c      	ldr	r3, [pc, #368]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a5b      	ldr	r2, [pc, #364]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0x324>
 8003060:	4b58      	ldr	r3, [pc, #352]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	4a57      	ldr	r2, [pc, #348]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	; 0x70
 800306c:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d015      	beq.n	80030ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7ff fac4 	bl	800260c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7ff fac0 	bl	800260c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0cb      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ee      	beq.n	8003088 <HAL_RCC_OscConfig+0x334>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7ff faae 	bl	800260c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7ff faaa 	bl	800260c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0b5      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ee      	bne.n	80030b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030dc:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a1 	beq.w	8003234 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d05c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d141      	bne.n	800318a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7ff fa7e 	bl	800260c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff fa7a 	bl	800260c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	491b      	ldr	r1, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x478>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7ff fa53 	bl	800260c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316a:	f7ff fa4f 	bl	800260c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e05c      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x416>
 8003188:	e054      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_RCC_OscConfig+0x478>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fa3c 	bl	800260c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7ff fa38 	bl	800260c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e045      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x444>
 80031b6:	e03d      	b.n	8003234 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e038      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x4ec>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cc      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d90c      	bls.n	8003280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	494d      	ldr	r1, [pc, #308]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d044      	beq.n	8003364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d119      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e067      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b37      	ldr	r3, [pc, #220]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4934      	ldr	r1, [pc, #208]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7ff f96a 	bl	800260c <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7ff f966 	bl	800260c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e04f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d20c      	bcs.n	800338c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e032      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4916      	ldr	r1, [pc, #88]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ca:	f000 f821 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490a      	ldr	r1, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f8ca 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00
 8003400:	40023800 	.word	0x40023800
 8003404:	080076f4 	.word	0x080076f4
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b094      	sub	sp, #80	; 0x50
 8003416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	2300      	movs	r3, #0
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	2300      	movs	r3, #0
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003428:	4b79      	ldr	r3, [pc, #484]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d00d      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x40>
 8003434:	2b08      	cmp	r3, #8
 8003436:	f200 80e1 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 800343e:	2b04      	cmp	r3, #4
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x3a>
 8003442:	e0db      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003448:	e0db      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344a:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_GetSysClockFreq+0x208>)
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344e:	e0d8      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003458:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
 800347e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4621      	mov	r1, r4
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	6139      	str	r1, [r7, #16]
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	ebb2 0801 	subs.w	r8, r2, r1
 80034c8:	4659      	mov	r1, fp
 80034ca:	eb63 0901 	sbc.w	r9, r3, r1
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e2:	4690      	mov	r8, r2
 80034e4:	4699      	mov	r9, r3
 80034e6:	4623      	mov	r3, r4
 80034e8:	eb18 0303 	adds.w	r3, r8, r3
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	462b      	mov	r3, r5
 80034f0:	eb49 0303 	adc.w	r3, r9, r3
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003502:	4629      	mov	r1, r5
 8003504:	024b      	lsls	r3, r1, #9
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800350c:	4621      	mov	r1, r4
 800350e:	024a      	lsls	r2, r1, #9
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800351c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003520:	f7fd fb42 	bl	8000ba8 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	e058      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	4618      	mov	r0, r3
 8003538:	4611      	mov	r1, r2
 800353a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003548:	4642      	mov	r2, r8
 800354a:	464b      	mov	r3, r9
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	0159      	lsls	r1, r3, #5
 8003556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355a:	0150      	lsls	r0, r2, #5
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4641      	mov	r1, r8
 8003562:	ebb2 0a01 	subs.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb63 0b01 	sbc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800357c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003580:	ebb2 040a 	subs.w	r4, r2, sl
 8003584:	eb63 050b 	sbc.w	r5, r3, fp
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	00eb      	lsls	r3, r5, #3
 8003592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003596:	00e2      	lsls	r2, r4, #3
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	4643      	mov	r3, r8
 800359e:	18e3      	adds	r3, r4, r3
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	464b      	mov	r3, r9
 80035a4:	eb45 0303 	adc.w	r3, r5, r3
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b6:	4629      	mov	r1, r5
 80035b8:	028b      	lsls	r3, r1, #10
 80035ba:	4621      	mov	r1, r4
 80035bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c0:	4621      	mov	r1, r4
 80035c2:	028a      	lsls	r2, r1, #10
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	2200      	movs	r2, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	61fa      	str	r2, [r7, #28]
 80035d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d4:	f7fd fae8 	bl	8000ba8 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003604:	4618      	mov	r0, r3
 8003606:	3750      	adds	r7, #80	; 0x50
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	08007704 	.word	0x08007704

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	08007704 	.word	0x08007704

08003684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e041      	b.n	800371a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe fe8a 	bl	80023c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f000 f9b6 	bl	8003a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d001      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e04e      	b.n	80037da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d022      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d01d      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_Base_Start_IT+0xc8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIM_Base_Start_IT+0xdc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d111      	bne.n	80037c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d010      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c6:	e007      	b.n	80037d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40001800 	.word	0x40001800

08003804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8d2 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8c4 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8d5 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d020      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0204 	mvn.w	r2, #4
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8ac 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f89e 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8af 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d020      	beq.n	8003900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0208 	mvn.w	r2, #8
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f886 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f878 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f889 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0210 	mvn.w	r2, #16
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2208      	movs	r2, #8
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f860 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f852 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f863 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0201 	mvn.w	r2, #1
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fe fb72 	bl	8002054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f982 	bl	8003c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f834 	bl	8003a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f954 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a46      	ldr	r2, [pc, #280]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a43      	ldr	r2, [pc, #268]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a40      	ldr	r2, [pc, #256]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d027      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <TIM_Base_SetConfig+0x130>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d023      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <TIM_Base_SetConfig+0x134>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <TIM_Base_SetConfig+0x138>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d017      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <TIM_Base_SetConfig+0x140>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <TIM_Base_SetConfig+0x144>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <TIM_Base_SetConfig+0x148>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <TIM_Base_SetConfig+0x14c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <TIM_Base_SetConfig+0x150>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <TIM_Base_SetConfig+0x154>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <TIM_Base_SetConfig+0x12c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0xf8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <TIM_Base_SetConfig+0x13c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]
  }
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	40001800 	.word	0x40001800
 8003b84:	40001c00 	.word	0x40001c00
 8003b88:	40002000 	.word	0x40002000

08003b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e05a      	b.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d01d      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10c      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40001800 	.word	0x40001800

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e042      	b.n	8003d44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe fbc2 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fdbd 	bl	8004870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d175      	bne.n	8003e58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_UART_Transmit+0x2c>
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e06e      	b.n	8003e5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8a:	f7fe fc3f 	bl	800260c <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d108      	bne.n	8003db8 <HAL_UART_Transmit+0x6c>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e003      	b.n	8003dc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc0:	e02e      	b.n	8003e20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fb1f 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e03a      	b.n	8003e5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e007      	b.n	8003e12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1cb      	bne.n	8003dc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 faeb 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d112      	bne.n	8003ea2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_UART_Receive_IT+0x26>
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e00b      	b.n	8003ea4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	461a      	mov	r2, r3
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fb12 	bl	80044c2 <UART_Start_Receive_IT>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	e000      	b.n	8003ea4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b0ba      	sub	sp, #232	; 0xe8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_UART_IRQHandler+0x66>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fbf2 	bl	80046f4 <UART_Receive_IT>
      return;
 8003f10:	e25b      	b.n	80043ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80de 	beq.w	80040d8 <HAL_UART_IRQHandler+0x22c>
 8003f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80d1 	beq.w	80040d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xae>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xd2>
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xf6>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x126>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f043 0208 	orr.w	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 81f2 	beq.w	80043c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x14e>
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fb7d 	bl	80046f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_UART_IRQHandler+0x17a>
 800401e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04f      	beq.n	80040c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa85 	bl	8004536 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d141      	bne.n	80040be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800406a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800407e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d9      	bne.n	800403a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d013      	beq.n	80040b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	4a7e      	ldr	r2, [pc, #504]	; (800428c <HAL_UART_IRQHandler+0x3e0>)
 8004094:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fc67 	bl	800296e <HAL_DMA_Abort_IT>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	e00e      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f994 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e00a      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f990 	bl	80043e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e006      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f98c 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80040d2:	e175      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	bf00      	nop
    return;
 80040d6:	e173      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	2b01      	cmp	r3, #1
 80040de:	f040 814f 	bne.w	8004380 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8148 	beq.w	8004380 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8141 	beq.w	8004380 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	f040 80b6 	bne.w	8004290 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8145 	beq.w	80043c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800413e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004142:	429a      	cmp	r2, r3
 8004144:	f080 813e 	bcs.w	80043c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800414e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415a:	f000 8088 	beq.w	800426e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004196:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1d9      	bne.n	800415e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e1      	bne.n	80041aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800420a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800420c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004210:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e3      	bne.n	80041e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800423c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004250:	65ba      	str	r2, [r7, #88]	; 0x58
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e3      	bne.n	800422c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fb10 	bl	800288e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800427c:	b29b      	uxth	r3, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f8b7 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800428a:	e09b      	b.n	80043c4 <HAL_UART_IRQHandler+0x518>
 800428c:	080045fd 	.word	0x080045fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 808e 	beq.w	80043c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8089 	beq.w	80043c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042da:	647a      	str	r2, [r7, #68]	; 0x44
 80042dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e3      	bne.n	80042b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3314      	adds	r3, #20
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	623b      	str	r3, [r7, #32]
   return(result);
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004312:	633a      	str	r2, [r7, #48]	; 0x30
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e3      	bne.n	80042ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	60fb      	str	r3, [r7, #12]
   return(result);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0310 	bic.w	r3, r3, #16
 800434a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004358:	61fa      	str	r2, [r7, #28]
 800435a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	617b      	str	r3, [r7, #20]
   return(result);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e3      	bne.n	8004334 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f83d 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800437e:	e023      	b.n	80043c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <HAL_UART_IRQHandler+0x4f4>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f943 	bl	8004624 <UART_Transmit_IT>
    return;
 800439e:	e014      	b.n	80043ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <HAL_UART_IRQHandler+0x51e>
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f983 	bl	80046c4 <UART_EndTransmit_IT>
    return;
 80043be:	e004      	b.n	80043ca <HAL_UART_IRQHandler+0x51e>
    return;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <HAL_UART_IRQHandler+0x51e>
      return;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_UART_IRQHandler+0x51e>
      return;
 80043c8:	bf00      	nop
  }
}
 80043ca:	37e8      	adds	r7, #232	; 0xe8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	e03b      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d037      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe f8ef 	bl	800260c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <UART_WaitOnFlagUntilTimeout+0x30>
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e03a      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d023      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d020      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d01d      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d116      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f857 	bl	8004536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2208      	movs	r2, #8
 800448c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d0b4      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2222      	movs	r2, #34	; 0x22
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0220 	orr.w	r2, r2, #32
 8004526:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004536:	b480      	push	{r7}
 8004538:	b095      	sub	sp, #84	; 0x54
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800455e:	643a      	str	r2, [r7, #64]	; 0x40
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	61fb      	str	r3, [r7, #28]
   return(result);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d119      	bne.n	80045e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0310 	bic.w	r3, r3, #16
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ce:	61ba      	str	r2, [r7, #24]
 80045d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	613b      	str	r3, [r7, #16]
   return(result);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045f0:	bf00      	nop
 80045f2:	3754      	adds	r7, #84	; 0x54
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff fee4 	bl	80043e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d13e      	bne.n	80046b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d114      	bne.n	800466c <UART_Transmit_IT+0x48>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d110      	bne.n	800466c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	621a      	str	r2, [r3, #32]
 800466a:	e008      	b.n	800467e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6211      	str	r1, [r2, #32]
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4619      	mov	r1, r3
 800468c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fe73 	bl	80043d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	; 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b22      	cmp	r3, #34	; 0x22
 8004706:	f040 80ae 	bne.w	8004866 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	d117      	bne.n	8004744 <UART_Receive_IT+0x50>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d113      	bne.n	8004744 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	b29a      	uxth	r2, r3
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
 8004742:	e026      	b.n	8004792 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d007      	beq.n	8004768 <UART_Receive_IT+0x74>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <UART_Receive_IT+0x82>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b2da      	uxtb	r2, r3
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e008      	b.n	8004788 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004782:	b2da      	uxtb	r2, r3
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4619      	mov	r1, r3
 80047a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d15d      	bne.n	8004862 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0220 	bic.w	r2, r2, #32
 80047b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d135      	bne.n	8004858 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	623a      	str	r2, [r7, #32]
 8004814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d10a      	bne.n	800484a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fdd1 	bl	80043f8 <HAL_UARTEx_RxEventCallback>
 8004856:	e002      	b.n	800485e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7fd fbdd 	bl	8002018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e002      	b.n	8004868 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3730      	adds	r7, #48	; 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b0c0      	sub	sp, #256	; 0x100
 8004876:	af00      	add	r7, sp, #0
 8004878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	ea40 0301 	orr.w	r3, r0, r1
 8004898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048c8:	f021 010c 	bic.w	r1, r1, #12
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048d6:	430b      	orrs	r3, r1
 80048d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	6999      	ldr	r1, [r3, #24]
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	ea40 0301 	orr.w	r3, r0, r1
 80048f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b8f      	ldr	r3, [pc, #572]	; (8004b3c <UART_SetConfig+0x2cc>)
 8004900:	429a      	cmp	r2, r3
 8004902:	d005      	beq.n	8004910 <UART_SetConfig+0xa0>
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <UART_SetConfig+0x2d0>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d104      	bne.n	800491a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fe fea4 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004918:	e003      	b.n	8004922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800491a:	f7fe fe8b 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 800491e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492c:	f040 810c 	bne.w	8004b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800493a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800493e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004942:	4622      	mov	r2, r4
 8004944:	462b      	mov	r3, r5
 8004946:	1891      	adds	r1, r2, r2
 8004948:	65b9      	str	r1, [r7, #88]	; 0x58
 800494a:	415b      	adcs	r3, r3
 800494c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800494e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004952:	4621      	mov	r1, r4
 8004954:	eb12 0801 	adds.w	r8, r2, r1
 8004958:	4629      	mov	r1, r5
 800495a:	eb43 0901 	adc.w	r9, r3, r1
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004972:	4690      	mov	r8, r2
 8004974:	4699      	mov	r9, r3
 8004976:	4623      	mov	r3, r4
 8004978:	eb18 0303 	adds.w	r3, r8, r3
 800497c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004980:	462b      	mov	r3, r5
 8004982:	eb49 0303 	adc.w	r3, r9, r3
 8004986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800499a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800499e:	460b      	mov	r3, r1
 80049a0:	18db      	adds	r3, r3, r3
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
 80049a4:	4613      	mov	r3, r2
 80049a6:	eb42 0303 	adc.w	r3, r2, r3
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
 80049ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049b4:	f7fc f8f8 	bl	8000ba8 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <UART_SetConfig+0x2d4>)
 80049be:	fba3 2302 	umull	r2, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	011c      	lsls	r4, r3, #4
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	64b9      	str	r1, [r7, #72]	; 0x48
 80049e0:	415b      	adcs	r3, r3
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049e8:	4641      	mov	r1, r8
 80049ea:	eb12 0a01 	adds.w	sl, r2, r1
 80049ee:	4649      	mov	r1, r9
 80049f0:	eb43 0b01 	adc.w	fp, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a08:	4692      	mov	sl, r2
 8004a0a:	469b      	mov	fp, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a16:	464b      	mov	r3, r9
 8004a18:	eb4b 0303 	adc.w	r3, fp, r3
 8004a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a34:	460b      	mov	r3, r1
 8004a36:	18db      	adds	r3, r3, r3
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
 8004a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a4a:	f7fc f8ad 	bl	8000ba8 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004a56:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2264      	movs	r2, #100	; 0x64
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	1acb      	subs	r3, r1, r3
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a78:	441c      	add	r4, r3
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a94:	415b      	adcs	r3, r3
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	1851      	adds	r1, r2, r1
 8004aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	00cb      	lsls	r3, r1, #3
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004abe:	4651      	mov	r1, sl
 8004ac0:	00ca      	lsls	r2, r1, #3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004af0:	460b      	mov	r3, r1
 8004af2:	18db      	adds	r3, r3, r3
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	4613      	mov	r3, r2
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b06:	f7fc f84f 	bl	8000ba8 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004b10:	fba3 1302 	umull	r1, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2164      	movs	r1, #100	; 0x64
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <UART_SetConfig+0x2d4>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 0207 	and.w	r2, r3, #7
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4422      	add	r2, r4
 8004b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b38:	e106      	b.n	8004d48 <UART_SetConfig+0x4d8>
 8004b3a:	bf00      	nop
 8004b3c:	40011000 	.word	0x40011000
 8004b40:	40011400 	.word	0x40011400
 8004b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	1891      	adds	r1, r2, r2
 8004b60:	6239      	str	r1, [r7, #32]
 8004b62:	415b      	adcs	r3, r3
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	1854      	adds	r4, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0501 	adc.w	r5, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	00eb      	lsls	r3, r5, #3
 8004b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b82:	00e2      	lsls	r2, r4, #3
 8004b84:	4614      	mov	r4, r2
 8004b86:	461d      	mov	r5, r3
 8004b88:	4643      	mov	r3, r8
 8004b8a:	18e3      	adds	r3, r4, r3
 8004b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b90:	464b      	mov	r3, r9
 8004b92:	eb45 0303 	adc.w	r3, r5, r3
 8004b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	008b      	lsls	r3, r1, #2
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	008a      	lsls	r2, r1, #2
 8004bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bc8:	f7fb ffee 	bl	8000ba8 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	011c      	lsls	r4, r3, #4
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	61b9      	str	r1, [r7, #24]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	1851      	adds	r1, r2, r1
 8004c00:	6139      	str	r1, [r7, #16]
 8004c02:	4649      	mov	r1, r9
 8004c04:	414b      	adcs	r3, r1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c14:	4659      	mov	r1, fp
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4651      	mov	r1, sl
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c30:	464b      	mov	r3, r9
 8004c32:	460a      	mov	r2, r1
 8004c34:	eb42 0303 	adc.w	r3, r2, r3
 8004c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c54:	4649      	mov	r1, r9
 8004c56:	008b      	lsls	r3, r1, #2
 8004c58:	4641      	mov	r1, r8
 8004c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5e:	4641      	mov	r1, r8
 8004c60:	008a      	lsls	r2, r1, #2
 8004c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c66:	f7fb ff9f 	bl	8000ba8 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2301 	umull	r2, r3, r3, r1
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2264      	movs	r2, #100	; 0x64
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	1acb      	subs	r3, r1, r3
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	3332      	adds	r3, #50	; 0x32
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c90:	441c      	add	r4, r3
 8004c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c96:	2200      	movs	r2, #0
 8004c98:	673b      	str	r3, [r7, #112]	; 0x70
 8004c9a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	460a      	mov	r2, r1
 8004ce6:	eb42 0303 	adc.w	r3, r2, r3
 8004cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf6:	667a      	str	r2, [r7, #100]	; 0x64
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d04:	4649      	mov	r1, r9
 8004d06:	008b      	lsls	r3, r1, #2
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0e:	4641      	mov	r1, r8
 8004d10:	008a      	lsls	r2, r1, #2
 8004d12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d16:	f7fb ff47 	bl	8000ba8 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004d20:	fba3 1302 	umull	r1, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	2164      	movs	r1, #100	; 0x64
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	3332      	adds	r3, #50	; 0x32
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <UART_SetConfig+0x4e4>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f003 020f 	and.w	r2, r3, #15
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4422      	add	r2, r4
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <__cvt>:
 8004d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	ec55 4b10 	vmov	r4, r5, d0
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	460e      	mov	r6, r1
 8004d64:	4619      	mov	r1, r3
 8004d66:	462b      	mov	r3, r5
 8004d68:	bfbb      	ittet	lt
 8004d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d6e:	461d      	movlt	r5, r3
 8004d70:	2300      	movge	r3, #0
 8004d72:	232d      	movlt	r3, #45	; 0x2d
 8004d74:	700b      	strb	r3, [r1, #0]
 8004d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d7c:	4691      	mov	r9, r2
 8004d7e:	f023 0820 	bic.w	r8, r3, #32
 8004d82:	bfbc      	itt	lt
 8004d84:	4622      	movlt	r2, r4
 8004d86:	4614      	movlt	r4, r2
 8004d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d8c:	d005      	beq.n	8004d9a <__cvt+0x42>
 8004d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d92:	d100      	bne.n	8004d96 <__cvt+0x3e>
 8004d94:	3601      	adds	r6, #1
 8004d96:	2102      	movs	r1, #2
 8004d98:	e000      	b.n	8004d9c <__cvt+0x44>
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	ab03      	add	r3, sp, #12
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	ab02      	add	r3, sp, #8
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	ec45 4b10 	vmov	d0, r4, r5
 8004da8:	4653      	mov	r3, sl
 8004daa:	4632      	mov	r2, r6
 8004dac:	f000 fe48 	bl	8005a40 <_dtoa_r>
 8004db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004db4:	4607      	mov	r7, r0
 8004db6:	d102      	bne.n	8004dbe <__cvt+0x66>
 8004db8:	f019 0f01 	tst.w	r9, #1
 8004dbc:	d022      	beq.n	8004e04 <__cvt+0xac>
 8004dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc2:	eb07 0906 	add.w	r9, r7, r6
 8004dc6:	d110      	bne.n	8004dea <__cvt+0x92>
 8004dc8:	783b      	ldrb	r3, [r7, #0]
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d10a      	bne.n	8004de4 <__cvt+0x8c>
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dda:	b918      	cbnz	r0, 8004de4 <__cvt+0x8c>
 8004ddc:	f1c6 0601 	rsb	r6, r6, #1
 8004de0:	f8ca 6000 	str.w	r6, [sl]
 8004de4:	f8da 3000 	ldr.w	r3, [sl]
 8004de8:	4499      	add	r9, r3
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8004df6:	b108      	cbz	r0, 8004dfc <__cvt+0xa4>
 8004df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dfc:	2230      	movs	r2, #48	; 0x30
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	454b      	cmp	r3, r9
 8004e02:	d307      	bcc.n	8004e14 <__cvt+0xbc>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e08:	1bdb      	subs	r3, r3, r7
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	b004      	add	sp, #16
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	1c59      	adds	r1, r3, #1
 8004e16:	9103      	str	r1, [sp, #12]
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e7f0      	b.n	8004dfe <__cvt+0xa6>

08004e1c <__exponent>:
 8004e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2900      	cmp	r1, #0
 8004e22:	bfb8      	it	lt
 8004e24:	4249      	neglt	r1, r1
 8004e26:	f803 2b02 	strb.w	r2, [r3], #2
 8004e2a:	bfb4      	ite	lt
 8004e2c:	222d      	movlt	r2, #45	; 0x2d
 8004e2e:	222b      	movge	r2, #43	; 0x2b
 8004e30:	2909      	cmp	r1, #9
 8004e32:	7042      	strb	r2, [r0, #1]
 8004e34:	dd2a      	ble.n	8004e8c <__exponent+0x70>
 8004e36:	f10d 0207 	add.w	r2, sp, #7
 8004e3a:	4617      	mov	r7, r2
 8004e3c:	260a      	movs	r6, #10
 8004e3e:	4694      	mov	ip, r2
 8004e40:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e44:	fb06 1415 	mls	r4, r6, r5, r1
 8004e48:	3430      	adds	r4, #48	; 0x30
 8004e4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e4e:	460c      	mov	r4, r1
 8004e50:	2c63      	cmp	r4, #99	; 0x63
 8004e52:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e56:	4629      	mov	r1, r5
 8004e58:	dcf1      	bgt.n	8004e3e <__exponent+0x22>
 8004e5a:	3130      	adds	r1, #48	; 0x30
 8004e5c:	f1ac 0402 	sub.w	r4, ip, #2
 8004e60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e64:	1c41      	adds	r1, r0, #1
 8004e66:	4622      	mov	r2, r4
 8004e68:	42ba      	cmp	r2, r7
 8004e6a:	d30a      	bcc.n	8004e82 <__exponent+0x66>
 8004e6c:	f10d 0209 	add.w	r2, sp, #9
 8004e70:	eba2 020c 	sub.w	r2, r2, ip
 8004e74:	42bc      	cmp	r4, r7
 8004e76:	bf88      	it	hi
 8004e78:	2200      	movhi	r2, #0
 8004e7a:	4413      	add	r3, r2
 8004e7c:	1a18      	subs	r0, r3, r0
 8004e7e:	b003      	add	sp, #12
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e8a:	e7ed      	b.n	8004e68 <__exponent+0x4c>
 8004e8c:	2330      	movs	r3, #48	; 0x30
 8004e8e:	3130      	adds	r1, #48	; 0x30
 8004e90:	7083      	strb	r3, [r0, #2]
 8004e92:	70c1      	strb	r1, [r0, #3]
 8004e94:	1d03      	adds	r3, r0, #4
 8004e96:	e7f1      	b.n	8004e7c <__exponent+0x60>

08004e98 <_printf_float>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	ed2d 8b02 	vpush	{d8}
 8004ea0:	b08d      	sub	sp, #52	; 0x34
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	461f      	mov	r7, r3
 8004eac:	4605      	mov	r5, r0
 8004eae:	f000 fcc7 	bl	8005840 <_localeconv_r>
 8004eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f7fb f9da 	bl	8000270 <strlen>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ecc:	3307      	adds	r3, #7
 8004ece:	f023 0307 	bic.w	r3, r3, #7
 8004ed2:	f103 0208 	add.w	r2, r3, #8
 8004ed6:	f8c8 2000 	str.w	r2, [r8]
 8004eda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ee8:	ee08 0a10 	vmov	s16, r0
 8004eec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ef4:	4b9e      	ldr	r3, [pc, #632]	; (8005170 <_printf_float+0x2d8>)
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	f7fb fe17 	bl	8000b2c <__aeabi_dcmpun>
 8004efe:	bb88      	cbnz	r0, 8004f64 <_printf_float+0xcc>
 8004f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f04:	4b9a      	ldr	r3, [pc, #616]	; (8005170 <_printf_float+0x2d8>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	f7fb fdf1 	bl	8000af0 <__aeabi_dcmple>
 8004f0e:	bb48      	cbnz	r0, 8004f64 <_printf_float+0xcc>
 8004f10:	2200      	movs	r2, #0
 8004f12:	2300      	movs	r3, #0
 8004f14:	4640      	mov	r0, r8
 8004f16:	4649      	mov	r1, r9
 8004f18:	f7fb fde0 	bl	8000adc <__aeabi_dcmplt>
 8004f1c:	b110      	cbz	r0, 8004f24 <_printf_float+0x8c>
 8004f1e:	232d      	movs	r3, #45	; 0x2d
 8004f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f24:	4a93      	ldr	r2, [pc, #588]	; (8005174 <_printf_float+0x2dc>)
 8004f26:	4b94      	ldr	r3, [pc, #592]	; (8005178 <_printf_float+0x2e0>)
 8004f28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f2c:	bf94      	ite	ls
 8004f2e:	4690      	movls	r8, r2
 8004f30:	4698      	movhi	r8, r3
 8004f32:	2303      	movs	r3, #3
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	9b05      	ldr	r3, [sp, #20]
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	9700      	str	r7, [sp, #0]
 8004f44:	4633      	mov	r3, r6
 8004f46:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f9da 	bl	8005304 <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	f040 8090 	bne.w	8005076 <_printf_float+0x1de>
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	b00d      	add	sp, #52	; 0x34
 8004f5c:	ecbd 8b02 	vpop	{d8}
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	4640      	mov	r0, r8
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	f7fb fdde 	bl	8000b2c <__aeabi_dcmpun>
 8004f70:	b140      	cbz	r0, 8004f84 <_printf_float+0xec>
 8004f72:	464b      	mov	r3, r9
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bfbc      	itt	lt
 8004f78:	232d      	movlt	r3, #45	; 0x2d
 8004f7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f7e:	4a7f      	ldr	r2, [pc, #508]	; (800517c <_printf_float+0x2e4>)
 8004f80:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <_printf_float+0x2e8>)
 8004f82:	e7d1      	b.n	8004f28 <_printf_float+0x90>
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f8a:	9206      	str	r2, [sp, #24]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	d13f      	bne.n	8005010 <_printf_float+0x178>
 8004f90:	2306      	movs	r3, #6
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	9b05      	ldr	r3, [sp, #20]
 8004f96:	6861      	ldr	r1, [r4, #4]
 8004f98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9303      	str	r3, [sp, #12]
 8004fa0:	ab0a      	add	r3, sp, #40	; 0x28
 8004fa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fa6:	ab09      	add	r3, sp, #36	; 0x24
 8004fa8:	ec49 8b10 	vmov	d0, r8, r9
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f7ff fecf 	bl	8004d58 <__cvt>
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fbe:	2b47      	cmp	r3, #71	; 0x47
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	d108      	bne.n	8004fd6 <_printf_float+0x13e>
 8004fc4:	1cc8      	adds	r0, r1, #3
 8004fc6:	db02      	blt.n	8004fce <_printf_float+0x136>
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	dd41      	ble.n	8005052 <_printf_float+0x1ba>
 8004fce:	f1ab 0302 	sub.w	r3, fp, #2
 8004fd2:	fa5f fb83 	uxtb.w	fp, r3
 8004fd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fda:	d820      	bhi.n	800501e <_printf_float+0x186>
 8004fdc:	3901      	subs	r1, #1
 8004fde:	465a      	mov	r2, fp
 8004fe0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fe4:	9109      	str	r1, [sp, #36]	; 0x24
 8004fe6:	f7ff ff19 	bl	8004e1c <__exponent>
 8004fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fec:	1813      	adds	r3, r2, r0
 8004fee:	2a01      	cmp	r2, #1
 8004ff0:	4681      	mov	r9, r0
 8004ff2:	6123      	str	r3, [r4, #16]
 8004ff4:	dc02      	bgt.n	8004ffc <_printf_float+0x164>
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	07d2      	lsls	r2, r2, #31
 8004ffa:	d501      	bpl.n	8005000 <_printf_float+0x168>
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005004:	2b00      	cmp	r3, #0
 8005006:	d09c      	beq.n	8004f42 <_printf_float+0xaa>
 8005008:	232d      	movs	r3, #45	; 0x2d
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500e:	e798      	b.n	8004f42 <_printf_float+0xaa>
 8005010:	9a06      	ldr	r2, [sp, #24]
 8005012:	2a47      	cmp	r2, #71	; 0x47
 8005014:	d1be      	bne.n	8004f94 <_printf_float+0xfc>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1bc      	bne.n	8004f94 <_printf_float+0xfc>
 800501a:	2301      	movs	r3, #1
 800501c:	e7b9      	b.n	8004f92 <_printf_float+0xfa>
 800501e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005022:	d118      	bne.n	8005056 <_printf_float+0x1be>
 8005024:	2900      	cmp	r1, #0
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	dd0b      	ble.n	8005042 <_printf_float+0x1aa>
 800502a:	6121      	str	r1, [r4, #16]
 800502c:	b913      	cbnz	r3, 8005034 <_printf_float+0x19c>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d0      	lsls	r0, r2, #31
 8005032:	d502      	bpl.n	800503a <_printf_float+0x1a2>
 8005034:	3301      	adds	r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	65a1      	str	r1, [r4, #88]	; 0x58
 800503c:	f04f 0900 	mov.w	r9, #0
 8005040:	e7de      	b.n	8005000 <_printf_float+0x168>
 8005042:	b913      	cbnz	r3, 800504a <_printf_float+0x1b2>
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	07d2      	lsls	r2, r2, #31
 8005048:	d501      	bpl.n	800504e <_printf_float+0x1b6>
 800504a:	3302      	adds	r3, #2
 800504c:	e7f4      	b.n	8005038 <_printf_float+0x1a0>
 800504e:	2301      	movs	r3, #1
 8005050:	e7f2      	b.n	8005038 <_printf_float+0x1a0>
 8005052:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005058:	4299      	cmp	r1, r3
 800505a:	db05      	blt.n	8005068 <_printf_float+0x1d0>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6121      	str	r1, [r4, #16]
 8005060:	07d8      	lsls	r0, r3, #31
 8005062:	d5ea      	bpl.n	800503a <_printf_float+0x1a2>
 8005064:	1c4b      	adds	r3, r1, #1
 8005066:	e7e7      	b.n	8005038 <_printf_float+0x1a0>
 8005068:	2900      	cmp	r1, #0
 800506a:	bfd4      	ite	le
 800506c:	f1c1 0202 	rsble	r2, r1, #2
 8005070:	2201      	movgt	r2, #1
 8005072:	4413      	add	r3, r2
 8005074:	e7e0      	b.n	8005038 <_printf_float+0x1a0>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	055a      	lsls	r2, r3, #21
 800507a:	d407      	bmi.n	800508c <_printf_float+0x1f4>
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	4642      	mov	r2, r8
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d12c      	bne.n	80050e4 <_printf_float+0x24c>
 800508a:	e764      	b.n	8004f56 <_printf_float+0xbe>
 800508c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005090:	f240 80e0 	bls.w	8005254 <_printf_float+0x3bc>
 8005094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005098:	2200      	movs	r2, #0
 800509a:	2300      	movs	r3, #0
 800509c:	f7fb fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d034      	beq.n	800510e <_printf_float+0x276>
 80050a4:	4a37      	ldr	r2, [pc, #220]	; (8005184 <_printf_float+0x2ec>)
 80050a6:	2301      	movs	r3, #1
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af51 	beq.w	8004f56 <_printf_float+0xbe>
 80050b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b8:	429a      	cmp	r2, r3
 80050ba:	db02      	blt.n	80050c2 <_printf_float+0x22a>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07d8      	lsls	r0, r3, #31
 80050c0:	d510      	bpl.n	80050e4 <_printf_float+0x24c>
 80050c2:	ee18 3a10 	vmov	r3, s16
 80050c6:	4652      	mov	r2, sl
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af41 	beq.w	8004f56 <_printf_float+0xbe>
 80050d4:	f04f 0800 	mov.w	r8, #0
 80050d8:	f104 091a 	add.w	r9, r4, #26
 80050dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	4543      	cmp	r3, r8
 80050e2:	dc09      	bgt.n	80050f8 <_printf_float+0x260>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	079b      	lsls	r3, r3, #30
 80050e8:	f100 8107 	bmi.w	80052fa <_printf_float+0x462>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e730      	b.n	8004f5a <_printf_float+0xc2>
 80050f8:	2301      	movs	r3, #1
 80050fa:	464a      	mov	r2, r9
 80050fc:	4631      	mov	r1, r6
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	f43f af27 	beq.w	8004f56 <_printf_float+0xbe>
 8005108:	f108 0801 	add.w	r8, r8, #1
 800510c:	e7e6      	b.n	80050dc <_printf_float+0x244>
 800510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	dc39      	bgt.n	8005188 <_printf_float+0x2f0>
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <_printf_float+0x2ec>)
 8005116:	2301      	movs	r3, #1
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	f43f af19 	beq.w	8004f56 <_printf_float+0xbe>
 8005124:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005128:	4313      	orrs	r3, r2
 800512a:	d102      	bne.n	8005132 <_printf_float+0x29a>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	d5d8      	bpl.n	80050e4 <_printf_float+0x24c>
 8005132:	ee18 3a10 	vmov	r3, s16
 8005136:	4652      	mov	r2, sl
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f af09 	beq.w	8004f56 <_printf_float+0xbe>
 8005144:	f04f 0900 	mov.w	r9, #0
 8005148:	f104 0a1a 	add.w	sl, r4, #26
 800514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514e:	425b      	negs	r3, r3
 8005150:	454b      	cmp	r3, r9
 8005152:	dc01      	bgt.n	8005158 <_printf_float+0x2c0>
 8005154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005156:	e792      	b.n	800507e <_printf_float+0x1e6>
 8005158:	2301      	movs	r3, #1
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f aef7 	beq.w	8004f56 <_printf_float+0xbe>
 8005168:	f109 0901 	add.w	r9, r9, #1
 800516c:	e7ee      	b.n	800514c <_printf_float+0x2b4>
 800516e:	bf00      	nop
 8005170:	7fefffff 	.word	0x7fefffff
 8005174:	0800770c 	.word	0x0800770c
 8005178:	08007710 	.word	0x08007710
 800517c:	08007714 	.word	0x08007714
 8005180:	08007718 	.word	0x08007718
 8005184:	0800771c 	.word	0x0800771c
 8005188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800518c:	429a      	cmp	r2, r3
 800518e:	bfa8      	it	ge
 8005190:	461a      	movge	r2, r3
 8005192:	2a00      	cmp	r2, #0
 8005194:	4691      	mov	r9, r2
 8005196:	dc37      	bgt.n	8005208 <_printf_float+0x370>
 8005198:	f04f 0b00 	mov.w	fp, #0
 800519c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a0:	f104 021a 	add.w	r2, r4, #26
 80051a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	eba3 0309 	sub.w	r3, r3, r9
 80051ac:	455b      	cmp	r3, fp
 80051ae:	dc33      	bgt.n	8005218 <_printf_float+0x380>
 80051b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b4:	429a      	cmp	r2, r3
 80051b6:	db3b      	blt.n	8005230 <_printf_float+0x398>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	07da      	lsls	r2, r3, #31
 80051bc:	d438      	bmi.n	8005230 <_printf_float+0x398>
 80051be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051c2:	eba2 0903 	sub.w	r9, r2, r3
 80051c6:	9b05      	ldr	r3, [sp, #20]
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	4591      	cmp	r9, r2
 80051cc:	bfa8      	it	ge
 80051ce:	4691      	movge	r9, r2
 80051d0:	f1b9 0f00 	cmp.w	r9, #0
 80051d4:	dc35      	bgt.n	8005242 <_printf_float+0x3aa>
 80051d6:	f04f 0800 	mov.w	r8, #0
 80051da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051de:	f104 0a1a 	add.w	sl, r4, #26
 80051e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	eba3 0309 	sub.w	r3, r3, r9
 80051ec:	4543      	cmp	r3, r8
 80051ee:	f77f af79 	ble.w	80050e4 <_printf_float+0x24c>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4652      	mov	r2, sl
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f aeaa 	beq.w	8004f56 <_printf_float+0xbe>
 8005202:	f108 0801 	add.w	r8, r8, #1
 8005206:	e7ec      	b.n	80051e2 <_printf_float+0x34a>
 8005208:	4613      	mov	r3, r2
 800520a:	4631      	mov	r1, r6
 800520c:	4642      	mov	r2, r8
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	d1c0      	bne.n	8005198 <_printf_float+0x300>
 8005216:	e69e      	b.n	8004f56 <_printf_float+0xbe>
 8005218:	2301      	movs	r3, #1
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	9205      	str	r2, [sp, #20]
 8005220:	47b8      	blx	r7
 8005222:	3001      	adds	r0, #1
 8005224:	f43f ae97 	beq.w	8004f56 <_printf_float+0xbe>
 8005228:	9a05      	ldr	r2, [sp, #20]
 800522a:	f10b 0b01 	add.w	fp, fp, #1
 800522e:	e7b9      	b.n	80051a4 <_printf_float+0x30c>
 8005230:	ee18 3a10 	vmov	r3, s16
 8005234:	4652      	mov	r2, sl
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	d1be      	bne.n	80051be <_printf_float+0x326>
 8005240:	e689      	b.n	8004f56 <_printf_float+0xbe>
 8005242:	9a05      	ldr	r2, [sp, #20]
 8005244:	464b      	mov	r3, r9
 8005246:	4442      	add	r2, r8
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	d1c1      	bne.n	80051d6 <_printf_float+0x33e>
 8005252:	e680      	b.n	8004f56 <_printf_float+0xbe>
 8005254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005256:	2a01      	cmp	r2, #1
 8005258:	dc01      	bgt.n	800525e <_printf_float+0x3c6>
 800525a:	07db      	lsls	r3, r3, #31
 800525c:	d53a      	bpl.n	80052d4 <_printf_float+0x43c>
 800525e:	2301      	movs	r3, #1
 8005260:	4642      	mov	r2, r8
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	f43f ae74 	beq.w	8004f56 <_printf_float+0xbe>
 800526e:	ee18 3a10 	vmov	r3, s16
 8005272:	4652      	mov	r2, sl
 8005274:	4631      	mov	r1, r6
 8005276:	4628      	mov	r0, r5
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	f43f ae6b 	beq.w	8004f56 <_printf_float+0xbe>
 8005280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005284:	2200      	movs	r2, #0
 8005286:	2300      	movs	r3, #0
 8005288:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800528c:	f7fb fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005290:	b9d8      	cbnz	r0, 80052ca <_printf_float+0x432>
 8005292:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005296:	f108 0201 	add.w	r2, r8, #1
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d10e      	bne.n	80052c2 <_printf_float+0x42a>
 80052a4:	e657      	b.n	8004f56 <_printf_float+0xbe>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae50 	beq.w	8004f56 <_printf_float+0xbe>
 80052b6:	f108 0801 	add.w	r8, r8, #1
 80052ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	4543      	cmp	r3, r8
 80052c0:	dcf1      	bgt.n	80052a6 <_printf_float+0x40e>
 80052c2:	464b      	mov	r3, r9
 80052c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052c8:	e6da      	b.n	8005080 <_printf_float+0x1e8>
 80052ca:	f04f 0800 	mov.w	r8, #0
 80052ce:	f104 0a1a 	add.w	sl, r4, #26
 80052d2:	e7f2      	b.n	80052ba <_printf_float+0x422>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4642      	mov	r2, r8
 80052d8:	e7df      	b.n	800529a <_printf_float+0x402>
 80052da:	2301      	movs	r3, #1
 80052dc:	464a      	mov	r2, r9
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae36 	beq.w	8004f56 <_printf_float+0xbe>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	4543      	cmp	r3, r8
 80052f6:	dcf0      	bgt.n	80052da <_printf_float+0x442>
 80052f8:	e6f8      	b.n	80050ec <_printf_float+0x254>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	f104 0919 	add.w	r9, r4, #25
 8005302:	e7f4      	b.n	80052ee <_printf_float+0x456>

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4699      	mov	r9, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005350:	1e13      	subs	r3, r2, #0
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf02      	ittt	eq
 8005376:	68e5      	ldreq	r5, [r4, #12]
 8005378:	6833      	ldreq	r3, [r6, #0]
 800537a:	1aed      	subeq	r5, r5, r3
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4649      	mov	r1, r9
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	; 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4649      	mov	r1, r9
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	7e0f      	ldrb	r7, [r1, #24]
 80053e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e8:	2f78      	cmp	r7, #120	; 0x78
 80053ea:	4691      	mov	r9, r2
 80053ec:	4680      	mov	r8, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	469a      	mov	sl, r3
 80053f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	; 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d4 	beq.w	80055aa <_printf_i+0x1ca>
 8005402:	2f58      	cmp	r7, #88	; 0x58
 8005404:	f000 80c0 	beq.w	8005588 <_printf_i+0x1a8>
 8005408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a101      	add	r1, pc, #4	; (adr r1, 8005420 <_printf_i+0x40>)
 800541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	08005591 	.word	0x08005591
 8005450:	080054b9 	.word	0x080054b9
 8005454:	0800554b 	.word	0x0800554b
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055b3 	.word	0x080055b3
 8005464:	08005409 	.word	0x08005409
 8005468:	080054b9 	.word	0x080054b9
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	08005553 	.word	0x08005553
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	602a      	str	r2, [r5, #0]
 8005480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e09f      	b.n	80055cc <_printf_i+0x1ec>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	682b      	ldr	r3, [r5, #0]
 8005490:	0607      	lsls	r7, r0, #24
 8005492:	f103 0104 	add.w	r1, r3, #4
 8005496:	6029      	str	r1, [r5, #0]
 8005498:	d501      	bpl.n	800549e <_printf_i+0xbe>
 800549a:	681e      	ldr	r6, [r3, #0]
 800549c:	e003      	b.n	80054a6 <_printf_i+0xc6>
 800549e:	0646      	lsls	r6, r0, #25
 80054a0:	d5fb      	bpl.n	800549a <_printf_i+0xba>
 80054a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054a6:	2e00      	cmp	r6, #0
 80054a8:	da03      	bge.n	80054b2 <_printf_i+0xd2>
 80054aa:	232d      	movs	r3, #45	; 0x2d
 80054ac:	4276      	negs	r6, r6
 80054ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b2:	485a      	ldr	r0, [pc, #360]	; (800561c <_printf_i+0x23c>)
 80054b4:	230a      	movs	r3, #10
 80054b6:	e012      	b.n	80054de <_printf_i+0xfe>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	6820      	ldr	r0, [r4, #0]
 80054bc:	1d19      	adds	r1, r3, #4
 80054be:	6029      	str	r1, [r5, #0]
 80054c0:	0605      	lsls	r5, r0, #24
 80054c2:	d501      	bpl.n	80054c8 <_printf_i+0xe8>
 80054c4:	681e      	ldr	r6, [r3, #0]
 80054c6:	e002      	b.n	80054ce <_printf_i+0xee>
 80054c8:	0641      	lsls	r1, r0, #25
 80054ca:	d5fb      	bpl.n	80054c4 <_printf_i+0xe4>
 80054cc:	881e      	ldrh	r6, [r3, #0]
 80054ce:	4853      	ldr	r0, [pc, #332]	; (800561c <_printf_i+0x23c>)
 80054d0:	2f6f      	cmp	r7, #111	; 0x6f
 80054d2:	bf0c      	ite	eq
 80054d4:	2308      	moveq	r3, #8
 80054d6:	230a      	movne	r3, #10
 80054d8:	2100      	movs	r1, #0
 80054da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054de:	6865      	ldr	r5, [r4, #4]
 80054e0:	60a5      	str	r5, [r4, #8]
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	bfa2      	ittt	ge
 80054e6:	6821      	ldrge	r1, [r4, #0]
 80054e8:	f021 0104 	bicge.w	r1, r1, #4
 80054ec:	6021      	strge	r1, [r4, #0]
 80054ee:	b90e      	cbnz	r6, 80054f4 <_printf_i+0x114>
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	d04b      	beq.n	800558c <_printf_i+0x1ac>
 80054f4:	4615      	mov	r5, r2
 80054f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80054fa:	fb03 6711 	mls	r7, r3, r1, r6
 80054fe:	5dc7      	ldrb	r7, [r0, r7]
 8005500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005504:	4637      	mov	r7, r6
 8005506:	42bb      	cmp	r3, r7
 8005508:	460e      	mov	r6, r1
 800550a:	d9f4      	bls.n	80054f6 <_printf_i+0x116>
 800550c:	2b08      	cmp	r3, #8
 800550e:	d10b      	bne.n	8005528 <_printf_i+0x148>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	07de      	lsls	r6, r3, #31
 8005514:	d508      	bpl.n	8005528 <_printf_i+0x148>
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	6861      	ldr	r1, [r4, #4]
 800551a:	4299      	cmp	r1, r3
 800551c:	bfde      	ittt	le
 800551e:	2330      	movle	r3, #48	; 0x30
 8005520:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005524:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005528:	1b52      	subs	r2, r2, r5
 800552a:	6122      	str	r2, [r4, #16]
 800552c:	f8cd a000 	str.w	sl, [sp]
 8005530:	464b      	mov	r3, r9
 8005532:	aa03      	add	r2, sp, #12
 8005534:	4621      	mov	r1, r4
 8005536:	4640      	mov	r0, r8
 8005538:	f7ff fee4 	bl	8005304 <_printf_common>
 800553c:	3001      	adds	r0, #1
 800553e:	d14a      	bne.n	80055d6 <_printf_i+0x1f6>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b004      	add	sp, #16
 8005546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	f043 0320 	orr.w	r3, r3, #32
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	4833      	ldr	r0, [pc, #204]	; (8005620 <_printf_i+0x240>)
 8005554:	2778      	movs	r7, #120	; 0x78
 8005556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	6829      	ldr	r1, [r5, #0]
 800555e:	061f      	lsls	r7, r3, #24
 8005560:	f851 6b04 	ldr.w	r6, [r1], #4
 8005564:	d402      	bmi.n	800556c <_printf_i+0x18c>
 8005566:	065f      	lsls	r7, r3, #25
 8005568:	bf48      	it	mi
 800556a:	b2b6      	uxthmi	r6, r6
 800556c:	07df      	lsls	r7, r3, #31
 800556e:	bf48      	it	mi
 8005570:	f043 0320 	orrmi.w	r3, r3, #32
 8005574:	6029      	str	r1, [r5, #0]
 8005576:	bf48      	it	mi
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b91e      	cbnz	r6, 8005584 <_printf_i+0x1a4>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f023 0320 	bic.w	r3, r3, #32
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	2310      	movs	r3, #16
 8005586:	e7a7      	b.n	80054d8 <_printf_i+0xf8>
 8005588:	4824      	ldr	r0, [pc, #144]	; (800561c <_printf_i+0x23c>)
 800558a:	e7e4      	b.n	8005556 <_printf_i+0x176>
 800558c:	4615      	mov	r5, r2
 800558e:	e7bd      	b.n	800550c <_printf_i+0x12c>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	6826      	ldr	r6, [r4, #0]
 8005594:	6961      	ldr	r1, [r4, #20]
 8005596:	1d18      	adds	r0, r3, #4
 8005598:	6028      	str	r0, [r5, #0]
 800559a:	0635      	lsls	r5, r6, #24
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	d501      	bpl.n	80055a4 <_printf_i+0x1c4>
 80055a0:	6019      	str	r1, [r3, #0]
 80055a2:	e002      	b.n	80055aa <_printf_i+0x1ca>
 80055a4:	0670      	lsls	r0, r6, #25
 80055a6:	d5fb      	bpl.n	80055a0 <_printf_i+0x1c0>
 80055a8:	8019      	strh	r1, [r3, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	4615      	mov	r5, r2
 80055b0:	e7bc      	b.n	800552c <_printf_i+0x14c>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	602a      	str	r2, [r5, #0]
 80055b8:	681d      	ldr	r5, [r3, #0]
 80055ba:	6862      	ldr	r2, [r4, #4]
 80055bc:	2100      	movs	r1, #0
 80055be:	4628      	mov	r0, r5
 80055c0:	f7fa fe06 	bl	80001d0 <memchr>
 80055c4:	b108      	cbz	r0, 80055ca <_printf_i+0x1ea>
 80055c6:	1b40      	subs	r0, r0, r5
 80055c8:	6060      	str	r0, [r4, #4]
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	2300      	movs	r3, #0
 80055d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d4:	e7aa      	b.n	800552c <_printf_i+0x14c>
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	462a      	mov	r2, r5
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	47d0      	blx	sl
 80055e0:	3001      	adds	r0, #1
 80055e2:	d0ad      	beq.n	8005540 <_printf_i+0x160>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	079b      	lsls	r3, r3, #30
 80055e8:	d413      	bmi.n	8005612 <_printf_i+0x232>
 80055ea:	68e0      	ldr	r0, [r4, #12]
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	4298      	cmp	r0, r3
 80055f0:	bfb8      	it	lt
 80055f2:	4618      	movlt	r0, r3
 80055f4:	e7a6      	b.n	8005544 <_printf_i+0x164>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4632      	mov	r2, r6
 80055fa:	4649      	mov	r1, r9
 80055fc:	4640      	mov	r0, r8
 80055fe:	47d0      	blx	sl
 8005600:	3001      	adds	r0, #1
 8005602:	d09d      	beq.n	8005540 <_printf_i+0x160>
 8005604:	3501      	adds	r5, #1
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	9903      	ldr	r1, [sp, #12]
 800560a:	1a5b      	subs	r3, r3, r1
 800560c:	42ab      	cmp	r3, r5
 800560e:	dcf2      	bgt.n	80055f6 <_printf_i+0x216>
 8005610:	e7eb      	b.n	80055ea <_printf_i+0x20a>
 8005612:	2500      	movs	r5, #0
 8005614:	f104 0619 	add.w	r6, r4, #25
 8005618:	e7f5      	b.n	8005606 <_printf_i+0x226>
 800561a:	bf00      	nop
 800561c:	0800771e 	.word	0x0800771e
 8005620:	0800772f 	.word	0x0800772f

08005624 <std>:
 8005624:	2300      	movs	r3, #0
 8005626:	b510      	push	{r4, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	e9c0 3300 	strd	r3, r3, [r0]
 800562e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005632:	6083      	str	r3, [r0, #8]
 8005634:	8181      	strh	r1, [r0, #12]
 8005636:	6643      	str	r3, [r0, #100]	; 0x64
 8005638:	81c2      	strh	r2, [r0, #14]
 800563a:	6183      	str	r3, [r0, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	2208      	movs	r2, #8
 8005640:	305c      	adds	r0, #92	; 0x5c
 8005642:	f000 f8f4 	bl	800582e <memset>
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <std+0x58>)
 8005648:	6263      	str	r3, [r4, #36]	; 0x24
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <std+0x5c>)
 800564c:	62a3      	str	r3, [r4, #40]	; 0x28
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <std+0x60>)
 8005650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <std+0x64>)
 8005654:	6323      	str	r3, [r4, #48]	; 0x30
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <std+0x68>)
 8005658:	6224      	str	r4, [r4, #32]
 800565a:	429c      	cmp	r4, r3
 800565c:	d006      	beq.n	800566c <std+0x48>
 800565e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005662:	4294      	cmp	r4, r2
 8005664:	d002      	beq.n	800566c <std+0x48>
 8005666:	33d0      	adds	r3, #208	; 0xd0
 8005668:	429c      	cmp	r4, r3
 800566a:	d105      	bne.n	8005678 <std+0x54>
 800566c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f000 b958 	b.w	8005928 <__retarget_lock_init_recursive>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	080057a9 	.word	0x080057a9
 8005680:	080057cb 	.word	0x080057cb
 8005684:	08005803 	.word	0x08005803
 8005688:	08005827 	.word	0x08005827
 800568c:	2000028c 	.word	0x2000028c

08005690 <stdio_exit_handler>:
 8005690:	4a02      	ldr	r2, [pc, #8]	; (800569c <stdio_exit_handler+0xc>)
 8005692:	4903      	ldr	r1, [pc, #12]	; (80056a0 <stdio_exit_handler+0x10>)
 8005694:	4803      	ldr	r0, [pc, #12]	; (80056a4 <stdio_exit_handler+0x14>)
 8005696:	f000 b869 	b.w	800576c <_fwalk_sglue>
 800569a:	bf00      	nop
 800569c:	2000000c 	.word	0x2000000c
 80056a0:	08007029 	.word	0x08007029
 80056a4:	20000018 	.word	0x20000018

080056a8 <cleanup_stdio>:
 80056a8:	6841      	ldr	r1, [r0, #4]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <cleanup_stdio+0x34>)
 80056ac:	4299      	cmp	r1, r3
 80056ae:	b510      	push	{r4, lr}
 80056b0:	4604      	mov	r4, r0
 80056b2:	d001      	beq.n	80056b8 <cleanup_stdio+0x10>
 80056b4:	f001 fcb8 	bl	8007028 <_fflush_r>
 80056b8:	68a1      	ldr	r1, [r4, #8]
 80056ba:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <cleanup_stdio+0x38>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <cleanup_stdio+0x1e>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f001 fcb1 	bl	8007028 <_fflush_r>
 80056c6:	68e1      	ldr	r1, [r4, #12]
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <cleanup_stdio+0x3c>)
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d004      	beq.n	80056d8 <cleanup_stdio+0x30>
 80056ce:	4620      	mov	r0, r4
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f001 bca8 	b.w	8007028 <_fflush_r>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	2000028c 	.word	0x2000028c
 80056e0:	200002f4 	.word	0x200002f4
 80056e4:	2000035c 	.word	0x2000035c

080056e8 <global_stdio_init.part.0>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <global_stdio_init.part.0+0x30>)
 80056ec:	4c0b      	ldr	r4, [pc, #44]	; (800571c <global_stdio_init.part.0+0x34>)
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <global_stdio_init.part.0+0x38>)
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	2200      	movs	r2, #0
 80056f6:	2104      	movs	r1, #4
 80056f8:	f7ff ff94 	bl	8005624 <std>
 80056fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005700:	2201      	movs	r2, #1
 8005702:	2109      	movs	r1, #9
 8005704:	f7ff ff8e 	bl	8005624 <std>
 8005708:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800570c:	2202      	movs	r2, #2
 800570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005712:	2112      	movs	r1, #18
 8005714:	f7ff bf86 	b.w	8005624 <std>
 8005718:	200003c4 	.word	0x200003c4
 800571c:	2000028c 	.word	0x2000028c
 8005720:	08005691 	.word	0x08005691

08005724 <__sfp_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sfp_lock_acquire+0x8>)
 8005726:	f000 b900 	b.w	800592a <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200003cd 	.word	0x200003cd

08005730 <__sfp_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__sfp_lock_release+0x8>)
 8005732:	f000 b8fb 	b.w	800592c <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200003cd 	.word	0x200003cd

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sfp_lock_acquire>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sfp_lock_release>
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <__sinit+0x28>)
 8005752:	6223      	str	r3, [r4, #32]
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <__sinit+0x2c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <__sinit+0xc>
 800575c:	f7ff ffc4 	bl	80056e8 <global_stdio_init.part.0>
 8005760:	e7f2      	b.n	8005748 <__sinit+0xc>
 8005762:	bf00      	nop
 8005764:	080056a9 	.word	0x080056a9
 8005768:	200003c4 	.word	0x200003c4

0800576c <_fwalk_sglue>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	4688      	mov	r8, r1
 8005774:	4614      	mov	r4, r2
 8005776:	2600      	movs	r6, #0
 8005778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800577c:	f1b9 0901 	subs.w	r9, r9, #1
 8005780:	d505      	bpl.n	800578e <_fwalk_sglue+0x22>
 8005782:	6824      	ldr	r4, [r4, #0]
 8005784:	2c00      	cmp	r4, #0
 8005786:	d1f7      	bne.n	8005778 <_fwalk_sglue+0xc>
 8005788:	4630      	mov	r0, r6
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d907      	bls.n	80057a4 <_fwalk_sglue+0x38>
 8005794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005798:	3301      	adds	r3, #1
 800579a:	d003      	beq.n	80057a4 <_fwalk_sglue+0x38>
 800579c:	4629      	mov	r1, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	4306      	orrs	r6, r0
 80057a4:	3568      	adds	r5, #104	; 0x68
 80057a6:	e7e9      	b.n	800577c <_fwalk_sglue+0x10>

080057a8 <__sread>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	460c      	mov	r4, r1
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	f000 f86c 	bl	800588c <_read_r>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	bfab      	itete	ge
 80057b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057ba:	89a3      	ldrhlt	r3, [r4, #12]
 80057bc:	181b      	addge	r3, r3, r0
 80057be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057c2:	bfac      	ite	ge
 80057c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80057c6:	81a3      	strhlt	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__swrite>:
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	461f      	mov	r7, r3
 80057d0:	898b      	ldrh	r3, [r1, #12]
 80057d2:	05db      	lsls	r3, r3, #23
 80057d4:	4605      	mov	r5, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4616      	mov	r6, r2
 80057da:	d505      	bpl.n	80057e8 <__swrite+0x1e>
 80057dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e0:	2302      	movs	r3, #2
 80057e2:	2200      	movs	r2, #0
 80057e4:	f000 f840 	bl	8005868 <_lseek_r>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	4632      	mov	r2, r6
 80057f6:	463b      	mov	r3, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	f000 b857 	b.w	80058b0 <_write_r>

08005802 <__sseek>:
 8005802:	b510      	push	{r4, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 f82d 	bl	8005868 <_lseek_r>
 800580e:	1c43      	adds	r3, r0, #1
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	bf15      	itete	ne
 8005814:	6560      	strne	r0, [r4, #84]	; 0x54
 8005816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800581a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800581e:	81a3      	strheq	r3, [r4, #12]
 8005820:	bf18      	it	ne
 8005822:	81a3      	strhne	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__sclose>:
 8005826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582a:	f000 b80d 	b.w	8005848 <_close_r>

0800582e <memset>:
 800582e:	4402      	add	r2, r0
 8005830:	4603      	mov	r3, r0
 8005832:	4293      	cmp	r3, r2
 8005834:	d100      	bne.n	8005838 <memset+0xa>
 8005836:	4770      	bx	lr
 8005838:	f803 1b01 	strb.w	r1, [r3], #1
 800583c:	e7f9      	b.n	8005832 <memset+0x4>
	...

08005840 <_localeconv_r>:
 8005840:	4800      	ldr	r0, [pc, #0]	; (8005844 <_localeconv_r+0x4>)
 8005842:	4770      	bx	lr
 8005844:	20000158 	.word	0x20000158

08005848 <_close_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d06      	ldr	r5, [pc, #24]	; (8005864 <_close_r+0x1c>)
 800584c:	2300      	movs	r3, #0
 800584e:	4604      	mov	r4, r0
 8005850:	4608      	mov	r0, r1
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	f7fc fd03 	bl	800225e <_close>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_close_r+0x1a>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_close_r+0x1a>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	200003c8 	.word	0x200003c8

08005868 <_lseek_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d07      	ldr	r5, [pc, #28]	; (8005888 <_lseek_r+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fc fd18 	bl	80022ac <_lseek>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_lseek_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_lseek_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200003c8 	.word	0x200003c8

0800588c <_read_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4d07      	ldr	r5, [pc, #28]	; (80058ac <_read_r+0x20>)
 8005890:	4604      	mov	r4, r0
 8005892:	4608      	mov	r0, r1
 8005894:	4611      	mov	r1, r2
 8005896:	2200      	movs	r2, #0
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f7fc fca6 	bl	80021ec <_read>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_read_r+0x1e>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_read_r+0x1e>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	200003c8 	.word	0x200003c8

080058b0 <_write_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4d07      	ldr	r5, [pc, #28]	; (80058d0 <_write_r+0x20>)
 80058b4:	4604      	mov	r4, r0
 80058b6:	4608      	mov	r0, r1
 80058b8:	4611      	mov	r1, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7fc fcb1 	bl	8002226 <_write>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_write_r+0x1e>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_write_r+0x1e>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	200003c8 	.word	0x200003c8

080058d4 <__errno>:
 80058d4:	4b01      	ldr	r3, [pc, #4]	; (80058dc <__errno+0x8>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000064 	.word	0x20000064

080058e0 <__libc_init_array>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	4d0d      	ldr	r5, [pc, #52]	; (8005918 <__libc_init_array+0x38>)
 80058e4:	4c0d      	ldr	r4, [pc, #52]	; (800591c <__libc_init_array+0x3c>)
 80058e6:	1b64      	subs	r4, r4, r5
 80058e8:	10a4      	asrs	r4, r4, #2
 80058ea:	2600      	movs	r6, #0
 80058ec:	42a6      	cmp	r6, r4
 80058ee:	d109      	bne.n	8005904 <__libc_init_array+0x24>
 80058f0:	4d0b      	ldr	r5, [pc, #44]	; (8005920 <__libc_init_array+0x40>)
 80058f2:	4c0c      	ldr	r4, [pc, #48]	; (8005924 <__libc_init_array+0x44>)
 80058f4:	f001 feec 	bl	80076d0 <_init>
 80058f8:	1b64      	subs	r4, r4, r5
 80058fa:	10a4      	asrs	r4, r4, #2
 80058fc:	2600      	movs	r6, #0
 80058fe:	42a6      	cmp	r6, r4
 8005900:	d105      	bne.n	800590e <__libc_init_array+0x2e>
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	f855 3b04 	ldr.w	r3, [r5], #4
 8005908:	4798      	blx	r3
 800590a:	3601      	adds	r6, #1
 800590c:	e7ee      	b.n	80058ec <__libc_init_array+0xc>
 800590e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005912:	4798      	blx	r3
 8005914:	3601      	adds	r6, #1
 8005916:	e7f2      	b.n	80058fe <__libc_init_array+0x1e>
 8005918:	08007a84 	.word	0x08007a84
 800591c:	08007a84 	.word	0x08007a84
 8005920:	08007a84 	.word	0x08007a84
 8005924:	08007a88 	.word	0x08007a88

08005928 <__retarget_lock_init_recursive>:
 8005928:	4770      	bx	lr

0800592a <__retarget_lock_acquire_recursive>:
 800592a:	4770      	bx	lr

0800592c <__retarget_lock_release_recursive>:
 800592c:	4770      	bx	lr

0800592e <quorem>:
 800592e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005932:	6903      	ldr	r3, [r0, #16]
 8005934:	690c      	ldr	r4, [r1, #16]
 8005936:	42a3      	cmp	r3, r4
 8005938:	4607      	mov	r7, r0
 800593a:	db7e      	blt.n	8005a3a <quorem+0x10c>
 800593c:	3c01      	subs	r4, #1
 800593e:	f101 0814 	add.w	r8, r1, #20
 8005942:	f100 0514 	add.w	r5, r0, #20
 8005946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005954:	3301      	adds	r3, #1
 8005956:	429a      	cmp	r2, r3
 8005958:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800595c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005960:	fbb2 f6f3 	udiv	r6, r2, r3
 8005964:	d331      	bcc.n	80059ca <quorem+0x9c>
 8005966:	f04f 0e00 	mov.w	lr, #0
 800596a:	4640      	mov	r0, r8
 800596c:	46ac      	mov	ip, r5
 800596e:	46f2      	mov	sl, lr
 8005970:	f850 2b04 	ldr.w	r2, [r0], #4
 8005974:	b293      	uxth	r3, r2
 8005976:	fb06 e303 	mla	r3, r6, r3, lr
 800597a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800597e:	0c1a      	lsrs	r2, r3, #16
 8005980:	b29b      	uxth	r3, r3
 8005982:	ebaa 0303 	sub.w	r3, sl, r3
 8005986:	f8dc a000 	ldr.w	sl, [ip]
 800598a:	fa13 f38a 	uxtah	r3, r3, sl
 800598e:	fb06 220e 	mla	r2, r6, lr, r2
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800599a:	b292      	uxth	r2, r2
 800599c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80059a8:	4581      	cmp	r9, r0
 80059aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ae:	f84c 3b04 	str.w	r3, [ip], #4
 80059b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059b6:	d2db      	bcs.n	8005970 <quorem+0x42>
 80059b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80059bc:	b92b      	cbnz	r3, 80059ca <quorem+0x9c>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	3b04      	subs	r3, #4
 80059c2:	429d      	cmp	r5, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	d32c      	bcc.n	8005a22 <quorem+0xf4>
 80059c8:	613c      	str	r4, [r7, #16]
 80059ca:	4638      	mov	r0, r7
 80059cc:	f001 f9a6 	bl	8006d1c <__mcmp>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	db22      	blt.n	8005a1a <quorem+0xec>
 80059d4:	3601      	adds	r6, #1
 80059d6:	4629      	mov	r1, r5
 80059d8:	2000      	movs	r0, #0
 80059da:	f858 2b04 	ldr.w	r2, [r8], #4
 80059de:	f8d1 c000 	ldr.w	ip, [r1]
 80059e2:	b293      	uxth	r3, r2
 80059e4:	1ac3      	subs	r3, r0, r3
 80059e6:	0c12      	lsrs	r2, r2, #16
 80059e8:	fa13 f38c 	uxtah	r3, r3, ip
 80059ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059fa:	45c1      	cmp	r9, r8
 80059fc:	f841 3b04 	str.w	r3, [r1], #4
 8005a00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a04:	d2e9      	bcs.n	80059da <quorem+0xac>
 8005a06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a0e:	b922      	cbnz	r2, 8005a1a <quorem+0xec>
 8005a10:	3b04      	subs	r3, #4
 8005a12:	429d      	cmp	r5, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	d30a      	bcc.n	8005a2e <quorem+0x100>
 8005a18:	613c      	str	r4, [r7, #16]
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	b003      	add	sp, #12
 8005a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	3b04      	subs	r3, #4
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	d1ce      	bne.n	80059c8 <quorem+0x9a>
 8005a2a:	3c01      	subs	r4, #1
 8005a2c:	e7c9      	b.n	80059c2 <quorem+0x94>
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	d1f0      	bne.n	8005a18 <quorem+0xea>
 8005a36:	3c01      	subs	r4, #1
 8005a38:	e7eb      	b.n	8005a12 <quorem+0xe4>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e7ee      	b.n	8005a1c <quorem+0xee>
	...

08005a40 <_dtoa_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	ed2d 8b04 	vpush	{d8-d9}
 8005a48:	69c5      	ldr	r5, [r0, #28]
 8005a4a:	b093      	sub	sp, #76	; 0x4c
 8005a4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a50:	ec57 6b10 	vmov	r6, r7, d0
 8005a54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a58:	9107      	str	r1, [sp, #28]
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a60:	b975      	cbnz	r5, 8005a80 <_dtoa_r+0x40>
 8005a62:	2010      	movs	r0, #16
 8005a64:	f000 fe2a 	bl	80066bc <malloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	61e0      	str	r0, [r4, #28]
 8005a6c:	b920      	cbnz	r0, 8005a78 <_dtoa_r+0x38>
 8005a6e:	4bae      	ldr	r3, [pc, #696]	; (8005d28 <_dtoa_r+0x2e8>)
 8005a70:	21ef      	movs	r1, #239	; 0xef
 8005a72:	48ae      	ldr	r0, [pc, #696]	; (8005d2c <_dtoa_r+0x2ec>)
 8005a74:	f001 fb1e 	bl	80070b4 <__assert_func>
 8005a78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a7c:	6005      	str	r5, [r0, #0]
 8005a7e:	60c5      	str	r5, [r0, #12]
 8005a80:	69e3      	ldr	r3, [r4, #28]
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	b151      	cbz	r1, 8005a9c <_dtoa_r+0x5c>
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	604a      	str	r2, [r1, #4]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4093      	lsls	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 ff07 	bl	80068a4 <_Bfree>
 8005a96:	69e3      	ldr	r3, [r4, #28]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	1e3b      	subs	r3, r7, #0
 8005a9e:	bfbb      	ittet	lt
 8005aa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	9303      	strlt	r3, [sp, #12]
 8005aa6:	2300      	movge	r3, #0
 8005aa8:	2201      	movlt	r2, #1
 8005aaa:	bfac      	ite	ge
 8005aac:	f8c8 3000 	strge.w	r3, [r8]
 8005ab0:	f8c8 2000 	strlt.w	r2, [r8]
 8005ab4:	4b9e      	ldr	r3, [pc, #632]	; (8005d30 <_dtoa_r+0x2f0>)
 8005ab6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005aba:	ea33 0308 	bics.w	r3, r3, r8
 8005abe:	d11b      	bne.n	8005af8 <_dtoa_r+0xb8>
 8005ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ac2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005acc:	4333      	orrs	r3, r6
 8005ace:	f000 8593 	beq.w	80065f8 <_dtoa_r+0xbb8>
 8005ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad4:	b963      	cbnz	r3, 8005af0 <_dtoa_r+0xb0>
 8005ad6:	4b97      	ldr	r3, [pc, #604]	; (8005d34 <_dtoa_r+0x2f4>)
 8005ad8:	e027      	b.n	8005b2a <_dtoa_r+0xea>
 8005ada:	4b97      	ldr	r3, [pc, #604]	; (8005d38 <_dtoa_r+0x2f8>)
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	9800      	ldr	r0, [sp, #0]
 8005ae6:	b013      	add	sp, #76	; 0x4c
 8005ae8:	ecbd 8b04 	vpop	{d8-d9}
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	4b90      	ldr	r3, [pc, #576]	; (8005d34 <_dtoa_r+0x2f4>)
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	3303      	adds	r3, #3
 8005af6:	e7f3      	b.n	8005ae0 <_dtoa_r+0xa0>
 8005af8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	ec51 0b17 	vmov	r0, r1, d7
 8005b02:	eeb0 8a47 	vmov.f32	s16, s14
 8005b06:	eef0 8a67 	vmov.f32	s17, s15
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f7fa ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b10:	4681      	mov	r9, r0
 8005b12:	b160      	cbz	r0, 8005b2e <_dtoa_r+0xee>
 8005b14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b16:	2301      	movs	r3, #1
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8568 	beq.w	80065f2 <_dtoa_r+0xbb2>
 8005b22:	4b86      	ldr	r3, [pc, #536]	; (8005d3c <_dtoa_r+0x2fc>)
 8005b24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	e7da      	b.n	8005ae4 <_dtoa_r+0xa4>
 8005b2e:	aa10      	add	r2, sp, #64	; 0x40
 8005b30:	a911      	add	r1, sp, #68	; 0x44
 8005b32:	4620      	mov	r0, r4
 8005b34:	eeb0 0a48 	vmov.f32	s0, s16
 8005b38:	eef0 0a68 	vmov.f32	s1, s17
 8005b3c:	f001 f994 	bl	8006e68 <__d2b>
 8005b40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b44:	4682      	mov	sl, r0
 8005b46:	2d00      	cmp	r5, #0
 8005b48:	d07f      	beq.n	8005c4a <_dtoa_r+0x20a>
 8005b4a:	ee18 3a90 	vmov	r3, s17
 8005b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b56:	ec51 0b18 	vmov	r0, r1, d8
 8005b5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b66:	4619      	mov	r1, r3
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b75      	ldr	r3, [pc, #468]	; (8005d40 <_dtoa_r+0x300>)
 8005b6c:	f7fa fb8c 	bl	8000288 <__aeabi_dsub>
 8005b70:	a367      	add	r3, pc, #412	; (adr r3, 8005d10 <_dtoa_r+0x2d0>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fd3f 	bl	80005f8 <__aeabi_dmul>
 8005b7a:	a367      	add	r3, pc, #412	; (adr r3, 8005d18 <_dtoa_r+0x2d8>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fb84 	bl	800028c <__adddf3>
 8005b84:	4606      	mov	r6, r0
 8005b86:	4628      	mov	r0, r5
 8005b88:	460f      	mov	r7, r1
 8005b8a:	f7fa fccb 	bl	8000524 <__aeabi_i2d>
 8005b8e:	a364      	add	r3, pc, #400	; (adr r3, 8005d20 <_dtoa_r+0x2e0>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fd30 	bl	80005f8 <__aeabi_dmul>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa fb74 	bl	800028c <__adddf3>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	f7fa ffd6 	bl	8000b58 <__aeabi_d2iz>
 8005bac:	2200      	movs	r2, #0
 8005bae:	4683      	mov	fp, r0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa ff91 	bl	8000adc <__aeabi_dcmplt>
 8005bba:	b148      	cbz	r0, 8005bd0 <_dtoa_r+0x190>
 8005bbc:	4658      	mov	r0, fp
 8005bbe:	f7fa fcb1 	bl	8000524 <__aeabi_i2d>
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	f7fa ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bca:	b908      	cbnz	r0, 8005bd0 <_dtoa_r+0x190>
 8005bcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bd0:	f1bb 0f16 	cmp.w	fp, #22
 8005bd4:	d857      	bhi.n	8005c86 <_dtoa_r+0x246>
 8005bd6:	4b5b      	ldr	r3, [pc, #364]	; (8005d44 <_dtoa_r+0x304>)
 8005bd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	ec51 0b18 	vmov	r0, r1, d8
 8005be4:	f7fa ff7a 	bl	8000adc <__aeabi_dcmplt>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d04e      	beq.n	8005c8a <_dtoa_r+0x24a>
 8005bec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8005bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bf6:	1b5b      	subs	r3, r3, r5
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	bf45      	ittet	mi
 8005bfc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c00:	9305      	strmi	r3, [sp, #20]
 8005c02:	2300      	movpl	r3, #0
 8005c04:	2300      	movmi	r3, #0
 8005c06:	9206      	str	r2, [sp, #24]
 8005c08:	bf54      	ite	pl
 8005c0a:	9305      	strpl	r3, [sp, #20]
 8005c0c:	9306      	strmi	r3, [sp, #24]
 8005c0e:	f1bb 0f00 	cmp.w	fp, #0
 8005c12:	db3c      	blt.n	8005c8e <_dtoa_r+0x24e>
 8005c14:	9b06      	ldr	r3, [sp, #24]
 8005c16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c1a:	445b      	add	r3, fp
 8005c1c:	9306      	str	r3, [sp, #24]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9308      	str	r3, [sp, #32]
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	2b09      	cmp	r3, #9
 8005c26:	d868      	bhi.n	8005cfa <_dtoa_r+0x2ba>
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	bfc4      	itt	gt
 8005c2c:	3b04      	subgt	r3, #4
 8005c2e:	9307      	strgt	r3, [sp, #28]
 8005c30:	9b07      	ldr	r3, [sp, #28]
 8005c32:	f1a3 0302 	sub.w	r3, r3, #2
 8005c36:	bfcc      	ite	gt
 8005c38:	2500      	movgt	r5, #0
 8005c3a:	2501      	movle	r5, #1
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	f200 8085 	bhi.w	8005d4c <_dtoa_r+0x30c>
 8005c42:	e8df f003 	tbb	[pc, r3]
 8005c46:	3b2e      	.short	0x3b2e
 8005c48:	5839      	.short	0x5839
 8005c4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c4e:	441d      	add	r5, r3
 8005c50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	bfc1      	itttt	gt
 8005c58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c68:	bfd6      	itet	le
 8005c6a:	f1c3 0320 	rsble	r3, r3, #32
 8005c6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c72:	fa06 f003 	lslle.w	r0, r6, r3
 8005c76:	f7fa fc45 	bl	8000504 <__aeabi_ui2d>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c80:	3d01      	subs	r5, #1
 8005c82:	920e      	str	r2, [sp, #56]	; 0x38
 8005c84:	e76f      	b.n	8005b66 <_dtoa_r+0x126>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e7b3      	b.n	8005bf2 <_dtoa_r+0x1b2>
 8005c8a:	900c      	str	r0, [sp, #48]	; 0x30
 8005c8c:	e7b2      	b.n	8005bf4 <_dtoa_r+0x1b4>
 8005c8e:	9b05      	ldr	r3, [sp, #20]
 8005c90:	eba3 030b 	sub.w	r3, r3, fp
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f1cb 0300 	rsb	r3, fp, #0
 8005c9a:	9308      	str	r3, [sp, #32]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ca0:	e7bf      	b.n	8005c22 <_dtoa_r+0x1e2>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc52      	bgt.n	8005d52 <_dtoa_r+0x312>
 8005cac:	2301      	movs	r3, #1
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8005cb6:	e00b      	b.n	8005cd0 <_dtoa_r+0x290>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e7f3      	b.n	8005ca4 <_dtoa_r+0x264>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc2:	445b      	add	r3, fp
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	9304      	str	r3, [sp, #16]
 8005ccc:	bfb8      	it	lt
 8005cce:	2301      	movlt	r3, #1
 8005cd0:	69e0      	ldr	r0, [r4, #28]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f102 0614 	add.w	r6, r2, #20
 8005cda:	429e      	cmp	r6, r3
 8005cdc:	d93d      	bls.n	8005d5a <_dtoa_r+0x31a>
 8005cde:	6041      	str	r1, [r0, #4]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fd9f 	bl	8006824 <_Balloc>
 8005ce6:	9000      	str	r0, [sp, #0]
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d139      	bne.n	8005d60 <_dtoa_r+0x320>
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <_dtoa_r+0x308>)
 8005cee:	4602      	mov	r2, r0
 8005cf0:	f240 11af 	movw	r1, #431	; 0x1af
 8005cf4:	e6bd      	b.n	8005a72 <_dtoa_r+0x32>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e7e1      	b.n	8005cbe <_dtoa_r+0x27e>
 8005cfa:	2501      	movs	r5, #1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9307      	str	r3, [sp, #28]
 8005d00:	9509      	str	r5, [sp, #36]	; 0x24
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2312      	movs	r3, #18
 8005d0e:	e7d1      	b.n	8005cb4 <_dtoa_r+0x274>
 8005d10:	636f4361 	.word	0x636f4361
 8005d14:	3fd287a7 	.word	0x3fd287a7
 8005d18:	8b60c8b3 	.word	0x8b60c8b3
 8005d1c:	3fc68a28 	.word	0x3fc68a28
 8005d20:	509f79fb 	.word	0x509f79fb
 8005d24:	3fd34413 	.word	0x3fd34413
 8005d28:	0800774d 	.word	0x0800774d
 8005d2c:	08007764 	.word	0x08007764
 8005d30:	7ff00000 	.word	0x7ff00000
 8005d34:	08007749 	.word	0x08007749
 8005d38:	08007740 	.word	0x08007740
 8005d3c:	0800771d 	.word	0x0800771d
 8005d40:	3ff80000 	.word	0x3ff80000
 8005d44:	08007850 	.word	0x08007850
 8005d48:	080077bc 	.word	0x080077bc
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d50:	e7d7      	b.n	8005d02 <_dtoa_r+0x2c2>
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	e7ba      	b.n	8005cd0 <_dtoa_r+0x290>
 8005d5a:	3101      	adds	r1, #1
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	e7ba      	b.n	8005cd6 <_dtoa_r+0x296>
 8005d60:	69e3      	ldr	r3, [r4, #28]
 8005d62:	9a00      	ldr	r2, [sp, #0]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	2b0e      	cmp	r3, #14
 8005d6a:	f200 80a8 	bhi.w	8005ebe <_dtoa_r+0x47e>
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	f000 80a5 	beq.w	8005ebe <_dtoa_r+0x47e>
 8005d74:	f1bb 0f00 	cmp.w	fp, #0
 8005d78:	dd38      	ble.n	8005dec <_dtoa_r+0x3ac>
 8005d7a:	4bc0      	ldr	r3, [pc, #768]	; (800607c <_dtoa_r+0x63c>)
 8005d7c:	f00b 020f 	and.w	r2, fp, #15
 8005d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005d90:	d019      	beq.n	8005dc6 <_dtoa_r+0x386>
 8005d92:	4bbb      	ldr	r3, [pc, #748]	; (8006080 <_dtoa_r+0x640>)
 8005d94:	ec51 0b18 	vmov	r0, r1, d8
 8005d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d9c:	f7fa fd56 	bl	800084c <__aeabi_ddiv>
 8005da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da4:	f008 080f 	and.w	r8, r8, #15
 8005da8:	2503      	movs	r5, #3
 8005daa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006080 <_dtoa_r+0x640>
 8005dae:	f1b8 0f00 	cmp.w	r8, #0
 8005db2:	d10a      	bne.n	8005dca <_dtoa_r+0x38a>
 8005db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db8:	4632      	mov	r2, r6
 8005dba:	463b      	mov	r3, r7
 8005dbc:	f7fa fd46 	bl	800084c <__aeabi_ddiv>
 8005dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc4:	e02b      	b.n	8005e1e <_dtoa_r+0x3de>
 8005dc6:	2502      	movs	r5, #2
 8005dc8:	e7ef      	b.n	8005daa <_dtoa_r+0x36a>
 8005dca:	f018 0f01 	tst.w	r8, #1
 8005dce:	d008      	beq.n	8005de2 <_dtoa_r+0x3a2>
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005dd8:	f7fa fc0e 	bl	80005f8 <__aeabi_dmul>
 8005ddc:	3501      	adds	r5, #1
 8005dde:	4606      	mov	r6, r0
 8005de0:	460f      	mov	r7, r1
 8005de2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005de6:	f109 0908 	add.w	r9, r9, #8
 8005dea:	e7e0      	b.n	8005dae <_dtoa_r+0x36e>
 8005dec:	f000 809f 	beq.w	8005f2e <_dtoa_r+0x4ee>
 8005df0:	f1cb 0600 	rsb	r6, fp, #0
 8005df4:	4ba1      	ldr	r3, [pc, #644]	; (800607c <_dtoa_r+0x63c>)
 8005df6:	4fa2      	ldr	r7, [pc, #648]	; (8006080 <_dtoa_r+0x640>)
 8005df8:	f006 020f 	and.w	r2, r6, #15
 8005dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	ec51 0b18 	vmov	r0, r1, d8
 8005e08:	f7fa fbf6 	bl	80005f8 <__aeabi_dmul>
 8005e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e10:	1136      	asrs	r6, r6, #4
 8005e12:	2300      	movs	r3, #0
 8005e14:	2502      	movs	r5, #2
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	d17e      	bne.n	8005f18 <_dtoa_r+0x4d8>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1d0      	bne.n	8005dc0 <_dtoa_r+0x380>
 8005e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8084 	beq.w	8005f32 <_dtoa_r+0x4f2>
 8005e2a:	4b96      	ldr	r3, [pc, #600]	; (8006084 <_dtoa_r+0x644>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4649      	mov	r1, r9
 8005e32:	f7fa fe53 	bl	8000adc <__aeabi_dcmplt>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d07b      	beq.n	8005f32 <_dtoa_r+0x4f2>
 8005e3a:	9b04      	ldr	r3, [sp, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d078      	beq.n	8005f32 <_dtoa_r+0x4f2>
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dd39      	ble.n	8005eba <_dtoa_r+0x47a>
 8005e46:	4b90      	ldr	r3, [pc, #576]	; (8006088 <_dtoa_r+0x648>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fbd3 	bl	80005f8 <__aeabi_dmul>
 8005e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e56:	9e01      	ldr	r6, [sp, #4]
 8005e58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7fa fb5e 	bl	8000524 <__aeabi_i2d>
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	f7fa fbc4 	bl	80005f8 <__aeabi_dmul>
 8005e70:	4b86      	ldr	r3, [pc, #536]	; (800608c <_dtoa_r+0x64c>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	f7fa fa0a 	bl	800028c <__adddf3>
 8005e78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e80:	9303      	str	r3, [sp, #12]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d158      	bne.n	8005f38 <_dtoa_r+0x4f8>
 8005e86:	4b82      	ldr	r3, [pc, #520]	; (8006090 <_dtoa_r+0x650>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa f9fb 	bl	8000288 <__aeabi_dsub>
 8005e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e96:	4680      	mov	r8, r0
 8005e98:	4689      	mov	r9, r1
 8005e9a:	f7fa fe3d 	bl	8000b18 <__aeabi_dcmpgt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f040 8296 	bne.w	80063d0 <_dtoa_r+0x990>
 8005ea4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eae:	4649      	mov	r1, r9
 8005eb0:	f7fa fe14 	bl	8000adc <__aeabi_dcmplt>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f040 8289 	bne.w	80063cc <_dtoa_r+0x98c>
 8005eba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f2c0 814e 	blt.w	8006162 <_dtoa_r+0x722>
 8005ec6:	f1bb 0f0e 	cmp.w	fp, #14
 8005eca:	f300 814a 	bgt.w	8006162 <_dtoa_r+0x722>
 8005ece:	4b6b      	ldr	r3, [pc, #428]	; (800607c <_dtoa_r+0x63c>)
 8005ed0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ed4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f280 80dc 	bge.w	8006098 <_dtoa_r+0x658>
 8005ee0:	9b04      	ldr	r3, [sp, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f300 80d8 	bgt.w	8006098 <_dtoa_r+0x658>
 8005ee8:	f040 826f 	bne.w	80063ca <_dtoa_r+0x98a>
 8005eec:	4b68      	ldr	r3, [pc, #416]	; (8006090 <_dtoa_r+0x650>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fb80 	bl	80005f8 <__aeabi_dmul>
 8005ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005efc:	f7fa fe02 	bl	8000b04 <__aeabi_dcmpge>
 8005f00:	9e04      	ldr	r6, [sp, #16]
 8005f02:	4637      	mov	r7, r6
 8005f04:	2800      	cmp	r0, #0
 8005f06:	f040 8245 	bne.w	8006394 <_dtoa_r+0x954>
 8005f0a:	9d00      	ldr	r5, [sp, #0]
 8005f0c:	2331      	movs	r3, #49	; 0x31
 8005f0e:	f805 3b01 	strb.w	r3, [r5], #1
 8005f12:	f10b 0b01 	add.w	fp, fp, #1
 8005f16:	e241      	b.n	800639c <_dtoa_r+0x95c>
 8005f18:	07f2      	lsls	r2, r6, #31
 8005f1a:	d505      	bpl.n	8005f28 <_dtoa_r+0x4e8>
 8005f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f20:	f7fa fb6a 	bl	80005f8 <__aeabi_dmul>
 8005f24:	3501      	adds	r5, #1
 8005f26:	2301      	movs	r3, #1
 8005f28:	1076      	asrs	r6, r6, #1
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	e773      	b.n	8005e16 <_dtoa_r+0x3d6>
 8005f2e:	2502      	movs	r5, #2
 8005f30:	e775      	b.n	8005e1e <_dtoa_r+0x3de>
 8005f32:	9e04      	ldr	r6, [sp, #16]
 8005f34:	465f      	mov	r7, fp
 8005f36:	e792      	b.n	8005e5e <_dtoa_r+0x41e>
 8005f38:	9900      	ldr	r1, [sp, #0]
 8005f3a:	4b50      	ldr	r3, [pc, #320]	; (800607c <_dtoa_r+0x63c>)
 8005f3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f40:	4431      	add	r1, r6
 8005f42:	9102      	str	r1, [sp, #8]
 8005f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f46:	eeb0 9a47 	vmov.f32	s18, s14
 8005f4a:	eef0 9a67 	vmov.f32	s19, s15
 8005f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f56:	2900      	cmp	r1, #0
 8005f58:	d044      	beq.n	8005fe4 <_dtoa_r+0x5a4>
 8005f5a:	494e      	ldr	r1, [pc, #312]	; (8006094 <_dtoa_r+0x654>)
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7fa fc75 	bl	800084c <__aeabi_ddiv>
 8005f62:	ec53 2b19 	vmov	r2, r3, d9
 8005f66:	f7fa f98f 	bl	8000288 <__aeabi_dsub>
 8005f6a:	9d00      	ldr	r5, [sp, #0]
 8005f6c:	ec41 0b19 	vmov	d9, r0, r1
 8005f70:	4649      	mov	r1, r9
 8005f72:	4640      	mov	r0, r8
 8005f74:	f7fa fdf0 	bl	8000b58 <__aeabi_d2iz>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	f7fa fad3 	bl	8000524 <__aeabi_i2d>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4640      	mov	r0, r8
 8005f84:	4649      	mov	r1, r9
 8005f86:	f7fa f97f 	bl	8000288 <__aeabi_dsub>
 8005f8a:	3630      	adds	r6, #48	; 0x30
 8005f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005f90:	ec53 2b19 	vmov	r2, r3, d9
 8005f94:	4680      	mov	r8, r0
 8005f96:	4689      	mov	r9, r1
 8005f98:	f7fa fda0 	bl	8000adc <__aeabi_dcmplt>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d164      	bne.n	800606a <_dtoa_r+0x62a>
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	4937      	ldr	r1, [pc, #220]	; (8006084 <_dtoa_r+0x644>)
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fa f96e 	bl	8000288 <__aeabi_dsub>
 8005fac:	ec53 2b19 	vmov	r2, r3, d9
 8005fb0:	f7fa fd94 	bl	8000adc <__aeabi_dcmplt>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f040 80b6 	bne.w	8006126 <_dtoa_r+0x6e6>
 8005fba:	9b02      	ldr	r3, [sp, #8]
 8005fbc:	429d      	cmp	r5, r3
 8005fbe:	f43f af7c 	beq.w	8005eba <_dtoa_r+0x47a>
 8005fc2:	4b31      	ldr	r3, [pc, #196]	; (8006088 <_dtoa_r+0x648>)
 8005fc4:	ec51 0b19 	vmov	r0, r1, d9
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f7fa fb15 	bl	80005f8 <__aeabi_dmul>
 8005fce:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <_dtoa_r+0x648>)
 8005fd0:	ec41 0b19 	vmov	d9, r0, r1
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa fb0d 	bl	80005f8 <__aeabi_dmul>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	e7c5      	b.n	8005f70 <_dtoa_r+0x530>
 8005fe4:	ec51 0b17 	vmov	r0, r1, d7
 8005fe8:	f7fa fb06 	bl	80005f8 <__aeabi_dmul>
 8005fec:	9b02      	ldr	r3, [sp, #8]
 8005fee:	9d00      	ldr	r5, [sp, #0]
 8005ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff2:	ec41 0b19 	vmov	d9, r0, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	f7fa fdad 	bl	8000b58 <__aeabi_d2iz>
 8005ffe:	4606      	mov	r6, r0
 8006000:	f7fa fa90 	bl	8000524 <__aeabi_i2d>
 8006004:	3630      	adds	r6, #48	; 0x30
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f93b 	bl	8000288 <__aeabi_dsub>
 8006012:	f805 6b01 	strb.w	r6, [r5], #1
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	429d      	cmp	r5, r3
 800601a:	4680      	mov	r8, r0
 800601c:	4689      	mov	r9, r1
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	d124      	bne.n	800606e <_dtoa_r+0x62e>
 8006024:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <_dtoa_r+0x654>)
 8006026:	ec51 0b19 	vmov	r0, r1, d9
 800602a:	f7fa f92f 	bl	800028c <__adddf3>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4640      	mov	r0, r8
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800603a:	2800      	cmp	r0, #0
 800603c:	d173      	bne.n	8006126 <_dtoa_r+0x6e6>
 800603e:	ec53 2b19 	vmov	r2, r3, d9
 8006042:	4914      	ldr	r1, [pc, #80]	; (8006094 <_dtoa_r+0x654>)
 8006044:	2000      	movs	r0, #0
 8006046:	f7fa f91f 	bl	8000288 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	f7fa fd43 	bl	8000adc <__aeabi_dcmplt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f43f af2f 	beq.w	8005eba <_dtoa_r+0x47a>
 800605c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800605e:	1e6b      	subs	r3, r5, #1
 8006060:	930f      	str	r3, [sp, #60]	; 0x3c
 8006062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d0f8      	beq.n	800605c <_dtoa_r+0x61c>
 800606a:	46bb      	mov	fp, r7
 800606c:	e04a      	b.n	8006104 <_dtoa_r+0x6c4>
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <_dtoa_r+0x648>)
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	e7bd      	b.n	8005ff6 <_dtoa_r+0x5b6>
 800607a:	bf00      	nop
 800607c:	08007850 	.word	0x08007850
 8006080:	08007828 	.word	0x08007828
 8006084:	3ff00000 	.word	0x3ff00000
 8006088:	40240000 	.word	0x40240000
 800608c:	401c0000 	.word	0x401c0000
 8006090:	40140000 	.word	0x40140000
 8006094:	3fe00000 	.word	0x3fe00000
 8006098:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800609c:	9d00      	ldr	r5, [sp, #0]
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	4630      	mov	r0, r6
 80060a4:	4639      	mov	r1, r7
 80060a6:	f7fa fbd1 	bl	800084c <__aeabi_ddiv>
 80060aa:	f7fa fd55 	bl	8000b58 <__aeabi_d2iz>
 80060ae:	9001      	str	r0, [sp, #4]
 80060b0:	f7fa fa38 	bl	8000524 <__aeabi_i2d>
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	f7fa fa9e 	bl	80005f8 <__aeabi_dmul>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa f8e0 	bl	8000288 <__aeabi_dsub>
 80060c8:	9e01      	ldr	r6, [sp, #4]
 80060ca:	9f04      	ldr	r7, [sp, #16]
 80060cc:	3630      	adds	r6, #48	; 0x30
 80060ce:	f805 6b01 	strb.w	r6, [r5], #1
 80060d2:	9e00      	ldr	r6, [sp, #0]
 80060d4:	1bae      	subs	r6, r5, r6
 80060d6:	42b7      	cmp	r7, r6
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	d134      	bne.n	8006148 <_dtoa_r+0x708>
 80060de:	f7fa f8d5 	bl	800028c <__adddf3>
 80060e2:	4642      	mov	r2, r8
 80060e4:	464b      	mov	r3, r9
 80060e6:	4606      	mov	r6, r0
 80060e8:	460f      	mov	r7, r1
 80060ea:	f7fa fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80060ee:	b9c8      	cbnz	r0, 8006124 <_dtoa_r+0x6e4>
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80060fc:	b110      	cbz	r0, 8006104 <_dtoa_r+0x6c4>
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	07db      	lsls	r3, r3, #31
 8006102:	d40f      	bmi.n	8006124 <_dtoa_r+0x6e4>
 8006104:	4651      	mov	r1, sl
 8006106:	4620      	mov	r0, r4
 8006108:	f000 fbcc 	bl	80068a4 <_Bfree>
 800610c:	2300      	movs	r3, #0
 800610e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006110:	702b      	strb	r3, [r5, #0]
 8006112:	f10b 0301 	add.w	r3, fp, #1
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800611a:	2b00      	cmp	r3, #0
 800611c:	f43f ace2 	beq.w	8005ae4 <_dtoa_r+0xa4>
 8006120:	601d      	str	r5, [r3, #0]
 8006122:	e4df      	b.n	8005ae4 <_dtoa_r+0xa4>
 8006124:	465f      	mov	r7, fp
 8006126:	462b      	mov	r3, r5
 8006128:	461d      	mov	r5, r3
 800612a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800612e:	2a39      	cmp	r2, #57	; 0x39
 8006130:	d106      	bne.n	8006140 <_dtoa_r+0x700>
 8006132:	9a00      	ldr	r2, [sp, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d1f7      	bne.n	8006128 <_dtoa_r+0x6e8>
 8006138:	9900      	ldr	r1, [sp, #0]
 800613a:	2230      	movs	r2, #48	; 0x30
 800613c:	3701      	adds	r7, #1
 800613e:	700a      	strb	r2, [r1, #0]
 8006140:	781a      	ldrb	r2, [r3, #0]
 8006142:	3201      	adds	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e790      	b.n	800606a <_dtoa_r+0x62a>
 8006148:	4ba3      	ldr	r3, [pc, #652]	; (80063d8 <_dtoa_r+0x998>)
 800614a:	2200      	movs	r2, #0
 800614c:	f7fa fa54 	bl	80005f8 <__aeabi_dmul>
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	f7fa fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800615c:	2800      	cmp	r0, #0
 800615e:	d09e      	beq.n	800609e <_dtoa_r+0x65e>
 8006160:	e7d0      	b.n	8006104 <_dtoa_r+0x6c4>
 8006162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006164:	2a00      	cmp	r2, #0
 8006166:	f000 80ca 	beq.w	80062fe <_dtoa_r+0x8be>
 800616a:	9a07      	ldr	r2, [sp, #28]
 800616c:	2a01      	cmp	r2, #1
 800616e:	f300 80ad 	bgt.w	80062cc <_dtoa_r+0x88c>
 8006172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006174:	2a00      	cmp	r2, #0
 8006176:	f000 80a5 	beq.w	80062c4 <_dtoa_r+0x884>
 800617a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800617e:	9e08      	ldr	r6, [sp, #32]
 8006180:	9d05      	ldr	r5, [sp, #20]
 8006182:	9a05      	ldr	r2, [sp, #20]
 8006184:	441a      	add	r2, r3
 8006186:	9205      	str	r2, [sp, #20]
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	2101      	movs	r1, #1
 800618c:	441a      	add	r2, r3
 800618e:	4620      	mov	r0, r4
 8006190:	9206      	str	r2, [sp, #24]
 8006192:	f000 fc3d 	bl	8006a10 <__i2b>
 8006196:	4607      	mov	r7, r0
 8006198:	b165      	cbz	r5, 80061b4 <_dtoa_r+0x774>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	dd09      	ble.n	80061b4 <_dtoa_r+0x774>
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	9a05      	ldr	r2, [sp, #20]
 80061a4:	bfa8      	it	ge
 80061a6:	462b      	movge	r3, r5
 80061a8:	1ad2      	subs	r2, r2, r3
 80061aa:	9205      	str	r2, [sp, #20]
 80061ac:	9a06      	ldr	r2, [sp, #24]
 80061ae:	1aed      	subs	r5, r5, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	9b08      	ldr	r3, [sp, #32]
 80061b6:	b1f3      	cbz	r3, 80061f6 <_dtoa_r+0x7b6>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80a3 	beq.w	8006306 <_dtoa_r+0x8c6>
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	dd10      	ble.n	80061e6 <_dtoa_r+0x7a6>
 80061c4:	4639      	mov	r1, r7
 80061c6:	4632      	mov	r2, r6
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fce1 	bl	8006b90 <__pow5mult>
 80061ce:	4652      	mov	r2, sl
 80061d0:	4601      	mov	r1, r0
 80061d2:	4607      	mov	r7, r0
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 fc31 	bl	8006a3c <__multiply>
 80061da:	4651      	mov	r1, sl
 80061dc:	4680      	mov	r8, r0
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fb60 	bl	80068a4 <_Bfree>
 80061e4:	46c2      	mov	sl, r8
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	1b9a      	subs	r2, r3, r6
 80061ea:	d004      	beq.n	80061f6 <_dtoa_r+0x7b6>
 80061ec:	4651      	mov	r1, sl
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 fcce 	bl	8006b90 <__pow5mult>
 80061f4:	4682      	mov	sl, r0
 80061f6:	2101      	movs	r1, #1
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fc09 	bl	8006a10 <__i2b>
 80061fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	4606      	mov	r6, r0
 8006204:	f340 8081 	ble.w	800630a <_dtoa_r+0x8ca>
 8006208:	461a      	mov	r2, r3
 800620a:	4601      	mov	r1, r0
 800620c:	4620      	mov	r0, r4
 800620e:	f000 fcbf 	bl	8006b90 <__pow5mult>
 8006212:	9b07      	ldr	r3, [sp, #28]
 8006214:	2b01      	cmp	r3, #1
 8006216:	4606      	mov	r6, r0
 8006218:	dd7a      	ble.n	8006310 <_dtoa_r+0x8d0>
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	6933      	ldr	r3, [r6, #16]
 8006220:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006224:	6918      	ldr	r0, [r3, #16]
 8006226:	f000 fba5 	bl	8006974 <__hi0bits>
 800622a:	f1c0 0020 	rsb	r0, r0, #32
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	4418      	add	r0, r3
 8006232:	f010 001f 	ands.w	r0, r0, #31
 8006236:	f000 8094 	beq.w	8006362 <_dtoa_r+0x922>
 800623a:	f1c0 0320 	rsb	r3, r0, #32
 800623e:	2b04      	cmp	r3, #4
 8006240:	f340 8085 	ble.w	800634e <_dtoa_r+0x90e>
 8006244:	9b05      	ldr	r3, [sp, #20]
 8006246:	f1c0 001c 	rsb	r0, r0, #28
 800624a:	4403      	add	r3, r0
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	4403      	add	r3, r0
 8006252:	4405      	add	r5, r0
 8006254:	9306      	str	r3, [sp, #24]
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd05      	ble.n	8006268 <_dtoa_r+0x828>
 800625c:	4651      	mov	r1, sl
 800625e:	461a      	mov	r2, r3
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fcef 	bl	8006c44 <__lshift>
 8006266:	4682      	mov	sl, r0
 8006268:	9b06      	ldr	r3, [sp, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	dd05      	ble.n	800627a <_dtoa_r+0x83a>
 800626e:	4631      	mov	r1, r6
 8006270:	461a      	mov	r2, r3
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fce6 	bl	8006c44 <__lshift>
 8006278:	4606      	mov	r6, r0
 800627a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800627c:	2b00      	cmp	r3, #0
 800627e:	d072      	beq.n	8006366 <_dtoa_r+0x926>
 8006280:	4631      	mov	r1, r6
 8006282:	4650      	mov	r0, sl
 8006284:	f000 fd4a 	bl	8006d1c <__mcmp>
 8006288:	2800      	cmp	r0, #0
 800628a:	da6c      	bge.n	8006366 <_dtoa_r+0x926>
 800628c:	2300      	movs	r3, #0
 800628e:	4651      	mov	r1, sl
 8006290:	220a      	movs	r2, #10
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fb28 	bl	80068e8 <__multadd>
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800629e:	4682      	mov	sl, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 81b0 	beq.w	8006606 <_dtoa_r+0xbc6>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4639      	mov	r1, r7
 80062aa:	220a      	movs	r2, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 fb1b 	bl	80068e8 <__multadd>
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	4607      	mov	r7, r0
 80062b8:	f300 8096 	bgt.w	80063e8 <_dtoa_r+0x9a8>
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	dc59      	bgt.n	8006376 <_dtoa_r+0x936>
 80062c2:	e091      	b.n	80063e8 <_dtoa_r+0x9a8>
 80062c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062ca:	e758      	b.n	800617e <_dtoa_r+0x73e>
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	1e5e      	subs	r6, r3, #1
 80062d0:	9b08      	ldr	r3, [sp, #32]
 80062d2:	42b3      	cmp	r3, r6
 80062d4:	bfbf      	itttt	lt
 80062d6:	9b08      	ldrlt	r3, [sp, #32]
 80062d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80062da:	9608      	strlt	r6, [sp, #32]
 80062dc:	1af3      	sublt	r3, r6, r3
 80062de:	bfb4      	ite	lt
 80062e0:	18d2      	addlt	r2, r2, r3
 80062e2:	1b9e      	subge	r6, r3, r6
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	bfbc      	itt	lt
 80062e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80062ea:	2600      	movlt	r6, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bfb7      	itett	lt
 80062f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80062f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80062f8:	1a9d      	sublt	r5, r3, r2
 80062fa:	2300      	movlt	r3, #0
 80062fc:	e741      	b.n	8006182 <_dtoa_r+0x742>
 80062fe:	9e08      	ldr	r6, [sp, #32]
 8006300:	9d05      	ldr	r5, [sp, #20]
 8006302:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006304:	e748      	b.n	8006198 <_dtoa_r+0x758>
 8006306:	9a08      	ldr	r2, [sp, #32]
 8006308:	e770      	b.n	80061ec <_dtoa_r+0x7ac>
 800630a:	9b07      	ldr	r3, [sp, #28]
 800630c:	2b01      	cmp	r3, #1
 800630e:	dc19      	bgt.n	8006344 <_dtoa_r+0x904>
 8006310:	9b02      	ldr	r3, [sp, #8]
 8006312:	b9bb      	cbnz	r3, 8006344 <_dtoa_r+0x904>
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800631a:	b99b      	cbnz	r3, 8006344 <_dtoa_r+0x904>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006322:	0d1b      	lsrs	r3, r3, #20
 8006324:	051b      	lsls	r3, r3, #20
 8006326:	b183      	cbz	r3, 800634a <_dtoa_r+0x90a>
 8006328:	9b05      	ldr	r3, [sp, #20]
 800632a:	3301      	adds	r3, #1
 800632c:	9305      	str	r3, [sp, #20]
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	3301      	adds	r3, #1
 8006332:	9306      	str	r3, [sp, #24]
 8006334:	f04f 0801 	mov.w	r8, #1
 8006338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800633a:	2b00      	cmp	r3, #0
 800633c:	f47f af6f 	bne.w	800621e <_dtoa_r+0x7de>
 8006340:	2001      	movs	r0, #1
 8006342:	e774      	b.n	800622e <_dtoa_r+0x7ee>
 8006344:	f04f 0800 	mov.w	r8, #0
 8006348:	e7f6      	b.n	8006338 <_dtoa_r+0x8f8>
 800634a:	4698      	mov	r8, r3
 800634c:	e7f4      	b.n	8006338 <_dtoa_r+0x8f8>
 800634e:	d082      	beq.n	8006256 <_dtoa_r+0x816>
 8006350:	9a05      	ldr	r2, [sp, #20]
 8006352:	331c      	adds	r3, #28
 8006354:	441a      	add	r2, r3
 8006356:	9205      	str	r2, [sp, #20]
 8006358:	9a06      	ldr	r2, [sp, #24]
 800635a:	441a      	add	r2, r3
 800635c:	441d      	add	r5, r3
 800635e:	9206      	str	r2, [sp, #24]
 8006360:	e779      	b.n	8006256 <_dtoa_r+0x816>
 8006362:	4603      	mov	r3, r0
 8006364:	e7f4      	b.n	8006350 <_dtoa_r+0x910>
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dc37      	bgt.n	80063dc <_dtoa_r+0x99c>
 800636c:	9b07      	ldr	r3, [sp, #28]
 800636e:	2b02      	cmp	r3, #2
 8006370:	dd34      	ble.n	80063dc <_dtoa_r+0x99c>
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	b963      	cbnz	r3, 8006394 <_dtoa_r+0x954>
 800637a:	4631      	mov	r1, r6
 800637c:	2205      	movs	r2, #5
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fab2 	bl	80068e8 <__multadd>
 8006384:	4601      	mov	r1, r0
 8006386:	4606      	mov	r6, r0
 8006388:	4650      	mov	r0, sl
 800638a:	f000 fcc7 	bl	8006d1c <__mcmp>
 800638e:	2800      	cmp	r0, #0
 8006390:	f73f adbb 	bgt.w	8005f0a <_dtoa_r+0x4ca>
 8006394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006396:	9d00      	ldr	r5, [sp, #0]
 8006398:	ea6f 0b03 	mvn.w	fp, r3
 800639c:	f04f 0800 	mov.w	r8, #0
 80063a0:	4631      	mov	r1, r6
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 fa7e 	bl	80068a4 <_Bfree>
 80063a8:	2f00      	cmp	r7, #0
 80063aa:	f43f aeab 	beq.w	8006104 <_dtoa_r+0x6c4>
 80063ae:	f1b8 0f00 	cmp.w	r8, #0
 80063b2:	d005      	beq.n	80063c0 <_dtoa_r+0x980>
 80063b4:	45b8      	cmp	r8, r7
 80063b6:	d003      	beq.n	80063c0 <_dtoa_r+0x980>
 80063b8:	4641      	mov	r1, r8
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fa72 	bl	80068a4 <_Bfree>
 80063c0:	4639      	mov	r1, r7
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fa6e 	bl	80068a4 <_Bfree>
 80063c8:	e69c      	b.n	8006104 <_dtoa_r+0x6c4>
 80063ca:	2600      	movs	r6, #0
 80063cc:	4637      	mov	r7, r6
 80063ce:	e7e1      	b.n	8006394 <_dtoa_r+0x954>
 80063d0:	46bb      	mov	fp, r7
 80063d2:	4637      	mov	r7, r6
 80063d4:	e599      	b.n	8005f0a <_dtoa_r+0x4ca>
 80063d6:	bf00      	nop
 80063d8:	40240000 	.word	0x40240000
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80c8 	beq.w	8006574 <_dtoa_r+0xb34>
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	dd05      	ble.n	80063f8 <_dtoa_r+0x9b8>
 80063ec:	4639      	mov	r1, r7
 80063ee:	462a      	mov	r2, r5
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fc27 	bl	8006c44 <__lshift>
 80063f6:	4607      	mov	r7, r0
 80063f8:	f1b8 0f00 	cmp.w	r8, #0
 80063fc:	d05b      	beq.n	80064b6 <_dtoa_r+0xa76>
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fa0f 	bl	8006824 <_Balloc>
 8006406:	4605      	mov	r5, r0
 8006408:	b928      	cbnz	r0, 8006416 <_dtoa_r+0x9d6>
 800640a:	4b83      	ldr	r3, [pc, #524]	; (8006618 <_dtoa_r+0xbd8>)
 800640c:	4602      	mov	r2, r0
 800640e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006412:	f7ff bb2e 	b.w	8005a72 <_dtoa_r+0x32>
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	3202      	adds	r2, #2
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	f107 010c 	add.w	r1, r7, #12
 8006420:	300c      	adds	r0, #12
 8006422:	f000 fe39 	bl	8007098 <memcpy>
 8006426:	2201      	movs	r2, #1
 8006428:	4629      	mov	r1, r5
 800642a:	4620      	mov	r0, r4
 800642c:	f000 fc0a 	bl	8006c44 <__lshift>
 8006430:	9b00      	ldr	r3, [sp, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800643a:	4413      	add	r3, r2
 800643c:	9308      	str	r3, [sp, #32]
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	46b8      	mov	r8, r7
 8006446:	9306      	str	r3, [sp, #24]
 8006448:	4607      	mov	r7, r0
 800644a:	9b04      	ldr	r3, [sp, #16]
 800644c:	4631      	mov	r1, r6
 800644e:	3b01      	subs	r3, #1
 8006450:	4650      	mov	r0, sl
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	f7ff fa6b 	bl	800592e <quorem>
 8006458:	4641      	mov	r1, r8
 800645a:	9002      	str	r0, [sp, #8]
 800645c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006460:	4650      	mov	r0, sl
 8006462:	f000 fc5b 	bl	8006d1c <__mcmp>
 8006466:	463a      	mov	r2, r7
 8006468:	9005      	str	r0, [sp, #20]
 800646a:	4631      	mov	r1, r6
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fc71 	bl	8006d54 <__mdiff>
 8006472:	68c2      	ldr	r2, [r0, #12]
 8006474:	4605      	mov	r5, r0
 8006476:	bb02      	cbnz	r2, 80064ba <_dtoa_r+0xa7a>
 8006478:	4601      	mov	r1, r0
 800647a:	4650      	mov	r0, sl
 800647c:	f000 fc4e 	bl	8006d1c <__mcmp>
 8006480:	4602      	mov	r2, r0
 8006482:	4629      	mov	r1, r5
 8006484:	4620      	mov	r0, r4
 8006486:	9209      	str	r2, [sp, #36]	; 0x24
 8006488:	f000 fa0c 	bl	80068a4 <_Bfree>
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006490:	9d04      	ldr	r5, [sp, #16]
 8006492:	ea43 0102 	orr.w	r1, r3, r2
 8006496:	9b06      	ldr	r3, [sp, #24]
 8006498:	4319      	orrs	r1, r3
 800649a:	d110      	bne.n	80064be <_dtoa_r+0xa7e>
 800649c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064a0:	d029      	beq.n	80064f6 <_dtoa_r+0xab6>
 80064a2:	9b05      	ldr	r3, [sp, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dd02      	ble.n	80064ae <_dtoa_r+0xa6e>
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	f883 9000 	strb.w	r9, [r3]
 80064b4:	e774      	b.n	80063a0 <_dtoa_r+0x960>
 80064b6:	4638      	mov	r0, r7
 80064b8:	e7ba      	b.n	8006430 <_dtoa_r+0x9f0>
 80064ba:	2201      	movs	r2, #1
 80064bc:	e7e1      	b.n	8006482 <_dtoa_r+0xa42>
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	db04      	blt.n	80064ce <_dtoa_r+0xa8e>
 80064c4:	9907      	ldr	r1, [sp, #28]
 80064c6:	430b      	orrs	r3, r1
 80064c8:	9906      	ldr	r1, [sp, #24]
 80064ca:	430b      	orrs	r3, r1
 80064cc:	d120      	bne.n	8006510 <_dtoa_r+0xad0>
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	dded      	ble.n	80064ae <_dtoa_r+0xa6e>
 80064d2:	4651      	mov	r1, sl
 80064d4:	2201      	movs	r2, #1
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fbb4 	bl	8006c44 <__lshift>
 80064dc:	4631      	mov	r1, r6
 80064de:	4682      	mov	sl, r0
 80064e0:	f000 fc1c 	bl	8006d1c <__mcmp>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	dc03      	bgt.n	80064f0 <_dtoa_r+0xab0>
 80064e8:	d1e1      	bne.n	80064ae <_dtoa_r+0xa6e>
 80064ea:	f019 0f01 	tst.w	r9, #1
 80064ee:	d0de      	beq.n	80064ae <_dtoa_r+0xa6e>
 80064f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064f4:	d1d8      	bne.n	80064a8 <_dtoa_r+0xa68>
 80064f6:	9a01      	ldr	r2, [sp, #4]
 80064f8:	2339      	movs	r3, #57	; 0x39
 80064fa:	7013      	strb	r3, [r2, #0]
 80064fc:	462b      	mov	r3, r5
 80064fe:	461d      	mov	r5, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006506:	2a39      	cmp	r2, #57	; 0x39
 8006508:	d06c      	beq.n	80065e4 <_dtoa_r+0xba4>
 800650a:	3201      	adds	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e747      	b.n	80063a0 <_dtoa_r+0x960>
 8006510:	2a00      	cmp	r2, #0
 8006512:	dd07      	ble.n	8006524 <_dtoa_r+0xae4>
 8006514:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006518:	d0ed      	beq.n	80064f6 <_dtoa_r+0xab6>
 800651a:	9a01      	ldr	r2, [sp, #4]
 800651c:	f109 0301 	add.w	r3, r9, #1
 8006520:	7013      	strb	r3, [r2, #0]
 8006522:	e73d      	b.n	80063a0 <_dtoa_r+0x960>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	9a08      	ldr	r2, [sp, #32]
 8006528:	f803 9c01 	strb.w	r9, [r3, #-1]
 800652c:	4293      	cmp	r3, r2
 800652e:	d043      	beq.n	80065b8 <_dtoa_r+0xb78>
 8006530:	4651      	mov	r1, sl
 8006532:	2300      	movs	r3, #0
 8006534:	220a      	movs	r2, #10
 8006536:	4620      	mov	r0, r4
 8006538:	f000 f9d6 	bl	80068e8 <__multadd>
 800653c:	45b8      	cmp	r8, r7
 800653e:	4682      	mov	sl, r0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f04f 020a 	mov.w	r2, #10
 8006548:	4641      	mov	r1, r8
 800654a:	4620      	mov	r0, r4
 800654c:	d107      	bne.n	800655e <_dtoa_r+0xb1e>
 800654e:	f000 f9cb 	bl	80068e8 <__multadd>
 8006552:	4680      	mov	r8, r0
 8006554:	4607      	mov	r7, r0
 8006556:	9b04      	ldr	r3, [sp, #16]
 8006558:	3301      	adds	r3, #1
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	e775      	b.n	800644a <_dtoa_r+0xa0a>
 800655e:	f000 f9c3 	bl	80068e8 <__multadd>
 8006562:	4639      	mov	r1, r7
 8006564:	4680      	mov	r8, r0
 8006566:	2300      	movs	r3, #0
 8006568:	220a      	movs	r2, #10
 800656a:	4620      	mov	r0, r4
 800656c:	f000 f9bc 	bl	80068e8 <__multadd>
 8006570:	4607      	mov	r7, r0
 8006572:	e7f0      	b.n	8006556 <_dtoa_r+0xb16>
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	9d00      	ldr	r5, [sp, #0]
 800657a:	4631      	mov	r1, r6
 800657c:	4650      	mov	r0, sl
 800657e:	f7ff f9d6 	bl	800592e <quorem>
 8006582:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	f805 9b01 	strb.w	r9, [r5], #1
 800658c:	1aea      	subs	r2, r5, r3
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	4293      	cmp	r3, r2
 8006592:	dd07      	ble.n	80065a4 <_dtoa_r+0xb64>
 8006594:	4651      	mov	r1, sl
 8006596:	2300      	movs	r3, #0
 8006598:	220a      	movs	r2, #10
 800659a:	4620      	mov	r0, r4
 800659c:	f000 f9a4 	bl	80068e8 <__multadd>
 80065a0:	4682      	mov	sl, r0
 80065a2:	e7ea      	b.n	800657a <_dtoa_r+0xb3a>
 80065a4:	9b01      	ldr	r3, [sp, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfc8      	it	gt
 80065aa:	461d      	movgt	r5, r3
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	bfd8      	it	le
 80065b0:	2501      	movle	r5, #1
 80065b2:	441d      	add	r5, r3
 80065b4:	f04f 0800 	mov.w	r8, #0
 80065b8:	4651      	mov	r1, sl
 80065ba:	2201      	movs	r2, #1
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 fb41 	bl	8006c44 <__lshift>
 80065c2:	4631      	mov	r1, r6
 80065c4:	4682      	mov	sl, r0
 80065c6:	f000 fba9 	bl	8006d1c <__mcmp>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	dc96      	bgt.n	80064fc <_dtoa_r+0xabc>
 80065ce:	d102      	bne.n	80065d6 <_dtoa_r+0xb96>
 80065d0:	f019 0f01 	tst.w	r9, #1
 80065d4:	d192      	bne.n	80064fc <_dtoa_r+0xabc>
 80065d6:	462b      	mov	r3, r5
 80065d8:	461d      	mov	r5, r3
 80065da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065de:	2a30      	cmp	r2, #48	; 0x30
 80065e0:	d0fa      	beq.n	80065d8 <_dtoa_r+0xb98>
 80065e2:	e6dd      	b.n	80063a0 <_dtoa_r+0x960>
 80065e4:	9a00      	ldr	r2, [sp, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d189      	bne.n	80064fe <_dtoa_r+0xabe>
 80065ea:	f10b 0b01 	add.w	fp, fp, #1
 80065ee:	2331      	movs	r3, #49	; 0x31
 80065f0:	e796      	b.n	8006520 <_dtoa_r+0xae0>
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <_dtoa_r+0xbdc>)
 80065f4:	f7ff ba99 	b.w	8005b2a <_dtoa_r+0xea>
 80065f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f aa6d 	bne.w	8005ada <_dtoa_r+0x9a>
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <_dtoa_r+0xbe0>)
 8006602:	f7ff ba92 	b.w	8005b2a <_dtoa_r+0xea>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dcb5      	bgt.n	8006578 <_dtoa_r+0xb38>
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	2b02      	cmp	r3, #2
 8006610:	f73f aeb1 	bgt.w	8006376 <_dtoa_r+0x936>
 8006614:	e7b0      	b.n	8006578 <_dtoa_r+0xb38>
 8006616:	bf00      	nop
 8006618:	080077bc 	.word	0x080077bc
 800661c:	0800771c 	.word	0x0800771c
 8006620:	08007740 	.word	0x08007740

08006624 <_free_r>:
 8006624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006626:	2900      	cmp	r1, #0
 8006628:	d044      	beq.n	80066b4 <_free_r+0x90>
 800662a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800662e:	9001      	str	r0, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f1a1 0404 	sub.w	r4, r1, #4
 8006636:	bfb8      	it	lt
 8006638:	18e4      	addlt	r4, r4, r3
 800663a:	f000 f8e7 	bl	800680c <__malloc_lock>
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <_free_r+0x94>)
 8006640:	9801      	ldr	r0, [sp, #4]
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	b933      	cbnz	r3, 8006654 <_free_r+0x30>
 8006646:	6063      	str	r3, [r4, #4]
 8006648:	6014      	str	r4, [r2, #0]
 800664a:	b003      	add	sp, #12
 800664c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006650:	f000 b8e2 	b.w	8006818 <__malloc_unlock>
 8006654:	42a3      	cmp	r3, r4
 8006656:	d908      	bls.n	800666a <_free_r+0x46>
 8006658:	6825      	ldr	r5, [r4, #0]
 800665a:	1961      	adds	r1, r4, r5
 800665c:	428b      	cmp	r3, r1
 800665e:	bf01      	itttt	eq
 8006660:	6819      	ldreq	r1, [r3, #0]
 8006662:	685b      	ldreq	r3, [r3, #4]
 8006664:	1949      	addeq	r1, r1, r5
 8006666:	6021      	streq	r1, [r4, #0]
 8006668:	e7ed      	b.n	8006646 <_free_r+0x22>
 800666a:	461a      	mov	r2, r3
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	b10b      	cbz	r3, 8006674 <_free_r+0x50>
 8006670:	42a3      	cmp	r3, r4
 8006672:	d9fa      	bls.n	800666a <_free_r+0x46>
 8006674:	6811      	ldr	r1, [r2, #0]
 8006676:	1855      	adds	r5, r2, r1
 8006678:	42a5      	cmp	r5, r4
 800667a:	d10b      	bne.n	8006694 <_free_r+0x70>
 800667c:	6824      	ldr	r4, [r4, #0]
 800667e:	4421      	add	r1, r4
 8006680:	1854      	adds	r4, r2, r1
 8006682:	42a3      	cmp	r3, r4
 8006684:	6011      	str	r1, [r2, #0]
 8006686:	d1e0      	bne.n	800664a <_free_r+0x26>
 8006688:	681c      	ldr	r4, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	6053      	str	r3, [r2, #4]
 800668e:	440c      	add	r4, r1
 8006690:	6014      	str	r4, [r2, #0]
 8006692:	e7da      	b.n	800664a <_free_r+0x26>
 8006694:	d902      	bls.n	800669c <_free_r+0x78>
 8006696:	230c      	movs	r3, #12
 8006698:	6003      	str	r3, [r0, #0]
 800669a:	e7d6      	b.n	800664a <_free_r+0x26>
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	1961      	adds	r1, r4, r5
 80066a0:	428b      	cmp	r3, r1
 80066a2:	bf04      	itt	eq
 80066a4:	6819      	ldreq	r1, [r3, #0]
 80066a6:	685b      	ldreq	r3, [r3, #4]
 80066a8:	6063      	str	r3, [r4, #4]
 80066aa:	bf04      	itt	eq
 80066ac:	1949      	addeq	r1, r1, r5
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	6054      	str	r4, [r2, #4]
 80066b2:	e7ca      	b.n	800664a <_free_r+0x26>
 80066b4:	b003      	add	sp, #12
 80066b6:	bd30      	pop	{r4, r5, pc}
 80066b8:	200003d0 	.word	0x200003d0

080066bc <malloc>:
 80066bc:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <malloc+0xc>)
 80066be:	4601      	mov	r1, r0
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f000 b823 	b.w	800670c <_malloc_r>
 80066c6:	bf00      	nop
 80066c8:	20000064 	.word	0x20000064

080066cc <sbrk_aligned>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4e0e      	ldr	r6, [pc, #56]	; (8006708 <sbrk_aligned+0x3c>)
 80066d0:	460c      	mov	r4, r1
 80066d2:	6831      	ldr	r1, [r6, #0]
 80066d4:	4605      	mov	r5, r0
 80066d6:	b911      	cbnz	r1, 80066de <sbrk_aligned+0x12>
 80066d8:	f000 fcce 	bl	8007078 <_sbrk_r>
 80066dc:	6030      	str	r0, [r6, #0]
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 fcc9 	bl	8007078 <_sbrk_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d00a      	beq.n	8006700 <sbrk_aligned+0x34>
 80066ea:	1cc4      	adds	r4, r0, #3
 80066ec:	f024 0403 	bic.w	r4, r4, #3
 80066f0:	42a0      	cmp	r0, r4
 80066f2:	d007      	beq.n	8006704 <sbrk_aligned+0x38>
 80066f4:	1a21      	subs	r1, r4, r0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fcbe 	bl	8007078 <_sbrk_r>
 80066fc:	3001      	adds	r0, #1
 80066fe:	d101      	bne.n	8006704 <sbrk_aligned+0x38>
 8006700:	f04f 34ff 	mov.w	r4, #4294967295
 8006704:	4620      	mov	r0, r4
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	200003d4 	.word	0x200003d4

0800670c <_malloc_r>:
 800670c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006710:	1ccd      	adds	r5, r1, #3
 8006712:	f025 0503 	bic.w	r5, r5, #3
 8006716:	3508      	adds	r5, #8
 8006718:	2d0c      	cmp	r5, #12
 800671a:	bf38      	it	cc
 800671c:	250c      	movcc	r5, #12
 800671e:	2d00      	cmp	r5, #0
 8006720:	4607      	mov	r7, r0
 8006722:	db01      	blt.n	8006728 <_malloc_r+0x1c>
 8006724:	42a9      	cmp	r1, r5
 8006726:	d905      	bls.n	8006734 <_malloc_r+0x28>
 8006728:	230c      	movs	r3, #12
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	2600      	movs	r6, #0
 800672e:	4630      	mov	r0, r6
 8006730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006808 <_malloc_r+0xfc>
 8006738:	f000 f868 	bl	800680c <__malloc_lock>
 800673c:	f8d8 3000 	ldr.w	r3, [r8]
 8006740:	461c      	mov	r4, r3
 8006742:	bb5c      	cbnz	r4, 800679c <_malloc_r+0x90>
 8006744:	4629      	mov	r1, r5
 8006746:	4638      	mov	r0, r7
 8006748:	f7ff ffc0 	bl	80066cc <sbrk_aligned>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	4604      	mov	r4, r0
 8006750:	d155      	bne.n	80067fe <_malloc_r+0xf2>
 8006752:	f8d8 4000 	ldr.w	r4, [r8]
 8006756:	4626      	mov	r6, r4
 8006758:	2e00      	cmp	r6, #0
 800675a:	d145      	bne.n	80067e8 <_malloc_r+0xdc>
 800675c:	2c00      	cmp	r4, #0
 800675e:	d048      	beq.n	80067f2 <_malloc_r+0xe6>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	4631      	mov	r1, r6
 8006764:	4638      	mov	r0, r7
 8006766:	eb04 0903 	add.w	r9, r4, r3
 800676a:	f000 fc85 	bl	8007078 <_sbrk_r>
 800676e:	4581      	cmp	r9, r0
 8006770:	d13f      	bne.n	80067f2 <_malloc_r+0xe6>
 8006772:	6821      	ldr	r1, [r4, #0]
 8006774:	1a6d      	subs	r5, r5, r1
 8006776:	4629      	mov	r1, r5
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff ffa7 	bl	80066cc <sbrk_aligned>
 800677e:	3001      	adds	r0, #1
 8006780:	d037      	beq.n	80067f2 <_malloc_r+0xe6>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	442b      	add	r3, r5
 8006786:	6023      	str	r3, [r4, #0]
 8006788:	f8d8 3000 	ldr.w	r3, [r8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d038      	beq.n	8006802 <_malloc_r+0xf6>
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	42a2      	cmp	r2, r4
 8006794:	d12b      	bne.n	80067ee <_malloc_r+0xe2>
 8006796:	2200      	movs	r2, #0
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	e00f      	b.n	80067bc <_malloc_r+0xb0>
 800679c:	6822      	ldr	r2, [r4, #0]
 800679e:	1b52      	subs	r2, r2, r5
 80067a0:	d41f      	bmi.n	80067e2 <_malloc_r+0xd6>
 80067a2:	2a0b      	cmp	r2, #11
 80067a4:	d917      	bls.n	80067d6 <_malloc_r+0xca>
 80067a6:	1961      	adds	r1, r4, r5
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	6025      	str	r5, [r4, #0]
 80067ac:	bf18      	it	ne
 80067ae:	6059      	strne	r1, [r3, #4]
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	bf08      	it	eq
 80067b4:	f8c8 1000 	streq.w	r1, [r8]
 80067b8:	5162      	str	r2, [r4, r5]
 80067ba:	604b      	str	r3, [r1, #4]
 80067bc:	4638      	mov	r0, r7
 80067be:	f104 060b 	add.w	r6, r4, #11
 80067c2:	f000 f829 	bl	8006818 <__malloc_unlock>
 80067c6:	f026 0607 	bic.w	r6, r6, #7
 80067ca:	1d23      	adds	r3, r4, #4
 80067cc:	1af2      	subs	r2, r6, r3
 80067ce:	d0ae      	beq.n	800672e <_malloc_r+0x22>
 80067d0:	1b9b      	subs	r3, r3, r6
 80067d2:	50a3      	str	r3, [r4, r2]
 80067d4:	e7ab      	b.n	800672e <_malloc_r+0x22>
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	6862      	ldr	r2, [r4, #4]
 80067da:	d1dd      	bne.n	8006798 <_malloc_r+0x8c>
 80067dc:	f8c8 2000 	str.w	r2, [r8]
 80067e0:	e7ec      	b.n	80067bc <_malloc_r+0xb0>
 80067e2:	4623      	mov	r3, r4
 80067e4:	6864      	ldr	r4, [r4, #4]
 80067e6:	e7ac      	b.n	8006742 <_malloc_r+0x36>
 80067e8:	4634      	mov	r4, r6
 80067ea:	6876      	ldr	r6, [r6, #4]
 80067ec:	e7b4      	b.n	8006758 <_malloc_r+0x4c>
 80067ee:	4613      	mov	r3, r2
 80067f0:	e7cc      	b.n	800678c <_malloc_r+0x80>
 80067f2:	230c      	movs	r3, #12
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4638      	mov	r0, r7
 80067f8:	f000 f80e 	bl	8006818 <__malloc_unlock>
 80067fc:	e797      	b.n	800672e <_malloc_r+0x22>
 80067fe:	6025      	str	r5, [r4, #0]
 8006800:	e7dc      	b.n	80067bc <_malloc_r+0xb0>
 8006802:	605b      	str	r3, [r3, #4]
 8006804:	deff      	udf	#255	; 0xff
 8006806:	bf00      	nop
 8006808:	200003d0 	.word	0x200003d0

0800680c <__malloc_lock>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__malloc_lock+0x8>)
 800680e:	f7ff b88c 	b.w	800592a <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	200003cc 	.word	0x200003cc

08006818 <__malloc_unlock>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__malloc_unlock+0x8>)
 800681a:	f7ff b887 	b.w	800592c <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	200003cc 	.word	0x200003cc

08006824 <_Balloc>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	69c6      	ldr	r6, [r0, #28]
 8006828:	4604      	mov	r4, r0
 800682a:	460d      	mov	r5, r1
 800682c:	b976      	cbnz	r6, 800684c <_Balloc+0x28>
 800682e:	2010      	movs	r0, #16
 8006830:	f7ff ff44 	bl	80066bc <malloc>
 8006834:	4602      	mov	r2, r0
 8006836:	61e0      	str	r0, [r4, #28]
 8006838:	b920      	cbnz	r0, 8006844 <_Balloc+0x20>
 800683a:	4b18      	ldr	r3, [pc, #96]	; (800689c <_Balloc+0x78>)
 800683c:	4818      	ldr	r0, [pc, #96]	; (80068a0 <_Balloc+0x7c>)
 800683e:	216b      	movs	r1, #107	; 0x6b
 8006840:	f000 fc38 	bl	80070b4 <__assert_func>
 8006844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006848:	6006      	str	r6, [r0, #0]
 800684a:	60c6      	str	r6, [r0, #12]
 800684c:	69e6      	ldr	r6, [r4, #28]
 800684e:	68f3      	ldr	r3, [r6, #12]
 8006850:	b183      	cbz	r3, 8006874 <_Balloc+0x50>
 8006852:	69e3      	ldr	r3, [r4, #28]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800685a:	b9b8      	cbnz	r0, 800688c <_Balloc+0x68>
 800685c:	2101      	movs	r1, #1
 800685e:	fa01 f605 	lsl.w	r6, r1, r5
 8006862:	1d72      	adds	r2, r6, #5
 8006864:	0092      	lsls	r2, r2, #2
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fc42 	bl	80070f0 <_calloc_r>
 800686c:	b160      	cbz	r0, 8006888 <_Balloc+0x64>
 800686e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006872:	e00e      	b.n	8006892 <_Balloc+0x6e>
 8006874:	2221      	movs	r2, #33	; 0x21
 8006876:	2104      	movs	r1, #4
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fc39 	bl	80070f0 <_calloc_r>
 800687e:	69e3      	ldr	r3, [r4, #28]
 8006880:	60f0      	str	r0, [r6, #12]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e4      	bne.n	8006852 <_Balloc+0x2e>
 8006888:	2000      	movs	r0, #0
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	6802      	ldr	r2, [r0, #0]
 800688e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006892:	2300      	movs	r3, #0
 8006894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006898:	e7f7      	b.n	800688a <_Balloc+0x66>
 800689a:	bf00      	nop
 800689c:	0800774d 	.word	0x0800774d
 80068a0:	080077cd 	.word	0x080077cd

080068a4 <_Bfree>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	69c6      	ldr	r6, [r0, #28]
 80068a8:	4605      	mov	r5, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b976      	cbnz	r6, 80068cc <_Bfree+0x28>
 80068ae:	2010      	movs	r0, #16
 80068b0:	f7ff ff04 	bl	80066bc <malloc>
 80068b4:	4602      	mov	r2, r0
 80068b6:	61e8      	str	r0, [r5, #28]
 80068b8:	b920      	cbnz	r0, 80068c4 <_Bfree+0x20>
 80068ba:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <_Bfree+0x3c>)
 80068bc:	4809      	ldr	r0, [pc, #36]	; (80068e4 <_Bfree+0x40>)
 80068be:	218f      	movs	r1, #143	; 0x8f
 80068c0:	f000 fbf8 	bl	80070b4 <__assert_func>
 80068c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068c8:	6006      	str	r6, [r0, #0]
 80068ca:	60c6      	str	r6, [r0, #12]
 80068cc:	b13c      	cbz	r4, 80068de <_Bfree+0x3a>
 80068ce:	69eb      	ldr	r3, [r5, #28]
 80068d0:	6862      	ldr	r2, [r4, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068d8:	6021      	str	r1, [r4, #0]
 80068da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	0800774d 	.word	0x0800774d
 80068e4:	080077cd 	.word	0x080077cd

080068e8 <__multadd>:
 80068e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ec:	690d      	ldr	r5, [r1, #16]
 80068ee:	4607      	mov	r7, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	461e      	mov	r6, r3
 80068f4:	f101 0c14 	add.w	ip, r1, #20
 80068f8:	2000      	movs	r0, #0
 80068fa:	f8dc 3000 	ldr.w	r3, [ip]
 80068fe:	b299      	uxth	r1, r3
 8006900:	fb02 6101 	mla	r1, r2, r1, r6
 8006904:	0c1e      	lsrs	r6, r3, #16
 8006906:	0c0b      	lsrs	r3, r1, #16
 8006908:	fb02 3306 	mla	r3, r2, r6, r3
 800690c:	b289      	uxth	r1, r1
 800690e:	3001      	adds	r0, #1
 8006910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006914:	4285      	cmp	r5, r0
 8006916:	f84c 1b04 	str.w	r1, [ip], #4
 800691a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800691e:	dcec      	bgt.n	80068fa <__multadd+0x12>
 8006920:	b30e      	cbz	r6, 8006966 <__multadd+0x7e>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	42ab      	cmp	r3, r5
 8006926:	dc19      	bgt.n	800695c <__multadd+0x74>
 8006928:	6861      	ldr	r1, [r4, #4]
 800692a:	4638      	mov	r0, r7
 800692c:	3101      	adds	r1, #1
 800692e:	f7ff ff79 	bl	8006824 <_Balloc>
 8006932:	4680      	mov	r8, r0
 8006934:	b928      	cbnz	r0, 8006942 <__multadd+0x5a>
 8006936:	4602      	mov	r2, r0
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <__multadd+0x84>)
 800693a:	480d      	ldr	r0, [pc, #52]	; (8006970 <__multadd+0x88>)
 800693c:	21ba      	movs	r1, #186	; 0xba
 800693e:	f000 fbb9 	bl	80070b4 <__assert_func>
 8006942:	6922      	ldr	r2, [r4, #16]
 8006944:	3202      	adds	r2, #2
 8006946:	f104 010c 	add.w	r1, r4, #12
 800694a:	0092      	lsls	r2, r2, #2
 800694c:	300c      	adds	r0, #12
 800694e:	f000 fba3 	bl	8007098 <memcpy>
 8006952:	4621      	mov	r1, r4
 8006954:	4638      	mov	r0, r7
 8006956:	f7ff ffa5 	bl	80068a4 <_Bfree>
 800695a:	4644      	mov	r4, r8
 800695c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006960:	3501      	adds	r5, #1
 8006962:	615e      	str	r6, [r3, #20]
 8006964:	6125      	str	r5, [r4, #16]
 8006966:	4620      	mov	r0, r4
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	080077bc 	.word	0x080077bc
 8006970:	080077cd 	.word	0x080077cd

08006974 <__hi0bits>:
 8006974:	0c03      	lsrs	r3, r0, #16
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	b9d3      	cbnz	r3, 80069b0 <__hi0bits+0x3c>
 800697a:	0400      	lsls	r0, r0, #16
 800697c:	2310      	movs	r3, #16
 800697e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006982:	bf04      	itt	eq
 8006984:	0200      	lsleq	r0, r0, #8
 8006986:	3308      	addeq	r3, #8
 8006988:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800698c:	bf04      	itt	eq
 800698e:	0100      	lsleq	r0, r0, #4
 8006990:	3304      	addeq	r3, #4
 8006992:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006996:	bf04      	itt	eq
 8006998:	0080      	lsleq	r0, r0, #2
 800699a:	3302      	addeq	r3, #2
 800699c:	2800      	cmp	r0, #0
 800699e:	db05      	blt.n	80069ac <__hi0bits+0x38>
 80069a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069a4:	f103 0301 	add.w	r3, r3, #1
 80069a8:	bf08      	it	eq
 80069aa:	2320      	moveq	r3, #32
 80069ac:	4618      	mov	r0, r3
 80069ae:	4770      	bx	lr
 80069b0:	2300      	movs	r3, #0
 80069b2:	e7e4      	b.n	800697e <__hi0bits+0xa>

080069b4 <__lo0bits>:
 80069b4:	6803      	ldr	r3, [r0, #0]
 80069b6:	f013 0207 	ands.w	r2, r3, #7
 80069ba:	d00c      	beq.n	80069d6 <__lo0bits+0x22>
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	d422      	bmi.n	8006a06 <__lo0bits+0x52>
 80069c0:	079a      	lsls	r2, r3, #30
 80069c2:	bf49      	itett	mi
 80069c4:	085b      	lsrmi	r3, r3, #1
 80069c6:	089b      	lsrpl	r3, r3, #2
 80069c8:	6003      	strmi	r3, [r0, #0]
 80069ca:	2201      	movmi	r2, #1
 80069cc:	bf5c      	itt	pl
 80069ce:	6003      	strpl	r3, [r0, #0]
 80069d0:	2202      	movpl	r2, #2
 80069d2:	4610      	mov	r0, r2
 80069d4:	4770      	bx	lr
 80069d6:	b299      	uxth	r1, r3
 80069d8:	b909      	cbnz	r1, 80069de <__lo0bits+0x2a>
 80069da:	0c1b      	lsrs	r3, r3, #16
 80069dc:	2210      	movs	r2, #16
 80069de:	b2d9      	uxtb	r1, r3
 80069e0:	b909      	cbnz	r1, 80069e6 <__lo0bits+0x32>
 80069e2:	3208      	adds	r2, #8
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	0719      	lsls	r1, r3, #28
 80069e8:	bf04      	itt	eq
 80069ea:	091b      	lsreq	r3, r3, #4
 80069ec:	3204      	addeq	r2, #4
 80069ee:	0799      	lsls	r1, r3, #30
 80069f0:	bf04      	itt	eq
 80069f2:	089b      	lsreq	r3, r3, #2
 80069f4:	3202      	addeq	r2, #2
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d403      	bmi.n	8006a02 <__lo0bits+0x4e>
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f102 0201 	add.w	r2, r2, #1
 8006a00:	d003      	beq.n	8006a0a <__lo0bits+0x56>
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	e7e5      	b.n	80069d2 <__lo0bits+0x1e>
 8006a06:	2200      	movs	r2, #0
 8006a08:	e7e3      	b.n	80069d2 <__lo0bits+0x1e>
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	e7e1      	b.n	80069d2 <__lo0bits+0x1e>
	...

08006a10 <__i2b>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	2101      	movs	r1, #1
 8006a16:	f7ff ff05 	bl	8006824 <_Balloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	b928      	cbnz	r0, 8006a2a <__i2b+0x1a>
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <__i2b+0x24>)
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <__i2b+0x28>)
 8006a22:	f240 1145 	movw	r1, #325	; 0x145
 8006a26:	f000 fb45 	bl	80070b4 <__assert_func>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6144      	str	r4, [r0, #20]
 8006a2e:	6103      	str	r3, [r0, #16]
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	080077bc 	.word	0x080077bc
 8006a38:	080077cd 	.word	0x080077cd

08006a3c <__multiply>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4691      	mov	r9, r2
 8006a42:	690a      	ldr	r2, [r1, #16]
 8006a44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfb8      	it	lt
 8006a4c:	460b      	movlt	r3, r1
 8006a4e:	460c      	mov	r4, r1
 8006a50:	bfbc      	itt	lt
 8006a52:	464c      	movlt	r4, r9
 8006a54:	4699      	movlt	r9, r3
 8006a56:	6927      	ldr	r7, [r4, #16]
 8006a58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	6861      	ldr	r1, [r4, #4]
 8006a60:	eb07 060a 	add.w	r6, r7, sl
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	b085      	sub	sp, #20
 8006a68:	bfb8      	it	lt
 8006a6a:	3101      	addlt	r1, #1
 8006a6c:	f7ff feda 	bl	8006824 <_Balloc>
 8006a70:	b930      	cbnz	r0, 8006a80 <__multiply+0x44>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b44      	ldr	r3, [pc, #272]	; (8006b88 <__multiply+0x14c>)
 8006a76:	4845      	ldr	r0, [pc, #276]	; (8006b8c <__multiply+0x150>)
 8006a78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a7c:	f000 fb1a 	bl	80070b4 <__assert_func>
 8006a80:	f100 0514 	add.w	r5, r0, #20
 8006a84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a88:	462b      	mov	r3, r5
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	4543      	cmp	r3, r8
 8006a8e:	d321      	bcc.n	8006ad4 <__multiply+0x98>
 8006a90:	f104 0314 	add.w	r3, r4, #20
 8006a94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a98:	f109 0314 	add.w	r3, r9, #20
 8006a9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006aa0:	9202      	str	r2, [sp, #8]
 8006aa2:	1b3a      	subs	r2, r7, r4
 8006aa4:	3a15      	subs	r2, #21
 8006aa6:	f022 0203 	bic.w	r2, r2, #3
 8006aaa:	3204      	adds	r2, #4
 8006aac:	f104 0115 	add.w	r1, r4, #21
 8006ab0:	428f      	cmp	r7, r1
 8006ab2:	bf38      	it	cc
 8006ab4:	2204      	movcc	r2, #4
 8006ab6:	9201      	str	r2, [sp, #4]
 8006ab8:	9a02      	ldr	r2, [sp, #8]
 8006aba:	9303      	str	r3, [sp, #12]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d80c      	bhi.n	8006ada <__multiply+0x9e>
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	dd03      	ble.n	8006acc <__multiply+0x90>
 8006ac4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d05b      	beq.n	8006b84 <__multiply+0x148>
 8006acc:	6106      	str	r6, [r0, #16]
 8006ace:	b005      	add	sp, #20
 8006ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad4:	f843 2b04 	str.w	r2, [r3], #4
 8006ad8:	e7d8      	b.n	8006a8c <__multiply+0x50>
 8006ada:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ade:	f1ba 0f00 	cmp.w	sl, #0
 8006ae2:	d024      	beq.n	8006b2e <__multiply+0xf2>
 8006ae4:	f104 0e14 	add.w	lr, r4, #20
 8006ae8:	46a9      	mov	r9, r5
 8006aea:	f04f 0c00 	mov.w	ip, #0
 8006aee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006af2:	f8d9 1000 	ldr.w	r1, [r9]
 8006af6:	fa1f fb82 	uxth.w	fp, r2
 8006afa:	b289      	uxth	r1, r1
 8006afc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b04:	f8d9 2000 	ldr.w	r2, [r9]
 8006b08:	4461      	add	r1, ip
 8006b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b16:	b289      	uxth	r1, r1
 8006b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b1c:	4577      	cmp	r7, lr
 8006b1e:	f849 1b04 	str.w	r1, [r9], #4
 8006b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b26:	d8e2      	bhi.n	8006aee <__multiply+0xb2>
 8006b28:	9a01      	ldr	r2, [sp, #4]
 8006b2a:	f845 c002 	str.w	ip, [r5, r2]
 8006b2e:	9a03      	ldr	r2, [sp, #12]
 8006b30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b34:	3304      	adds	r3, #4
 8006b36:	f1b9 0f00 	cmp.w	r9, #0
 8006b3a:	d021      	beq.n	8006b80 <__multiply+0x144>
 8006b3c:	6829      	ldr	r1, [r5, #0]
 8006b3e:	f104 0c14 	add.w	ip, r4, #20
 8006b42:	46ae      	mov	lr, r5
 8006b44:	f04f 0a00 	mov.w	sl, #0
 8006b48:	f8bc b000 	ldrh.w	fp, [ip]
 8006b4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b50:	fb09 220b 	mla	r2, r9, fp, r2
 8006b54:	4452      	add	r2, sl
 8006b56:	b289      	uxth	r1, r1
 8006b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b5c:	f84e 1b04 	str.w	r1, [lr], #4
 8006b60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b68:	f8be 1000 	ldrh.w	r1, [lr]
 8006b6c:	fb09 110a 	mla	r1, r9, sl, r1
 8006b70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b74:	4567      	cmp	r7, ip
 8006b76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b7a:	d8e5      	bhi.n	8006b48 <__multiply+0x10c>
 8006b7c:	9a01      	ldr	r2, [sp, #4]
 8006b7e:	50a9      	str	r1, [r5, r2]
 8006b80:	3504      	adds	r5, #4
 8006b82:	e799      	b.n	8006ab8 <__multiply+0x7c>
 8006b84:	3e01      	subs	r6, #1
 8006b86:	e79b      	b.n	8006ac0 <__multiply+0x84>
 8006b88:	080077bc 	.word	0x080077bc
 8006b8c:	080077cd 	.word	0x080077cd

08006b90 <__pow5mult>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4615      	mov	r5, r2
 8006b96:	f012 0203 	ands.w	r2, r2, #3
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	d007      	beq.n	8006bb0 <__pow5mult+0x20>
 8006ba0:	4c25      	ldr	r4, [pc, #148]	; (8006c38 <__pow5mult+0xa8>)
 8006ba2:	3a01      	subs	r2, #1
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006baa:	f7ff fe9d 	bl	80068e8 <__multadd>
 8006bae:	4607      	mov	r7, r0
 8006bb0:	10ad      	asrs	r5, r5, #2
 8006bb2:	d03d      	beq.n	8006c30 <__pow5mult+0xa0>
 8006bb4:	69f4      	ldr	r4, [r6, #28]
 8006bb6:	b97c      	cbnz	r4, 8006bd8 <__pow5mult+0x48>
 8006bb8:	2010      	movs	r0, #16
 8006bba:	f7ff fd7f 	bl	80066bc <malloc>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	61f0      	str	r0, [r6, #28]
 8006bc2:	b928      	cbnz	r0, 8006bd0 <__pow5mult+0x40>
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <__pow5mult+0xac>)
 8006bc6:	481e      	ldr	r0, [pc, #120]	; (8006c40 <__pow5mult+0xb0>)
 8006bc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006bcc:	f000 fa72 	bl	80070b4 <__assert_func>
 8006bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bd4:	6004      	str	r4, [r0, #0]
 8006bd6:	60c4      	str	r4, [r0, #12]
 8006bd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006be0:	b94c      	cbnz	r4, 8006bf6 <__pow5mult+0x66>
 8006be2:	f240 2171 	movw	r1, #625	; 0x271
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff ff12 	bl	8006a10 <__i2b>
 8006bec:	2300      	movs	r3, #0
 8006bee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	6003      	str	r3, [r0, #0]
 8006bf6:	f04f 0900 	mov.w	r9, #0
 8006bfa:	07eb      	lsls	r3, r5, #31
 8006bfc:	d50a      	bpl.n	8006c14 <__pow5mult+0x84>
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4622      	mov	r2, r4
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ff1a 	bl	8006a3c <__multiply>
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f7ff fe49 	bl	80068a4 <_Bfree>
 8006c12:	4647      	mov	r7, r8
 8006c14:	106d      	asrs	r5, r5, #1
 8006c16:	d00b      	beq.n	8006c30 <__pow5mult+0xa0>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	b938      	cbnz	r0, 8006c2c <__pow5mult+0x9c>
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff ff0b 	bl	8006a3c <__multiply>
 8006c26:	6020      	str	r0, [r4, #0]
 8006c28:	f8c0 9000 	str.w	r9, [r0]
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	e7e4      	b.n	8006bfa <__pow5mult+0x6a>
 8006c30:	4638      	mov	r0, r7
 8006c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c36:	bf00      	nop
 8006c38:	08007918 	.word	0x08007918
 8006c3c:	0800774d 	.word	0x0800774d
 8006c40:	080077cd 	.word	0x080077cd

08006c44 <__lshift>:
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	460c      	mov	r4, r1
 8006c4a:	6849      	ldr	r1, [r1, #4]
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	4607      	mov	r7, r0
 8006c56:	4691      	mov	r9, r2
 8006c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c5c:	f108 0601 	add.w	r6, r8, #1
 8006c60:	42b3      	cmp	r3, r6
 8006c62:	db0b      	blt.n	8006c7c <__lshift+0x38>
 8006c64:	4638      	mov	r0, r7
 8006c66:	f7ff fddd 	bl	8006824 <_Balloc>
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	b948      	cbnz	r0, 8006c82 <__lshift+0x3e>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <__lshift+0xd0>)
 8006c72:	4829      	ldr	r0, [pc, #164]	; (8006d18 <__lshift+0xd4>)
 8006c74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c78:	f000 fa1c 	bl	80070b4 <__assert_func>
 8006c7c:	3101      	adds	r1, #1
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	e7ee      	b.n	8006c60 <__lshift+0x1c>
 8006c82:	2300      	movs	r3, #0
 8006c84:	f100 0114 	add.w	r1, r0, #20
 8006c88:	f100 0210 	add.w	r2, r0, #16
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	4553      	cmp	r3, sl
 8006c90:	db33      	blt.n	8006cfa <__lshift+0xb6>
 8006c92:	6920      	ldr	r0, [r4, #16]
 8006c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c98:	f104 0314 	add.w	r3, r4, #20
 8006c9c:	f019 091f 	ands.w	r9, r9, #31
 8006ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ca4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ca8:	d02b      	beq.n	8006d02 <__lshift+0xbe>
 8006caa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cae:	468a      	mov	sl, r1
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	fa00 f009 	lsl.w	r0, r0, r9
 8006cb8:	4310      	orrs	r0, r2
 8006cba:	f84a 0b04 	str.w	r0, [sl], #4
 8006cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc2:	459c      	cmp	ip, r3
 8006cc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cc8:	d8f3      	bhi.n	8006cb2 <__lshift+0x6e>
 8006cca:	ebac 0304 	sub.w	r3, ip, r4
 8006cce:	3b15      	subs	r3, #21
 8006cd0:	f023 0303 	bic.w	r3, r3, #3
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	f104 0015 	add.w	r0, r4, #21
 8006cda:	4584      	cmp	ip, r0
 8006cdc:	bf38      	it	cc
 8006cde:	2304      	movcc	r3, #4
 8006ce0:	50ca      	str	r2, [r1, r3]
 8006ce2:	b10a      	cbz	r2, 8006ce8 <__lshift+0xa4>
 8006ce4:	f108 0602 	add.w	r6, r8, #2
 8006ce8:	3e01      	subs	r6, #1
 8006cea:	4638      	mov	r0, r7
 8006cec:	612e      	str	r6, [r5, #16]
 8006cee:	4621      	mov	r1, r4
 8006cf0:	f7ff fdd8 	bl	80068a4 <_Bfree>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cfe:	3301      	adds	r3, #1
 8006d00:	e7c5      	b.n	8006c8e <__lshift+0x4a>
 8006d02:	3904      	subs	r1, #4
 8006d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d0c:	459c      	cmp	ip, r3
 8006d0e:	d8f9      	bhi.n	8006d04 <__lshift+0xc0>
 8006d10:	e7ea      	b.n	8006ce8 <__lshift+0xa4>
 8006d12:	bf00      	nop
 8006d14:	080077bc 	.word	0x080077bc
 8006d18:	080077cd 	.word	0x080077cd

08006d1c <__mcmp>:
 8006d1c:	b530      	push	{r4, r5, lr}
 8006d1e:	6902      	ldr	r2, [r0, #16]
 8006d20:	690c      	ldr	r4, [r1, #16]
 8006d22:	1b12      	subs	r2, r2, r4
 8006d24:	d10e      	bne.n	8006d44 <__mcmp+0x28>
 8006d26:	f100 0314 	add.w	r3, r0, #20
 8006d2a:	3114      	adds	r1, #20
 8006d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d3c:	42a5      	cmp	r5, r4
 8006d3e:	d003      	beq.n	8006d48 <__mcmp+0x2c>
 8006d40:	d305      	bcc.n	8006d4e <__mcmp+0x32>
 8006d42:	2201      	movs	r2, #1
 8006d44:	4610      	mov	r0, r2
 8006d46:	bd30      	pop	{r4, r5, pc}
 8006d48:	4283      	cmp	r3, r0
 8006d4a:	d3f3      	bcc.n	8006d34 <__mcmp+0x18>
 8006d4c:	e7fa      	b.n	8006d44 <__mcmp+0x28>
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	e7f7      	b.n	8006d44 <__mcmp+0x28>

08006d54 <__mdiff>:
 8006d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	460c      	mov	r4, r1
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4690      	mov	r8, r2
 8006d62:	f7ff ffdb 	bl	8006d1c <__mcmp>
 8006d66:	1e05      	subs	r5, r0, #0
 8006d68:	d110      	bne.n	8006d8c <__mdiff+0x38>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff fd59 	bl	8006824 <_Balloc>
 8006d72:	b930      	cbnz	r0, 8006d82 <__mdiff+0x2e>
 8006d74:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <__mdiff+0x10c>)
 8006d76:	4602      	mov	r2, r0
 8006d78:	f240 2137 	movw	r1, #567	; 0x237
 8006d7c:	4839      	ldr	r0, [pc, #228]	; (8006e64 <__mdiff+0x110>)
 8006d7e:	f000 f999 	bl	80070b4 <__assert_func>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	bfa4      	itt	ge
 8006d8e:	4643      	movge	r3, r8
 8006d90:	46a0      	movge	r8, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d98:	bfa6      	itte	ge
 8006d9a:	461c      	movge	r4, r3
 8006d9c:	2500      	movge	r5, #0
 8006d9e:	2501      	movlt	r5, #1
 8006da0:	f7ff fd40 	bl	8006824 <_Balloc>
 8006da4:	b920      	cbnz	r0, 8006db0 <__mdiff+0x5c>
 8006da6:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <__mdiff+0x10c>)
 8006da8:	4602      	mov	r2, r0
 8006daa:	f240 2145 	movw	r1, #581	; 0x245
 8006dae:	e7e5      	b.n	8006d7c <__mdiff+0x28>
 8006db0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006db4:	6926      	ldr	r6, [r4, #16]
 8006db6:	60c5      	str	r5, [r0, #12]
 8006db8:	f104 0914 	add.w	r9, r4, #20
 8006dbc:	f108 0514 	add.w	r5, r8, #20
 8006dc0:	f100 0e14 	add.w	lr, r0, #20
 8006dc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006dc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006dcc:	f108 0210 	add.w	r2, r8, #16
 8006dd0:	46f2      	mov	sl, lr
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ddc:	fa11 f88b 	uxtah	r8, r1, fp
 8006de0:	b299      	uxth	r1, r3
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	eba8 0801 	sub.w	r8, r8, r1
 8006de8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006df0:	fa1f f888 	uxth.w	r8, r8
 8006df4:	1419      	asrs	r1, r3, #16
 8006df6:	454e      	cmp	r6, r9
 8006df8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006dfc:	f84a 3b04 	str.w	r3, [sl], #4
 8006e00:	d8e8      	bhi.n	8006dd4 <__mdiff+0x80>
 8006e02:	1b33      	subs	r3, r6, r4
 8006e04:	3b15      	subs	r3, #21
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	3415      	adds	r4, #21
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	bf38      	it	cc
 8006e12:	2304      	movcc	r3, #4
 8006e14:	441d      	add	r5, r3
 8006e16:	4473      	add	r3, lr
 8006e18:	469e      	mov	lr, r3
 8006e1a:	462e      	mov	r6, r5
 8006e1c:	4566      	cmp	r6, ip
 8006e1e:	d30e      	bcc.n	8006e3e <__mdiff+0xea>
 8006e20:	f10c 0203 	add.w	r2, ip, #3
 8006e24:	1b52      	subs	r2, r2, r5
 8006e26:	f022 0203 	bic.w	r2, r2, #3
 8006e2a:	3d03      	subs	r5, #3
 8006e2c:	45ac      	cmp	ip, r5
 8006e2e:	bf38      	it	cc
 8006e30:	2200      	movcc	r2, #0
 8006e32:	4413      	add	r3, r2
 8006e34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e38:	b17a      	cbz	r2, 8006e5a <__mdiff+0x106>
 8006e3a:	6107      	str	r7, [r0, #16]
 8006e3c:	e7a4      	b.n	8006d88 <__mdiff+0x34>
 8006e3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e42:	fa11 f288 	uxtah	r2, r1, r8
 8006e46:	1414      	asrs	r4, r2, #16
 8006e48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e4c:	b292      	uxth	r2, r2
 8006e4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e52:	f84e 2b04 	str.w	r2, [lr], #4
 8006e56:	1421      	asrs	r1, r4, #16
 8006e58:	e7e0      	b.n	8006e1c <__mdiff+0xc8>
 8006e5a:	3f01      	subs	r7, #1
 8006e5c:	e7ea      	b.n	8006e34 <__mdiff+0xe0>
 8006e5e:	bf00      	nop
 8006e60:	080077bc 	.word	0x080077bc
 8006e64:	080077cd 	.word	0x080077cd

08006e68 <__d2b>:
 8006e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	2101      	movs	r1, #1
 8006e70:	ec59 8b10 	vmov	r8, r9, d0
 8006e74:	4616      	mov	r6, r2
 8006e76:	f7ff fcd5 	bl	8006824 <_Balloc>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	b930      	cbnz	r0, 8006e8c <__d2b+0x24>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <__d2b+0xac>)
 8006e82:	4825      	ldr	r0, [pc, #148]	; (8006f18 <__d2b+0xb0>)
 8006e84:	f240 310f 	movw	r1, #783	; 0x30f
 8006e88:	f000 f914 	bl	80070b4 <__assert_func>
 8006e8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e94:	bb2d      	cbnz	r5, 8006ee2 <__d2b+0x7a>
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f1b8 0300 	subs.w	r3, r8, #0
 8006e9c:	d026      	beq.n	8006eec <__d2b+0x84>
 8006e9e:	4668      	mov	r0, sp
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	f7ff fd87 	bl	80069b4 <__lo0bits>
 8006ea6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006eaa:	b1e8      	cbz	r0, 8006ee8 <__d2b+0x80>
 8006eac:	f1c0 0320 	rsb	r3, r0, #32
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	40c2      	lsrs	r2, r0
 8006eb8:	6163      	str	r3, [r4, #20]
 8006eba:	9201      	str	r2, [sp, #4]
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	61a3      	str	r3, [r4, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf14      	ite	ne
 8006ec4:	2202      	movne	r2, #2
 8006ec6:	2201      	moveq	r2, #1
 8006ec8:	6122      	str	r2, [r4, #16]
 8006eca:	b1bd      	cbz	r5, 8006efc <__d2b+0x94>
 8006ecc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ed0:	4405      	add	r5, r0
 8006ed2:	603d      	str	r5, [r7, #0]
 8006ed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	4620      	mov	r0, r4
 8006edc:	b003      	add	sp, #12
 8006ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ee6:	e7d6      	b.n	8006e96 <__d2b+0x2e>
 8006ee8:	6161      	str	r1, [r4, #20]
 8006eea:	e7e7      	b.n	8006ebc <__d2b+0x54>
 8006eec:	a801      	add	r0, sp, #4
 8006eee:	f7ff fd61 	bl	80069b4 <__lo0bits>
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	6163      	str	r3, [r4, #20]
 8006ef6:	3020      	adds	r0, #32
 8006ef8:	2201      	movs	r2, #1
 8006efa:	e7e5      	b.n	8006ec8 <__d2b+0x60>
 8006efc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f04:	6038      	str	r0, [r7, #0]
 8006f06:	6918      	ldr	r0, [r3, #16]
 8006f08:	f7ff fd34 	bl	8006974 <__hi0bits>
 8006f0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f10:	e7e2      	b.n	8006ed8 <__d2b+0x70>
 8006f12:	bf00      	nop
 8006f14:	080077bc 	.word	0x080077bc
 8006f18:	080077cd 	.word	0x080077cd

08006f1c <__sflush_r>:
 8006f1c:	898a      	ldrh	r2, [r1, #12]
 8006f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	0710      	lsls	r0, r2, #28
 8006f26:	460c      	mov	r4, r1
 8006f28:	d458      	bmi.n	8006fdc <__sflush_r+0xc0>
 8006f2a:	684b      	ldr	r3, [r1, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dc05      	bgt.n	8006f3c <__sflush_r+0x20>
 8006f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dc02      	bgt.n	8006f3c <__sflush_r+0x20>
 8006f36:	2000      	movs	r0, #0
 8006f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f3e:	2e00      	cmp	r6, #0
 8006f40:	d0f9      	beq.n	8006f36 <__sflush_r+0x1a>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f48:	682f      	ldr	r7, [r5, #0]
 8006f4a:	6a21      	ldr	r1, [r4, #32]
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	d032      	beq.n	8006fb6 <__sflush_r+0x9a>
 8006f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	075a      	lsls	r2, r3, #29
 8006f56:	d505      	bpl.n	8006f64 <__sflush_r+0x48>
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	1ac0      	subs	r0, r0, r3
 8006f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f5e:	b10b      	cbz	r3, 8006f64 <__sflush_r+0x48>
 8006f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f62:	1ac0      	subs	r0, r0, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	4602      	mov	r2, r0
 8006f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f6a:	6a21      	ldr	r1, [r4, #32]
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b0      	blx	r6
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	d106      	bne.n	8006f84 <__sflush_r+0x68>
 8006f76:	6829      	ldr	r1, [r5, #0]
 8006f78:	291d      	cmp	r1, #29
 8006f7a:	d82b      	bhi.n	8006fd4 <__sflush_r+0xb8>
 8006f7c:	4a29      	ldr	r2, [pc, #164]	; (8007024 <__sflush_r+0x108>)
 8006f7e:	410a      	asrs	r2, r1
 8006f80:	07d6      	lsls	r6, r2, #31
 8006f82:	d427      	bmi.n	8006fd4 <__sflush_r+0xb8>
 8006f84:	2200      	movs	r2, #0
 8006f86:	6062      	str	r2, [r4, #4]
 8006f88:	04d9      	lsls	r1, r3, #19
 8006f8a:	6922      	ldr	r2, [r4, #16]
 8006f8c:	6022      	str	r2, [r4, #0]
 8006f8e:	d504      	bpl.n	8006f9a <__sflush_r+0x7e>
 8006f90:	1c42      	adds	r2, r0, #1
 8006f92:	d101      	bne.n	8006f98 <__sflush_r+0x7c>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	b903      	cbnz	r3, 8006f9a <__sflush_r+0x7e>
 8006f98:	6560      	str	r0, [r4, #84]	; 0x54
 8006f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f9c:	602f      	str	r7, [r5, #0]
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d0c9      	beq.n	8006f36 <__sflush_r+0x1a>
 8006fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d002      	beq.n	8006fb0 <__sflush_r+0x94>
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7ff fb3a 	bl	8006624 <_free_r>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	6360      	str	r0, [r4, #52]	; 0x34
 8006fb4:	e7c0      	b.n	8006f38 <__sflush_r+0x1c>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b0      	blx	r6
 8006fbc:	1c41      	adds	r1, r0, #1
 8006fbe:	d1c8      	bne.n	8006f52 <__sflush_r+0x36>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0c5      	beq.n	8006f52 <__sflush_r+0x36>
 8006fc6:	2b1d      	cmp	r3, #29
 8006fc8:	d001      	beq.n	8006fce <__sflush_r+0xb2>
 8006fca:	2b16      	cmp	r3, #22
 8006fcc:	d101      	bne.n	8006fd2 <__sflush_r+0xb6>
 8006fce:	602f      	str	r7, [r5, #0]
 8006fd0:	e7b1      	b.n	8006f36 <__sflush_r+0x1a>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	e7ad      	b.n	8006f38 <__sflush_r+0x1c>
 8006fdc:	690f      	ldr	r7, [r1, #16]
 8006fde:	2f00      	cmp	r7, #0
 8006fe0:	d0a9      	beq.n	8006f36 <__sflush_r+0x1a>
 8006fe2:	0793      	lsls	r3, r2, #30
 8006fe4:	680e      	ldr	r6, [r1, #0]
 8006fe6:	bf08      	it	eq
 8006fe8:	694b      	ldreq	r3, [r1, #20]
 8006fea:	600f      	str	r7, [r1, #0]
 8006fec:	bf18      	it	ne
 8006fee:	2300      	movne	r3, #0
 8006ff0:	eba6 0807 	sub.w	r8, r6, r7
 8006ff4:	608b      	str	r3, [r1, #8]
 8006ff6:	f1b8 0f00 	cmp.w	r8, #0
 8006ffa:	dd9c      	ble.n	8006f36 <__sflush_r+0x1a>
 8006ffc:	6a21      	ldr	r1, [r4, #32]
 8006ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007000:	4643      	mov	r3, r8
 8007002:	463a      	mov	r2, r7
 8007004:	4628      	mov	r0, r5
 8007006:	47b0      	blx	r6
 8007008:	2800      	cmp	r0, #0
 800700a:	dc06      	bgt.n	800701a <__sflush_r+0xfe>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e78e      	b.n	8006f38 <__sflush_r+0x1c>
 800701a:	4407      	add	r7, r0
 800701c:	eba8 0800 	sub.w	r8, r8, r0
 8007020:	e7e9      	b.n	8006ff6 <__sflush_r+0xda>
 8007022:	bf00      	nop
 8007024:	dfbffffe 	.word	0xdfbffffe

08007028 <_fflush_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	690b      	ldr	r3, [r1, #16]
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	b913      	cbnz	r3, 8007038 <_fflush_r+0x10>
 8007032:	2500      	movs	r5, #0
 8007034:	4628      	mov	r0, r5
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	b118      	cbz	r0, 8007042 <_fflush_r+0x1a>
 800703a:	6a03      	ldr	r3, [r0, #32]
 800703c:	b90b      	cbnz	r3, 8007042 <_fflush_r+0x1a>
 800703e:	f7fe fb7d 	bl	800573c <__sinit>
 8007042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f3      	beq.n	8007032 <_fflush_r+0xa>
 800704a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800704c:	07d0      	lsls	r0, r2, #31
 800704e:	d404      	bmi.n	800705a <_fflush_r+0x32>
 8007050:	0599      	lsls	r1, r3, #22
 8007052:	d402      	bmi.n	800705a <_fflush_r+0x32>
 8007054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007056:	f7fe fc68 	bl	800592a <__retarget_lock_acquire_recursive>
 800705a:	4628      	mov	r0, r5
 800705c:	4621      	mov	r1, r4
 800705e:	f7ff ff5d 	bl	8006f1c <__sflush_r>
 8007062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007064:	07da      	lsls	r2, r3, #31
 8007066:	4605      	mov	r5, r0
 8007068:	d4e4      	bmi.n	8007034 <_fflush_r+0xc>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	059b      	lsls	r3, r3, #22
 800706e:	d4e1      	bmi.n	8007034 <_fflush_r+0xc>
 8007070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007072:	f7fe fc5b 	bl	800592c <__retarget_lock_release_recursive>
 8007076:	e7dd      	b.n	8007034 <_fflush_r+0xc>

08007078 <_sbrk_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	; (8007094 <_sbrk_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fb f920 	bl	80022c8 <_sbrk>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_sbrk_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_sbrk_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200003c8 	.word	0x200003c8

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <__assert_func>:
 80070b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b6:	4614      	mov	r4, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <__assert_func+0x2c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	68d8      	ldr	r0, [r3, #12]
 80070c2:	b14c      	cbz	r4, 80070d8 <__assert_func+0x24>
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <__assert_func+0x30>)
 80070c6:	9100      	str	r1, [sp, #0]
 80070c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070cc:	4906      	ldr	r1, [pc, #24]	; (80070e8 <__assert_func+0x34>)
 80070ce:	462b      	mov	r3, r5
 80070d0:	f000 f844 	bl	800715c <fiprintf>
 80070d4:	f000 f854 	bl	8007180 <abort>
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <__assert_func+0x38>)
 80070da:	461c      	mov	r4, r3
 80070dc:	e7f3      	b.n	80070c6 <__assert_func+0x12>
 80070de:	bf00      	nop
 80070e0:	20000064 	.word	0x20000064
 80070e4:	0800792e 	.word	0x0800792e
 80070e8:	0800793b 	.word	0x0800793b
 80070ec:	08007969 	.word	0x08007969

080070f0 <_calloc_r>:
 80070f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f2:	fba1 2402 	umull	r2, r4, r1, r2
 80070f6:	b94c      	cbnz	r4, 800710c <_calloc_r+0x1c>
 80070f8:	4611      	mov	r1, r2
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	f7ff fb06 	bl	800670c <_malloc_r>
 8007100:	9a01      	ldr	r2, [sp, #4]
 8007102:	4605      	mov	r5, r0
 8007104:	b930      	cbnz	r0, 8007114 <_calloc_r+0x24>
 8007106:	4628      	mov	r0, r5
 8007108:	b003      	add	sp, #12
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	220c      	movs	r2, #12
 800710e:	6002      	str	r2, [r0, #0]
 8007110:	2500      	movs	r5, #0
 8007112:	e7f8      	b.n	8007106 <_calloc_r+0x16>
 8007114:	4621      	mov	r1, r4
 8007116:	f7fe fb8a 	bl	800582e <memset>
 800711a:	e7f4      	b.n	8007106 <_calloc_r+0x16>

0800711c <__ascii_mbtowc>:
 800711c:	b082      	sub	sp, #8
 800711e:	b901      	cbnz	r1, 8007122 <__ascii_mbtowc+0x6>
 8007120:	a901      	add	r1, sp, #4
 8007122:	b142      	cbz	r2, 8007136 <__ascii_mbtowc+0x1a>
 8007124:	b14b      	cbz	r3, 800713a <__ascii_mbtowc+0x1e>
 8007126:	7813      	ldrb	r3, [r2, #0]
 8007128:	600b      	str	r3, [r1, #0]
 800712a:	7812      	ldrb	r2, [r2, #0]
 800712c:	1e10      	subs	r0, r2, #0
 800712e:	bf18      	it	ne
 8007130:	2001      	movne	r0, #1
 8007132:	b002      	add	sp, #8
 8007134:	4770      	bx	lr
 8007136:	4610      	mov	r0, r2
 8007138:	e7fb      	b.n	8007132 <__ascii_mbtowc+0x16>
 800713a:	f06f 0001 	mvn.w	r0, #1
 800713e:	e7f8      	b.n	8007132 <__ascii_mbtowc+0x16>

08007140 <__ascii_wctomb>:
 8007140:	b149      	cbz	r1, 8007156 <__ascii_wctomb+0x16>
 8007142:	2aff      	cmp	r2, #255	; 0xff
 8007144:	bf85      	ittet	hi
 8007146:	238a      	movhi	r3, #138	; 0x8a
 8007148:	6003      	strhi	r3, [r0, #0]
 800714a:	700a      	strbls	r2, [r1, #0]
 800714c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007150:	bf98      	it	ls
 8007152:	2001      	movls	r0, #1
 8007154:	4770      	bx	lr
 8007156:	4608      	mov	r0, r1
 8007158:	4770      	bx	lr
	...

0800715c <fiprintf>:
 800715c:	b40e      	push	{r1, r2, r3}
 800715e:	b503      	push	{r0, r1, lr}
 8007160:	4601      	mov	r1, r0
 8007162:	ab03      	add	r3, sp, #12
 8007164:	4805      	ldr	r0, [pc, #20]	; (800717c <fiprintf+0x20>)
 8007166:	f853 2b04 	ldr.w	r2, [r3], #4
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f000 f837 	bl	80071e0 <_vfiprintf_r>
 8007172:	b002      	add	sp, #8
 8007174:	f85d eb04 	ldr.w	lr, [sp], #4
 8007178:	b003      	add	sp, #12
 800717a:	4770      	bx	lr
 800717c:	20000064 	.word	0x20000064

08007180 <abort>:
 8007180:	b508      	push	{r3, lr}
 8007182:	2006      	movs	r0, #6
 8007184:	f000 fa04 	bl	8007590 <raise>
 8007188:	2001      	movs	r0, #1
 800718a:	f7fb f825 	bl	80021d8 <_exit>

0800718e <__sfputc_r>:
 800718e:	6893      	ldr	r3, [r2, #8]
 8007190:	3b01      	subs	r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	b410      	push	{r4}
 8007196:	6093      	str	r3, [r2, #8]
 8007198:	da08      	bge.n	80071ac <__sfputc_r+0x1e>
 800719a:	6994      	ldr	r4, [r2, #24]
 800719c:	42a3      	cmp	r3, r4
 800719e:	db01      	blt.n	80071a4 <__sfputc_r+0x16>
 80071a0:	290a      	cmp	r1, #10
 80071a2:	d103      	bne.n	80071ac <__sfputc_r+0x1e>
 80071a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a8:	f000 b934 	b.w	8007414 <__swbuf_r>
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	1c58      	adds	r0, r3, #1
 80071b0:	6010      	str	r0, [r2, #0]
 80071b2:	7019      	strb	r1, [r3, #0]
 80071b4:	4608      	mov	r0, r1
 80071b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <__sfputs_r>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4606      	mov	r6, r0
 80071c0:	460f      	mov	r7, r1
 80071c2:	4614      	mov	r4, r2
 80071c4:	18d5      	adds	r5, r2, r3
 80071c6:	42ac      	cmp	r4, r5
 80071c8:	d101      	bne.n	80071ce <__sfputs_r+0x12>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e007      	b.n	80071de <__sfputs_r+0x22>
 80071ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d2:	463a      	mov	r2, r7
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff ffda 	bl	800718e <__sfputc_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d1f3      	bne.n	80071c6 <__sfputs_r+0xa>
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071e0 <_vfiprintf_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	460d      	mov	r5, r1
 80071e6:	b09d      	sub	sp, #116	; 0x74
 80071e8:	4614      	mov	r4, r2
 80071ea:	4698      	mov	r8, r3
 80071ec:	4606      	mov	r6, r0
 80071ee:	b118      	cbz	r0, 80071f8 <_vfiprintf_r+0x18>
 80071f0:	6a03      	ldr	r3, [r0, #32]
 80071f2:	b90b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x18>
 80071f4:	f7fe faa2 	bl	800573c <__sinit>
 80071f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d405      	bmi.n	800720a <_vfiprintf_r+0x2a>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	059a      	lsls	r2, r3, #22
 8007202:	d402      	bmi.n	800720a <_vfiprintf_r+0x2a>
 8007204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007206:	f7fe fb90 	bl	800592a <__retarget_lock_acquire_recursive>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	d501      	bpl.n	8007214 <_vfiprintf_r+0x34>
 8007210:	692b      	ldr	r3, [r5, #16]
 8007212:	b99b      	cbnz	r3, 800723c <_vfiprintf_r+0x5c>
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f000 f93a 	bl	8007490 <__swsetup_r>
 800721c:	b170      	cbz	r0, 800723c <_vfiprintf_r+0x5c>
 800721e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007220:	07dc      	lsls	r4, r3, #31
 8007222:	d504      	bpl.n	800722e <_vfiprintf_r+0x4e>
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	b01d      	add	sp, #116	; 0x74
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	0598      	lsls	r0, r3, #22
 8007232:	d4f7      	bmi.n	8007224 <_vfiprintf_r+0x44>
 8007234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007236:	f7fe fb79 	bl	800592c <__retarget_lock_release_recursive>
 800723a:	e7f3      	b.n	8007224 <_vfiprintf_r+0x44>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007246:	f8cd 800c 	str.w	r8, [sp, #12]
 800724a:	2330      	movs	r3, #48	; 0x30
 800724c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007400 <_vfiprintf_r+0x220>
 8007250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007254:	f04f 0901 	mov.w	r9, #1
 8007258:	4623      	mov	r3, r4
 800725a:	469a      	mov	sl, r3
 800725c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007260:	b10a      	cbz	r2, 8007266 <_vfiprintf_r+0x86>
 8007262:	2a25      	cmp	r2, #37	; 0x25
 8007264:	d1f9      	bne.n	800725a <_vfiprintf_r+0x7a>
 8007266:	ebba 0b04 	subs.w	fp, sl, r4
 800726a:	d00b      	beq.n	8007284 <_vfiprintf_r+0xa4>
 800726c:	465b      	mov	r3, fp
 800726e:	4622      	mov	r2, r4
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ffa2 	bl	80071bc <__sfputs_r>
 8007278:	3001      	adds	r0, #1
 800727a:	f000 80a9 	beq.w	80073d0 <_vfiprintf_r+0x1f0>
 800727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007280:	445a      	add	r2, fp
 8007282:	9209      	str	r2, [sp, #36]	; 0x24
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80a1 	beq.w	80073d0 <_vfiprintf_r+0x1f0>
 800728e:	2300      	movs	r3, #0
 8007290:	f04f 32ff 	mov.w	r2, #4294967295
 8007294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072a4:	931a      	str	r3, [sp, #104]	; 0x68
 80072a6:	4654      	mov	r4, sl
 80072a8:	2205      	movs	r2, #5
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	4854      	ldr	r0, [pc, #336]	; (8007400 <_vfiprintf_r+0x220>)
 80072b0:	f7f8 ff8e 	bl	80001d0 <memchr>
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	b9d8      	cbnz	r0, 80072f0 <_vfiprintf_r+0x110>
 80072b8:	06d1      	lsls	r1, r2, #27
 80072ba:	bf44      	itt	mi
 80072bc:	2320      	movmi	r3, #32
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c2:	0713      	lsls	r3, r2, #28
 80072c4:	bf44      	itt	mi
 80072c6:	232b      	movmi	r3, #43	; 0x2b
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b2a      	cmp	r3, #42	; 0x2a
 80072d2:	d015      	beq.n	8007300 <_vfiprintf_r+0x120>
 80072d4:	9a07      	ldr	r2, [sp, #28]
 80072d6:	4654      	mov	r4, sl
 80072d8:	2000      	movs	r0, #0
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4621      	mov	r1, r4
 80072e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e4:	3b30      	subs	r3, #48	; 0x30
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d94d      	bls.n	8007386 <_vfiprintf_r+0x1a6>
 80072ea:	b1b0      	cbz	r0, 800731a <_vfiprintf_r+0x13a>
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	e014      	b.n	800731a <_vfiprintf_r+0x13a>
 80072f0:	eba0 0308 	sub.w	r3, r0, r8
 80072f4:	fa09 f303 	lsl.w	r3, r9, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	46a2      	mov	sl, r4
 80072fe:	e7d2      	b.n	80072a6 <_vfiprintf_r+0xc6>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d19      	adds	r1, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9103      	str	r1, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfbb      	ittet	lt
 800730c:	425b      	neglt	r3, r3
 800730e:	f042 0202 	orrlt.w	r2, r2, #2
 8007312:	9307      	strge	r3, [sp, #28]
 8007314:	9307      	strlt	r3, [sp, #28]
 8007316:	bfb8      	it	lt
 8007318:	9204      	strlt	r2, [sp, #16]
 800731a:	7823      	ldrb	r3, [r4, #0]
 800731c:	2b2e      	cmp	r3, #46	; 0x2e
 800731e:	d10c      	bne.n	800733a <_vfiprintf_r+0x15a>
 8007320:	7863      	ldrb	r3, [r4, #1]
 8007322:	2b2a      	cmp	r3, #42	; 0x2a
 8007324:	d134      	bne.n	8007390 <_vfiprintf_r+0x1b0>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9203      	str	r2, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfb8      	it	lt
 8007332:	f04f 33ff 	movlt.w	r3, #4294967295
 8007336:	3402      	adds	r4, #2
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007410 <_vfiprintf_r+0x230>
 800733e:	7821      	ldrb	r1, [r4, #0]
 8007340:	2203      	movs	r2, #3
 8007342:	4650      	mov	r0, sl
 8007344:	f7f8 ff44 	bl	80001d0 <memchr>
 8007348:	b138      	cbz	r0, 800735a <_vfiprintf_r+0x17a>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	eba0 000a 	sub.w	r0, r0, sl
 8007350:	2240      	movs	r2, #64	; 0x40
 8007352:	4082      	lsls	r2, r0
 8007354:	4313      	orrs	r3, r2
 8007356:	3401      	adds	r4, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735e:	4829      	ldr	r0, [pc, #164]	; (8007404 <_vfiprintf_r+0x224>)
 8007360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007364:	2206      	movs	r2, #6
 8007366:	f7f8 ff33 	bl	80001d0 <memchr>
 800736a:	2800      	cmp	r0, #0
 800736c:	d03f      	beq.n	80073ee <_vfiprintf_r+0x20e>
 800736e:	4b26      	ldr	r3, [pc, #152]	; (8007408 <_vfiprintf_r+0x228>)
 8007370:	bb1b      	cbnz	r3, 80073ba <_vfiprintf_r+0x1da>
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	3307      	adds	r3, #7
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	3308      	adds	r3, #8
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	443b      	add	r3, r7
 8007382:	9309      	str	r3, [sp, #36]	; 0x24
 8007384:	e768      	b.n	8007258 <_vfiprintf_r+0x78>
 8007386:	fb0c 3202 	mla	r2, ip, r2, r3
 800738a:	460c      	mov	r4, r1
 800738c:	2001      	movs	r0, #1
 800738e:	e7a6      	b.n	80072de <_vfiprintf_r+0xfe>
 8007390:	2300      	movs	r3, #0
 8007392:	3401      	adds	r4, #1
 8007394:	9305      	str	r3, [sp, #20]
 8007396:	4619      	mov	r1, r3
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4620      	mov	r0, r4
 800739e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a2:	3a30      	subs	r2, #48	; 0x30
 80073a4:	2a09      	cmp	r2, #9
 80073a6:	d903      	bls.n	80073b0 <_vfiprintf_r+0x1d0>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0c6      	beq.n	800733a <_vfiprintf_r+0x15a>
 80073ac:	9105      	str	r1, [sp, #20]
 80073ae:	e7c4      	b.n	800733a <_vfiprintf_r+0x15a>
 80073b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b4:	4604      	mov	r4, r0
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f0      	b.n	800739c <_vfiprintf_r+0x1bc>
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	462a      	mov	r2, r5
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <_vfiprintf_r+0x22c>)
 80073c2:	a904      	add	r1, sp, #16
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7fd fd67 	bl	8004e98 <_printf_float>
 80073ca:	4607      	mov	r7, r0
 80073cc:	1c78      	adds	r0, r7, #1
 80073ce:	d1d6      	bne.n	800737e <_vfiprintf_r+0x19e>
 80073d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x202>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x202>
 80073dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073de:	f7fe faa5 	bl	800592c <__retarget_lock_release_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	065b      	lsls	r3, r3, #25
 80073e6:	f53f af1d 	bmi.w	8007224 <_vfiprintf_r+0x44>
 80073ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ec:	e71c      	b.n	8007228 <_vfiprintf_r+0x48>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <_vfiprintf_r+0x22c>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7fd fff1 	bl	80053e0 <_printf_i>
 80073fe:	e7e4      	b.n	80073ca <_vfiprintf_r+0x1ea>
 8007400:	08007a6b 	.word	0x08007a6b
 8007404:	08007a75 	.word	0x08007a75
 8007408:	08004e99 	.word	0x08004e99
 800740c:	080071bd 	.word	0x080071bd
 8007410:	08007a71 	.word	0x08007a71

08007414 <__swbuf_r>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	460e      	mov	r6, r1
 8007418:	4614      	mov	r4, r2
 800741a:	4605      	mov	r5, r0
 800741c:	b118      	cbz	r0, 8007426 <__swbuf_r+0x12>
 800741e:	6a03      	ldr	r3, [r0, #32]
 8007420:	b90b      	cbnz	r3, 8007426 <__swbuf_r+0x12>
 8007422:	f7fe f98b 	bl	800573c <__sinit>
 8007426:	69a3      	ldr	r3, [r4, #24]
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	071a      	lsls	r2, r3, #28
 800742e:	d525      	bpl.n	800747c <__swbuf_r+0x68>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	b31b      	cbz	r3, 800747c <__swbuf_r+0x68>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	1a98      	subs	r0, r3, r2
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	b2f6      	uxtb	r6, r6
 800743e:	4283      	cmp	r3, r0
 8007440:	4637      	mov	r7, r6
 8007442:	dc04      	bgt.n	800744e <__swbuf_r+0x3a>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f7ff fdee 	bl	8007028 <_fflush_r>
 800744c:	b9e0      	cbnz	r0, 8007488 <__swbuf_r+0x74>
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	3b01      	subs	r3, #1
 8007452:	60a3      	str	r3, [r4, #8]
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	6022      	str	r2, [r4, #0]
 800745a:	701e      	strb	r6, [r3, #0]
 800745c:	6962      	ldr	r2, [r4, #20]
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	429a      	cmp	r2, r3
 8007462:	d004      	beq.n	800746e <__swbuf_r+0x5a>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	07db      	lsls	r3, r3, #31
 8007468:	d506      	bpl.n	8007478 <__swbuf_r+0x64>
 800746a:	2e0a      	cmp	r6, #10
 800746c:	d104      	bne.n	8007478 <__swbuf_r+0x64>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f7ff fdd9 	bl	8007028 <_fflush_r>
 8007476:	b938      	cbnz	r0, 8007488 <__swbuf_r+0x74>
 8007478:	4638      	mov	r0, r7
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f806 	bl	8007490 <__swsetup_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	d0d5      	beq.n	8007434 <__swbuf_r+0x20>
 8007488:	f04f 37ff 	mov.w	r7, #4294967295
 800748c:	e7f4      	b.n	8007478 <__swbuf_r+0x64>
	...

08007490 <__swsetup_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4b2a      	ldr	r3, [pc, #168]	; (800753c <__swsetup_r+0xac>)
 8007494:	4605      	mov	r5, r0
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	460c      	mov	r4, r1
 800749a:	b118      	cbz	r0, 80074a4 <__swsetup_r+0x14>
 800749c:	6a03      	ldr	r3, [r0, #32]
 800749e:	b90b      	cbnz	r3, 80074a4 <__swsetup_r+0x14>
 80074a0:	f7fe f94c 	bl	800573c <__sinit>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074aa:	0718      	lsls	r0, r3, #28
 80074ac:	d422      	bmi.n	80074f4 <__swsetup_r+0x64>
 80074ae:	06d9      	lsls	r1, r3, #27
 80074b0:	d407      	bmi.n	80074c2 <__swsetup_r+0x32>
 80074b2:	2309      	movs	r3, #9
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	f04f 30ff 	mov.w	r0, #4294967295
 80074c0:	e034      	b.n	800752c <__swsetup_r+0x9c>
 80074c2:	0758      	lsls	r0, r3, #29
 80074c4:	d512      	bpl.n	80074ec <__swsetup_r+0x5c>
 80074c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074c8:	b141      	cbz	r1, 80074dc <__swsetup_r+0x4c>
 80074ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ce:	4299      	cmp	r1, r3
 80074d0:	d002      	beq.n	80074d8 <__swsetup_r+0x48>
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7ff f8a6 	bl	8006624 <_free_r>
 80074d8:	2300      	movs	r3, #0
 80074da:	6363      	str	r3, [r4, #52]	; 0x34
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	2300      	movs	r3, #0
 80074e6:	6063      	str	r3, [r4, #4]
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	f043 0308 	orr.w	r3, r3, #8
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	b94b      	cbnz	r3, 800750c <__swsetup_r+0x7c>
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007502:	d003      	beq.n	800750c <__swsetup_r+0x7c>
 8007504:	4621      	mov	r1, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f884 	bl	8007614 <__smakebuf_r>
 800750c:	89a0      	ldrh	r0, [r4, #12]
 800750e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007512:	f010 0301 	ands.w	r3, r0, #1
 8007516:	d00a      	beq.n	800752e <__swsetup_r+0x9e>
 8007518:	2300      	movs	r3, #0
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	6963      	ldr	r3, [r4, #20]
 800751e:	425b      	negs	r3, r3
 8007520:	61a3      	str	r3, [r4, #24]
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	b943      	cbnz	r3, 8007538 <__swsetup_r+0xa8>
 8007526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800752a:	d1c4      	bne.n	80074b6 <__swsetup_r+0x26>
 800752c:	bd38      	pop	{r3, r4, r5, pc}
 800752e:	0781      	lsls	r1, r0, #30
 8007530:	bf58      	it	pl
 8007532:	6963      	ldrpl	r3, [r4, #20]
 8007534:	60a3      	str	r3, [r4, #8]
 8007536:	e7f4      	b.n	8007522 <__swsetup_r+0x92>
 8007538:	2000      	movs	r0, #0
 800753a:	e7f7      	b.n	800752c <__swsetup_r+0x9c>
 800753c:	20000064 	.word	0x20000064

08007540 <_raise_r>:
 8007540:	291f      	cmp	r1, #31
 8007542:	b538      	push	{r3, r4, r5, lr}
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	d904      	bls.n	8007554 <_raise_r+0x14>
 800754a:	2316      	movs	r3, #22
 800754c:	6003      	str	r3, [r0, #0]
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007556:	b112      	cbz	r2, 800755e <_raise_r+0x1e>
 8007558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800755c:	b94b      	cbnz	r3, 8007572 <_raise_r+0x32>
 800755e:	4620      	mov	r0, r4
 8007560:	f000 f830 	bl	80075c4 <_getpid_r>
 8007564:	462a      	mov	r2, r5
 8007566:	4601      	mov	r1, r0
 8007568:	4620      	mov	r0, r4
 800756a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756e:	f000 b817 	b.w	80075a0 <_kill_r>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d00a      	beq.n	800758c <_raise_r+0x4c>
 8007576:	1c59      	adds	r1, r3, #1
 8007578:	d103      	bne.n	8007582 <_raise_r+0x42>
 800757a:	2316      	movs	r3, #22
 800757c:	6003      	str	r3, [r0, #0]
 800757e:	2001      	movs	r0, #1
 8007580:	e7e7      	b.n	8007552 <_raise_r+0x12>
 8007582:	2400      	movs	r4, #0
 8007584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007588:	4628      	mov	r0, r5
 800758a:	4798      	blx	r3
 800758c:	2000      	movs	r0, #0
 800758e:	e7e0      	b.n	8007552 <_raise_r+0x12>

08007590 <raise>:
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <raise+0xc>)
 8007592:	4601      	mov	r1, r0
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	f7ff bfd3 	b.w	8007540 <_raise_r>
 800759a:	bf00      	nop
 800759c:	20000064 	.word	0x20000064

080075a0 <_kill_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d07      	ldr	r5, [pc, #28]	; (80075c0 <_kill_r+0x20>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	4611      	mov	r1, r2
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	f7fa fe03 	bl	80021b8 <_kill>
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	d102      	bne.n	80075bc <_kill_r+0x1c>
 80075b6:	682b      	ldr	r3, [r5, #0]
 80075b8:	b103      	cbz	r3, 80075bc <_kill_r+0x1c>
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	200003c8 	.word	0x200003c8

080075c4 <_getpid_r>:
 80075c4:	f7fa bdf0 	b.w	80021a8 <_getpid>

080075c8 <__swhatbuf_r>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	460c      	mov	r4, r1
 80075cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d0:	2900      	cmp	r1, #0
 80075d2:	b096      	sub	sp, #88	; 0x58
 80075d4:	4615      	mov	r5, r2
 80075d6:	461e      	mov	r6, r3
 80075d8:	da0d      	bge.n	80075f6 <__swhatbuf_r+0x2e>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	bf0c      	ite	eq
 80075e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80075ea:	2340      	movne	r3, #64	; 0x40
 80075ec:	2000      	movs	r0, #0
 80075ee:	6031      	str	r1, [r6, #0]
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	b016      	add	sp, #88	; 0x58
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	466a      	mov	r2, sp
 80075f8:	f000 f848 	bl	800768c <_fstat_r>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	dbec      	blt.n	80075da <__swhatbuf_r+0x12>
 8007600:	9901      	ldr	r1, [sp, #4]
 8007602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800760a:	4259      	negs	r1, r3
 800760c:	4159      	adcs	r1, r3
 800760e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007612:	e7eb      	b.n	80075ec <__swhatbuf_r+0x24>

08007614 <__smakebuf_r>:
 8007614:	898b      	ldrh	r3, [r1, #12]
 8007616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007618:	079d      	lsls	r5, r3, #30
 800761a:	4606      	mov	r6, r0
 800761c:	460c      	mov	r4, r1
 800761e:	d507      	bpl.n	8007630 <__smakebuf_r+0x1c>
 8007620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	2301      	movs	r3, #1
 800762a:	6163      	str	r3, [r4, #20]
 800762c:	b002      	add	sp, #8
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	ab01      	add	r3, sp, #4
 8007632:	466a      	mov	r2, sp
 8007634:	f7ff ffc8 	bl	80075c8 <__swhatbuf_r>
 8007638:	9900      	ldr	r1, [sp, #0]
 800763a:	4605      	mov	r5, r0
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff f865 	bl	800670c <_malloc_r>
 8007642:	b948      	cbnz	r0, 8007658 <__smakebuf_r+0x44>
 8007644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007648:	059a      	lsls	r2, r3, #22
 800764a:	d4ef      	bmi.n	800762c <__smakebuf_r+0x18>
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	e7e3      	b.n	8007620 <__smakebuf_r+0xc>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	6020      	str	r0, [r4, #0]
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	9b00      	ldr	r3, [sp, #0]
 8007664:	6163      	str	r3, [r4, #20]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	6120      	str	r0, [r4, #16]
 800766a:	b15b      	cbz	r3, 8007684 <__smakebuf_r+0x70>
 800766c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f81d 	bl	80076b0 <_isatty_r>
 8007676:	b128      	cbz	r0, 8007684 <__smakebuf_r+0x70>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	431d      	orrs	r5, r3
 8007688:	81a5      	strh	r5, [r4, #12]
 800768a:	e7cf      	b.n	800762c <__smakebuf_r+0x18>

0800768c <_fstat_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d07      	ldr	r5, [pc, #28]	; (80076ac <_fstat_r+0x20>)
 8007690:	2300      	movs	r3, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	4611      	mov	r1, r2
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	f7fa fdec 	bl	8002276 <_fstat>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d102      	bne.n	80076a8 <_fstat_r+0x1c>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	b103      	cbz	r3, 80076a8 <_fstat_r+0x1c>
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	bd38      	pop	{r3, r4, r5, pc}
 80076aa:	bf00      	nop
 80076ac:	200003c8 	.word	0x200003c8

080076b0 <_isatty_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d06      	ldr	r5, [pc, #24]	; (80076cc <_isatty_r+0x1c>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	602b      	str	r3, [r5, #0]
 80076bc:	f7fa fdeb 	bl	8002296 <_isatty>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_isatty_r+0x1a>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_isatty_r+0x1a>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	200003c8 	.word	0x200003c8

080076d0 <_init>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	bf00      	nop
 80076d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d6:	bc08      	pop	{r3}
 80076d8:	469e      	mov	lr, r3
 80076da:	4770      	bx	lr

080076dc <_fini>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr
