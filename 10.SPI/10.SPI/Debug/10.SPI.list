
10.SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e34c  0800bda8  0800bda8  0001bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803a0f4  0803a0f4  000501d4  2**0
                  CONTENTS
  4 .ARM          00000008  0803a0f4  0803a0f4  0004a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803a0fc  0803a0fc  000501d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803a0fc  0803a0fc  0004a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803a100  0803a100  0004a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0803a104  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000501d4  2**0
                  CONTENTS
 10 .bss          00000518  200001d4  200001d4  000501d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ec  200006ec  000501d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000501d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00050204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016c9e  00000000  00000000  00050247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037ec  00000000  00000000  00066ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  0006a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001016  00000000  00000000  0006bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002581b  00000000  00000000  0006cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c096  00000000  00000000  000923a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dece4  00000000  00000000  000ae437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000066d4  00000000  00000000  0018d11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001937f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd90 	.word	0x0800bd90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800bd90 	.word	0x0800bd90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b6b      	ldr	r3, [pc, #428]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6a      	ldr	r2, [pc, #424]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5c      	ldr	r2, [pc, #368]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	484b      	ldr	r0, [pc, #300]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f34:	f003 fe4e 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4847      	ldr	r0, [pc, #284]	; (8001064 <_7SEG_GPIO_Init+0x1c0>)
 8000f46:	f003 fe45 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4842      	ldr	r0, [pc, #264]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f56:	f003 fe3d 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	483e      	ldr	r0, [pc, #248]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f66:	f003 fe35 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	483c      	ldr	r0, [pc, #240]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f78:	f003 fe2c 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4837      	ldr	r0, [pc, #220]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f8a:	f003 fe23 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4831      	ldr	r0, [pc, #196]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f9c:	f003 fe1a 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482d      	ldr	r0, [pc, #180]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000fac:	f003 fe12 	bl	8004bd4 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fbe:	f003 fe09 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4827      	ldr	r0, [pc, #156]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fd0:	f003 fe00 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fe2:	f003 fdf7 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000ff4:	f003 fdee 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001006:	f003 fde5 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001018:	f003 fddc 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800102a:	f003 fdd3 	bl	8004bd4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 800102e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001032:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800103c:	f003 fdca 	bl	8004bd4 <HAL_GPIO_Init>


	_7SEG_SetNumber(DGT1, 0, ON);
 8001040:	2201      	movs	r2, #1
 8001042:	2100      	movs	r1, #0
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f813 	bl	8001070 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800104a:	2201      	movs	r2, #1
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f80e 	bl	8001070 <_7SEG_SetNumber>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800
 800106c:	40021000 	.word	0x40021000

08001070 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 81dc 	bne.w	800143c <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4bcb      	ldr	r3, [pc, #812]	; (80013b4 <_7SEG_SetNumber+0x344>)
 8001088:	fb83 2301 	smull	r2, r3, r3, r1
 800108c:	109a      	asrs	r2, r3, #2
 800108e:	17cb      	asrs	r3, r1, #31
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1aca      	subs	r2, r1, r3
 800109c:	2a09      	cmp	r2, #9
 800109e:	f200 81ba 	bhi.w	8001416 <_7SEG_SetNumber+0x3a6>
 80010a2:	a301      	add	r3, pc, #4	; (adr r3, 80010a8 <_7SEG_SetNumber+0x38>)
 80010a4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001175 	.word	0x08001175
 80010b4:	080011c7 	.word	0x080011c7
 80010b8:	08001219 	.word	0x08001219
 80010bc:	0800126b 	.word	0x0800126b
 80010c0:	080012bd 	.word	0x080012bd
 80010c4:	0800130f 	.word	0x0800130f
 80010c8:	08001361 	.word	0x08001361
 80010cc:	080013c5 	.word	0x080013c5
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d6:	48b8      	ldr	r0, [pc, #736]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010d8:	f003 ff30 	bl	8004f3c <HAL_GPIO_WritePin>
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	48b6      	ldr	r0, [pc, #728]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80010e4:	f003 ff2a 	bl	8004f3c <HAL_GPIO_WritePin>
 80010e8:	2200      	movs	r2, #0
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	48b2      	ldr	r0, [pc, #712]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010ee:	f003 ff25 	bl	8004f3c <HAL_GPIO_WritePin>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	48b0      	ldr	r0, [pc, #704]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010f8:	f003 ff20 	bl	8004f3c <HAL_GPIO_WritePin>
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	48af      	ldr	r0, [pc, #700]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001104:	f003 ff1a 	bl	8004f3c <HAL_GPIO_WritePin>
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	48ac      	ldr	r0, [pc, #688]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001110:	f003 ff14 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	48a7      	ldr	r0, [pc, #668]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800111c:	f003 ff0e 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001120:	e179      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001128:	48a4      	ldr	r0, [pc, #656]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800112a:	f003 ff07 	bl	8004f3c <HAL_GPIO_WritePin>
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	48a1      	ldr	r0, [pc, #644]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001134:	f003 ff02 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113e:	489e      	ldr	r0, [pc, #632]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001140:	f003 fefc 	bl	8004f3c <HAL_GPIO_WritePin>
 8001144:	2201      	movs	r2, #1
 8001146:	2120      	movs	r1, #32
 8001148:	489b      	ldr	r0, [pc, #620]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800114a:	f003 fef7 	bl	8004f3c <HAL_GPIO_WritePin>
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	489a      	ldr	r0, [pc, #616]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001156:	f003 fef1 	bl	8004f3c <HAL_GPIO_WritePin>
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4897      	ldr	r0, [pc, #604]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001162:	f003 feeb 	bl	8004f3c <HAL_GPIO_WritePin>
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	4892      	ldr	r0, [pc, #584]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800116e:	f003 fee5 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001172:	e150      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	488f      	ldr	r0, [pc, #572]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800117c:	f003 fede 	bl	8004f3c <HAL_GPIO_WritePin>
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001186:	488d      	ldr	r0, [pc, #564]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001188:	f003 fed8 	bl	8004f3c <HAL_GPIO_WritePin>
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4889      	ldr	r0, [pc, #548]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001194:	f003 fed2 	bl	8004f3c <HAL_GPIO_WritePin>
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4888      	ldr	r0, [pc, #544]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011a0:	f003 fecc 	bl	8004f3c <HAL_GPIO_WritePin>
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	4883      	ldr	r0, [pc, #524]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011aa:	f003 fec7 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80011ae:	2201      	movs	r2, #1
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4881      	ldr	r0, [pc, #516]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011b4:	f003 fec2 	bl	8004f3c <HAL_GPIO_WritePin>
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	4880      	ldr	r0, [pc, #512]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011c0:	f003 febc 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80011c4:	e127      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	487a      	ldr	r0, [pc, #488]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ce:	f003 feb5 	bl	8004f3c <HAL_GPIO_WritePin>
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4878      	ldr	r0, [pc, #480]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80011da:	f003 feaf 	bl	8004f3c <HAL_GPIO_WritePin>
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4875      	ldr	r0, [pc, #468]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011e4:	f003 feaa 	bl	8004f3c <HAL_GPIO_WritePin>
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4872      	ldr	r0, [pc, #456]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ee:	f003 fea5 	bl	8004f3c <HAL_GPIO_WritePin>
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	486f      	ldr	r0, [pc, #444]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011fa:	f003 fe9f 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	486e      	ldr	r0, [pc, #440]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001206:	f003 fe99 	bl	8004f3c <HAL_GPIO_WritePin>
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	486b      	ldr	r0, [pc, #428]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001212:	f003 fe93 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001216:	e0fe      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121e:	4868      	ldr	r0, [pc, #416]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001220:	f003 fe8c 	bl	8004f3c <HAL_GPIO_WritePin>
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4863      	ldr	r0, [pc, #396]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800122c:	f003 fe86 	bl	8004f3c <HAL_GPIO_WritePin>
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	4861      	ldr	r0, [pc, #388]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001238:	f003 fe80 	bl	8004f3c <HAL_GPIO_WritePin>
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	485d      	ldr	r0, [pc, #372]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001242:	f003 fe7b 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	485a      	ldr	r0, [pc, #360]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800124e:	f003 fe75 	bl	8004f3c <HAL_GPIO_WritePin>
 8001252:	2201      	movs	r2, #1
 8001254:	2120      	movs	r1, #32
 8001256:	4858      	ldr	r0, [pc, #352]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001258:	f003 fe70 	bl	8004f3c <HAL_GPIO_WritePin>
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001262:	4857      	ldr	r0, [pc, #348]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001264:	f003 fe6a 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001268:	e0d5      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	4851      	ldr	r0, [pc, #324]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001272:	f003 fe63 	bl	8004f3c <HAL_GPIO_WritePin>
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127c:	4850      	ldr	r0, [pc, #320]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800127e:	f003 fe5d 	bl	8004f3c <HAL_GPIO_WritePin>
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	484b      	ldr	r0, [pc, #300]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800128a:	f003 fe57 	bl	8004f3c <HAL_GPIO_WritePin>
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	4849      	ldr	r0, [pc, #292]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001294:	f003 fe52 	bl	8004f3c <HAL_GPIO_WritePin>
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800129e:	f003 fe4d 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80012aa:	f003 fe47 	bl	8004f3c <HAL_GPIO_WritePin>
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	4842      	ldr	r0, [pc, #264]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012b6:	f003 fe41 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80012ba:	e0ac      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	483d      	ldr	r0, [pc, #244]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012c4:	f003 fe3a 	bl	8004f3c <HAL_GPIO_WritePin>
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	483a      	ldr	r0, [pc, #232]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012ce:	f003 fe35 	bl	8004f3c <HAL_GPIO_WritePin>
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4838      	ldr	r0, [pc, #224]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012d8:	f003 fe30 	bl	8004f3c <HAL_GPIO_WritePin>
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e2:	4837      	ldr	r0, [pc, #220]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012e4:	f003 fe2a 	bl	8004f3c <HAL_GPIO_WritePin>
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012f0:	f003 fe24 	bl	8004f3c <HAL_GPIO_WritePin>
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fa:	482f      	ldr	r0, [pc, #188]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012fc:	f003 fe1e 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	482d      	ldr	r0, [pc, #180]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001308:	f003 fe18 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 800130c:	e083      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	482a      	ldr	r0, [pc, #168]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001316:	f003 fe11 	bl	8004f3c <HAL_GPIO_WritePin>
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001320:	4825      	ldr	r0, [pc, #148]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001322:	f003 fe0b 	bl	8004f3c <HAL_GPIO_WritePin>
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800132e:	f003 fe05 	bl	8004f3c <HAL_GPIO_WritePin>
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001338:	f003 fe00 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001342:	f003 fdfb 	bl	8004f3c <HAL_GPIO_WritePin>
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800134e:	f003 fdf5 	bl	8004f3c <HAL_GPIO_WritePin>
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800135a:	f003 fdef 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 800135e:	e05a      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001368:	f003 fde8 	bl	8004f3c <HAL_GPIO_WritePin>
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001374:	f003 fde2 	bl	8004f3c <HAL_GPIO_WritePin>
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800137e:	f003 fddd 	bl	8004f3c <HAL_GPIO_WritePin>
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001388:	f003 fdd8 	bl	8004f3c <HAL_GPIO_WritePin>
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001394:	f003 fdd2 	bl	8004f3c <HAL_GPIO_WritePin>
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80013a0:	f003 fdcc 	bl	8004f3c <HAL_GPIO_WritePin>
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80013ac:	f003 fdc6 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80013b0:	e031      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
 80013b2:	bf00      	nop
 80013b4:	66666667 	.word	0x66666667
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	48c8      	ldr	r0, [pc, #800]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013cc:	f003 fdb6 	bl	8004f3c <HAL_GPIO_WritePin>
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	48c6      	ldr	r0, [pc, #792]	; (80016f0 <_7SEG_SetNumber+0x680>)
 80013d8:	f003 fdb0 	bl	8004f3c <HAL_GPIO_WritePin>
 80013dc:	2200      	movs	r2, #0
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	48c2      	ldr	r0, [pc, #776]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013e2:	f003 fdab 	bl	8004f3c <HAL_GPIO_WritePin>
 80013e6:	2200      	movs	r2, #0
 80013e8:	2120      	movs	r1, #32
 80013ea:	48c0      	ldr	r0, [pc, #768]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013ec:	f003 fda6 	bl	8004f3c <HAL_GPIO_WritePin>
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	48bf      	ldr	r0, [pc, #764]	; (80016f4 <_7SEG_SetNumber+0x684>)
 80013f8:	f003 fda0 	bl	8004f3c <HAL_GPIO_WritePin>
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	48ba      	ldr	r0, [pc, #744]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001404:	f003 fd9a 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	48b9      	ldr	r0, [pc, #740]	; (80016f4 <_7SEG_SetNumber+0x684>)
 8001410:	f003 fd94 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001414:	bf00      	nop
		}

		if(dp == ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	48b2      	ldr	r0, [pc, #712]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001422:	f003 fd8b 	bl	8004f3c <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8001426:	e1ff      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 81fc 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	48ad      	ldr	r0, [pc, #692]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001436:	f003 fd81 	bl	8004f3c <HAL_GPIO_WritePin>
}
 800143a:	e1f5      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 81f2 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	4bac      	ldr	r3, [pc, #688]	; (80016f8 <_7SEG_SetNumber+0x688>)
 8001448:	fb83 2301 	smull	r2, r3, r3, r1
 800144c:	109a      	asrs	r2, r3, #2
 800144e:	17cb      	asrs	r3, r1, #31
 8001450:	1ad2      	subs	r2, r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	1aca      	subs	r2, r1, r3
 800145c:	2a09      	cmp	r2, #9
 800145e:	f200 81d0 	bhi.w	8001802 <_7SEG_SetNumber+0x792>
 8001462:	a301      	add	r3, pc, #4	; (adr r3, 8001468 <_7SEG_SetNumber+0x3f8>)
 8001464:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001468:	08001491 	.word	0x08001491
 800146c:	080014e7 	.word	0x080014e7
 8001470:	0800153d 	.word	0x0800153d
 8001474:	08001593 	.word	0x08001593
 8001478:	080015e9 	.word	0x080015e9
 800147c:	0800163f 	.word	0x0800163f
 8001480:	08001695 	.word	0x08001695
 8001484:	08001701 	.word	0x08001701
 8001488:	08001757 	.word	0x08001757
 800148c:	080017ad 	.word	0x080017ad
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4899      	ldr	r0, [pc, #612]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001498:	f003 fd50 	bl	8004f3c <HAL_GPIO_WritePin>
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4896      	ldr	r0, [pc, #600]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014a4:	f003 fd4a 	bl	8004f3c <HAL_GPIO_WritePin>
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4893      	ldr	r0, [pc, #588]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014b0:	f003 fd44 	bl	8004f3c <HAL_GPIO_WritePin>
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	4890      	ldr	r0, [pc, #576]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014bc:	f003 fd3e 	bl	8004f3c <HAL_GPIO_WritePin>
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	488d      	ldr	r0, [pc, #564]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014c8:	f003 fd38 	bl	8004f3c <HAL_GPIO_WritePin>
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	488a      	ldr	r0, [pc, #552]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014d4:	f003 fd32 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4887      	ldr	r0, [pc, #540]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014e0:	f003 fd2c 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80014e4:	e18d      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ec:	4883      	ldr	r0, [pc, #524]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014ee:	f003 fd25 	bl	8004f3c <HAL_GPIO_WritePin>
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	4880      	ldr	r0, [pc, #512]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014fa:	f003 fd1f 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	487d      	ldr	r0, [pc, #500]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001506:	f003 fd19 	bl	8004f3c <HAL_GPIO_WritePin>
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	487a      	ldr	r0, [pc, #488]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001512:	f003 fd13 	bl	8004f3c <HAL_GPIO_WritePin>
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	4877      	ldr	r0, [pc, #476]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800151e:	f003 fd0d 	bl	8004f3c <HAL_GPIO_WritePin>
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	4874      	ldr	r0, [pc, #464]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800152a:	f003 fd07 	bl	8004f3c <HAL_GPIO_WritePin>
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4871      	ldr	r0, [pc, #452]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001536:	f003 fd01 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 800153a:	e162      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	486e      	ldr	r0, [pc, #440]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001544:	f003 fcfa 	bl	8004f3c <HAL_GPIO_WritePin>
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	486b      	ldr	r0, [pc, #428]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001550:	f003 fcf4 	bl	8004f3c <HAL_GPIO_WritePin>
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	4868      	ldr	r0, [pc, #416]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800155c:	f003 fcee 	bl	8004f3c <HAL_GPIO_WritePin>
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4865      	ldr	r0, [pc, #404]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001568:	f003 fce8 	bl	8004f3c <HAL_GPIO_WritePin>
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4862      	ldr	r0, [pc, #392]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001574:	f003 fce2 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	485f      	ldr	r0, [pc, #380]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001580:	f003 fcdc 	bl	8004f3c <HAL_GPIO_WritePin>
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	485c      	ldr	r0, [pc, #368]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800158c:	f003 fcd6 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001590:	e137      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001598:	4858      	ldr	r0, [pc, #352]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800159a:	f003 fccf 	bl	8004f3c <HAL_GPIO_WritePin>
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015a6:	f003 fcc9 	bl	8004f3c <HAL_GPIO_WritePin>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	4852      	ldr	r0, [pc, #328]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015b2:	f003 fcc3 	bl	8004f3c <HAL_GPIO_WritePin>
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	484f      	ldr	r0, [pc, #316]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015be:	f003 fcbd 	bl	8004f3c <HAL_GPIO_WritePin>
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	484c      	ldr	r0, [pc, #304]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015ca:	f003 fcb7 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015d6:	f003 fcb1 	bl	8004f3c <HAL_GPIO_WritePin>
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4846      	ldr	r0, [pc, #280]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015e2:	f003 fcab 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80015e6:	e10c      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ee:	4843      	ldr	r0, [pc, #268]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015f0:	f003 fca4 	bl	8004f3c <HAL_GPIO_WritePin>
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4840      	ldr	r0, [pc, #256]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015fc:	f003 fc9e 	bl	8004f3c <HAL_GPIO_WritePin>
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001606:	483d      	ldr	r0, [pc, #244]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001608:	f003 fc98 	bl	8004f3c <HAL_GPIO_WritePin>
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001614:	f003 fc92 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4837      	ldr	r0, [pc, #220]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001620:	f003 fc8c 	bl	8004f3c <HAL_GPIO_WritePin>
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	4834      	ldr	r0, [pc, #208]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800162c:	f003 fc86 	bl	8004f3c <HAL_GPIO_WritePin>
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001636:	4831      	ldr	r0, [pc, #196]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001638:	f003 fc80 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 800163c:	e0e1      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	482d      	ldr	r0, [pc, #180]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001646:	f003 fc79 	bl	8004f3c <HAL_GPIO_WritePin>
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001652:	f003 fc73 	bl	8004f3c <HAL_GPIO_WritePin>
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4827      	ldr	r0, [pc, #156]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800165e:	f003 fc6d 	bl	8004f3c <HAL_GPIO_WritePin>
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800166a:	f003 fc67 	bl	8004f3c <HAL_GPIO_WritePin>
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001676:	f003 fc61 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001682:	f003 fc5b 	bl	8004f3c <HAL_GPIO_WritePin>
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800168e:	f003 fc55 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001692:	e0b6      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800169c:	f003 fc4e 	bl	8004f3c <HAL_GPIO_WritePin>
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016a8:	f003 fc48 	bl	8004f3c <HAL_GPIO_WritePin>
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016b4:	f003 fc42 	bl	8004f3c <HAL_GPIO_WritePin>
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016c0:	f003 fc3c 	bl	8004f3c <HAL_GPIO_WritePin>
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016cc:	f003 fc36 	bl	8004f3c <HAL_GPIO_WritePin>
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016d8:	f003 fc30 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016e4:	f003 fc2a 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80016e8:	e08b      	b.n	8001802 <_7SEG_SetNumber+0x792>
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020800 	.word	0x40020800
 80016f8:	66666667 	.word	0x66666667
 80016fc:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001708:	f003 fc18 	bl	8004f3c <HAL_GPIO_WritePin>
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	4847      	ldr	r0, [pc, #284]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001714:	f003 fc12 	bl	8004f3c <HAL_GPIO_WritePin>
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4844      	ldr	r0, [pc, #272]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001720:	f003 fc0c 	bl	8004f3c <HAL_GPIO_WritePin>
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4841      	ldr	r0, [pc, #260]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800172c:	f003 fc06 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	483e      	ldr	r0, [pc, #248]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001738:	f003 fc00 	bl	8004f3c <HAL_GPIO_WritePin>
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	483b      	ldr	r0, [pc, #236]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001744:	f003 fbfa 	bl	8004f3c <HAL_GPIO_WritePin>
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4838      	ldr	r0, [pc, #224]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001750:	f003 fbf4 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001754:	e055      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4834      	ldr	r0, [pc, #208]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800175e:	f003 fbed 	bl	8004f3c <HAL_GPIO_WritePin>
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4831      	ldr	r0, [pc, #196]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800176a:	f003 fbe7 	bl	8004f3c <HAL_GPIO_WritePin>
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001776:	f003 fbe1 	bl	8004f3c <HAL_GPIO_WritePin>
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001780:	482b      	ldr	r0, [pc, #172]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001782:	f003 fbdb 	bl	8004f3c <HAL_GPIO_WritePin>
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800178e:	f003 fbd5 	bl	8004f3c <HAL_GPIO_WritePin>
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	4825      	ldr	r0, [pc, #148]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800179a:	f003 fbcf 	bl	8004f3c <HAL_GPIO_WritePin>
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4822      	ldr	r0, [pc, #136]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017a6:	f003 fbc9 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 80017aa:	e02a      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017b4:	f003 fbc2 	bl	8004f3c <HAL_GPIO_WritePin>
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017c0:	f003 fbbc 	bl	8004f3c <HAL_GPIO_WritePin>
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4819      	ldr	r0, [pc, #100]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017cc:	f003 fbb6 	bl	8004f3c <HAL_GPIO_WritePin>
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4816      	ldr	r0, [pc, #88]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017d8:	f003 fbb0 	bl	8004f3c <HAL_GPIO_WritePin>
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017e4:	f003 fbaa 	bl	8004f3c <HAL_GPIO_WritePin>
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017f0:	f003 fba4 	bl	8004f3c <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017fc:	f003 fb9e 	bl	8004f3c <HAL_GPIO_WritePin>
				break;
 8001800:	bf00      	nop
		if(dp == ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001810:	f003 fb94 	bl	8004f3c <HAL_GPIO_WritePin>
}
 8001814:	e008      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001824:	f003 fb8a 	bl	8004f3c <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <CLCD_GPIO_Init+0x98>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8001856:	2301      	movs	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800186c:	f003 f9b2 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8001870:	2302      	movs	r3, #2
 8001872:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800187a:	f003 f9ab 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 800187e:	2304      	movs	r3, #4
 8001880:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4812      	ldr	r0, [pc, #72]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001888:	f003 f9a4 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 800188c:	2310      	movs	r3, #16
 800188e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	480e      	ldr	r0, [pc, #56]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001896:	f003 f99d 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 800189a:	2320      	movs	r3, #32
 800189c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018a4:	f003 f996 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018b2:	f003 f98f 	bl	8004bd4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018c0:	f003 f988 	bl	8004bd4 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000

080018d4 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da04      	bge.n	80018f0 <CLCD_Write_Instruction+0x1c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ee:	e003      	b.n	80018f8 <CLCD_Write_Instruction+0x24>
 80018f0:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018fa:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <CLCD_Write_Instruction+0x3c>
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800190e:	e003      	b.n	8001918 <CLCD_Write_Instruction+0x44>
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800191a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <CLCD_Write_Instruction+0x5c>
 8001926:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	e003      	b.n	8001938 <CLCD_Write_Instruction+0x64>
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f023 0320 	bic.w	r3, r3, #32
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800193a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <CLCD_Write_Instruction+0x7c>
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	e003      	b.n	8001958 <CLCD_Write_Instruction+0x84>
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f023 0310 	bic.w	r3, r3, #16
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195a:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <CLCD_Write_Instruction+0xd8>
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	e003      	b.n	80019b4 <CLCD_Write_Instruction+0xe0>
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019b6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <CLCD_Write_Instruction+0xf8>
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	e003      	b.n	80019d4 <CLCD_Write_Instruction+0x100>
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019d6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <CLCD_Write_Instruction+0x118>
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	e003      	b.n	80019f4 <CLCD_Write_Instruction+0x120>
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f023 0320 	bic.w	r3, r3, #32
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019f6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <CLCD_Write_Instruction+0x138>
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	e003      	b.n	8001a14 <CLCD_Write_Instruction+0x140>
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f023 0310 	bic.w	r3, r3, #16
 8001a14:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a16:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f001 ff73 	bl	8003940 <HAL_Delay>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da04      	bge.n	8001a84 <CLCD_Write_Display+0x1c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	e003      	b.n	8001a8c <CLCD_Write_Display+0x24>
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a8e:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <CLCD_Write_Display+0x3c>
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	e003      	b.n	8001aac <CLCD_Write_Display+0x44>
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aae:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <CLCD_Write_Display+0x5c>
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	e003      	b.n	8001acc <CLCD_Write_Display+0x64>
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ace:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <CLCD_Write_Display+0x7c>
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	e003      	b.n	8001aec <CLCD_Write_Display+0x84>
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f023 0310 	bic.w	r3, r3, #16
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aee:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <CLCD_Write_Display+0xd8>
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3e:	e003      	b.n	8001b48 <CLCD_Write_Display+0xe0>
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b4a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <CLCD_Write_Display+0xf8>
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5e:	e003      	b.n	8001b68 <CLCD_Write_Display+0x100>
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b6a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <CLCD_Write_Display+0x118>
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	e003      	b.n	8001b88 <CLCD_Write_Display+0x120>
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f023 0320 	bic.w	r3, r3, #32
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b8a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <CLCD_Write_Display+0x138>
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	e003      	b.n	8001ba8 <CLCD_Write_Display+0x140>
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f023 0310 	bic.w	r3, r3, #16
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001baa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bbe:	f023 0302 	bic.w	r3, r3, #2
 8001bc2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f001 fea9 	bl	8003940 <HAL_Delay>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <CLCD_Gotoxy+0x1c>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d007      	beq.n	8001c26 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 8001c16:	e00d      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3b80      	subs	r3, #128	; 0x80
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe58 	bl	80018d4 <CLCD_Write_Instruction>
 8001c24:	e006      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3b40      	subs	r3, #64	; 0x40
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe51 	bl	80018d4 <CLCD_Write_Instruction>
 8001c32:	bf00      	nop
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 8001c50:	79ba      	ldrb	r2, [r7, #6]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffd0 	bl	8001bfc <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff feff 	bl	8001a68 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ef      	bne.n	8001c5c <CLCD_Puts+0x20>
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <CLCD_Init>:

void CLCD_Init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f001 fe58 	bl	8003940 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c90:	2028      	movs	r0, #40	; 0x28
 8001c92:	f7ff fe1f 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001c96:	200a      	movs	r0, #10
 8001c98:	f001 fe52 	bl	8003940 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c9c:	2028      	movs	r0, #40	; 0x28
 8001c9e:	f7ff fe19 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f001 fe4c 	bl	8003940 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001ca8:	200c      	movs	r0, #12
 8001caa:	f7ff fe13 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 8001cae:	2006      	movs	r0, #6
 8001cb0:	f7ff fe10 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff fe0d 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fe0a 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fe07 	bl	80018d4 <CLCD_Write_Instruction>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <VS1003_SPI_Init>:

static SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void VS1003_SPI_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	/* SPI2 clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <VS1003_SPI_Init+0x88>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <VS1003_SPI_Init+0x88>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <VS1003_SPI_Init+0x88>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

	hspi2.Instance = SPI2;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <VS1003_SPI_Init+0x90>)
 8001cf2:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001cf6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cfa:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0;
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <VS1003_SPI_Init+0x8c>)
 8001d3c:	f004 fe06 	bl	800694c <HAL_SPI_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <VS1003_SPI_Init+0x7e>
	{
		Error_Handler();
 8001d46:	f000 fedd 	bl	8002b04 <Error_Handler>
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	200001f0 	.word	0x200001f0
 8001d5c:	40003800 	.word	0x40003800

08001d60 <VS1003_Init>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void VS1003_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <VS1003_Init+0x10c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <VS1003_Init+0x10c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <VS1003_Init+0x10c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <VS1003_Init+0x10c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <VS1003_Init+0x10c>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <VS1003_Init+0x10c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <VS1003_Init+0x10c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <VS1003_Init+0x10c>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <VS1003_Init+0x10c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]

	/* /CS */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;//GPIO_PULLUP //GPIO_NOPULL
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4827      	ldr	r0, [pc, #156]	; (8001e70 <VS1003_Init+0x110>)
 8001dd4:	f002 fefe 	bl	8004bd4 <HAL_GPIO_Init>

	/* XDCS */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	4824      	ldr	r0, [pc, #144]	; (8001e74 <VS1003_Init+0x114>)
 8001de4:	f002 fef6 	bl	8004bd4 <HAL_GPIO_Init>

	/* XRESET */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4619      	mov	r1, r3
 8001df2:	4820      	ldr	r0, [pc, #128]	; (8001e74 <VS1003_Init+0x114>)
 8001df4:	f002 feee 	bl	8004bd4 <HAL_GPIO_Init>

	/* DREQ */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	481c      	ldr	r0, [pc, #112]	; (8001e78 <VS1003_Init+0x118>)
 8001e08:	f002 fee4 	bl	8004bd4 <HAL_GPIO_Init>
	/**SPI2 GPIO Configuration
	PB10     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8001e0c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001e10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	4811      	ldr	r0, [pc, #68]	; (8001e70 <VS1003_Init+0x110>)
 8001e2a:	f002 fed3 	bl	8004bd4 <HAL_GPIO_Init>

	MP3_RESET(0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4810      	ldr	r0, [pc, #64]	; (8001e74 <VS1003_Init+0x114>)
 8001e34:	f003 f882 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f001 fd81 	bl	8003940 <HAL_Delay>
	MP3_RESET(1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2140      	movs	r1, #64	; 0x40
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <VS1003_Init+0x114>)
 8001e44:	f003 f87a 	bl	8004f3c <HAL_GPIO_WritePin>

	MP3_DCS(1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2110      	movs	r1, #16
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <VS1003_Init+0x114>)
 8001e4e:	f003 f875 	bl	8004f3c <HAL_GPIO_WritePin>
	MP3_CCS(1);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <VS1003_Init+0x110>)
 8001e5a:	f003 f86f 	bl	8004f3c <HAL_GPIO_WritePin>

	VS1003_SPI_Init();
 8001e5e:	f7ff ff35 	bl	8001ccc <VS1003_SPI_Init>
}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020800 	.word	0x40020800

08001e7c <VS1003_SPI_SetSpeed>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static void VS1003_SPI_SetSpeed(uint8_t SpeedSet)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	hspi2.Instance = SPI2;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <VS1003_SPI_SetSpeed+0x80>)
 8001e8a:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001e8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e92:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c

	if(SpeedSet == SPI_SPEED_LOW)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <VS1003_SPI_SetSpeed+0x5e>
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ed4:	2218      	movs	r2, #24
 8001ed6:	61da      	str	r2, [r3, #28]
 8001ed8:	e002      	b.n	8001ee0 <VS1003_SPI_SetSpeed+0x64>
	}
	else
	{
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001edc:	2210      	movs	r2, #16
 8001ede:	61da      	str	r2, [r3, #28]
	}

	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <VS1003_SPI_SetSpeed+0x7c>)
 8001ee2:	f004 fd33 	bl	800694c <HAL_SPI_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <VS1003_SPI_SetSpeed+0x74>
	{
		Error_Handler();
 8001eec:	f000 fe0a 	bl	8002b04 <Error_Handler>
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200001f0 	.word	0x200001f0
 8001efc:	40003800 	.word	0x40003800

08001f00 <VS1003_SPI_ReadWriteByte>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static uint16_t VS1003_SPI_ReadWriteByte(uint16_t TxData)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
	uint8_t RxData;
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&TxData, &RxData, 1, 10);
 8001f0a:	f107 020f 	add.w	r2, r7, #15
 8001f0e:	1db9      	adds	r1, r7, #6
 8001f10:	230a      	movs	r3, #10
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <VS1003_SPI_ReadWriteByte+0x28>)
 8001f18:	f004 fda1 	bl	8006a5e <HAL_SPI_TransmitReceive>
	return RxData;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b29b      	uxth	r3, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200001f0 	.word	0x200001f0

08001f2c <VS1003_WriteReg>:
* Output         : None
* Return         : None
* Attention	  : None
*******************************************************************************/
void VS1003_WriteReg(uint8_t reg, uint16_t value)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
	while(MP3_DREQ == 0);
 8001f3c:	bf00      	nop
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <VS1003_WriteReg+0x7c>)
 8001f42:	f002 ffe3 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f8      	beq.n	8001f3e <VS1003_WriteReg+0x12>

	VS1003_SPI_SetSpeed(SPI_SPEED_LOW);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ff95 	bl	8001e7c <VS1003_SPI_SetSpeed>
	MP3_DCS(1);
 8001f52:	2201      	movs	r2, #1
 8001f54:	2110      	movs	r1, #16
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <VS1003_WriteReg+0x80>)
 8001f58:	f002 fff0 	bl	8004f3c <HAL_GPIO_WritePin>
	MP3_CCS(0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f62:	4813      	ldr	r0, [pc, #76]	; (8001fb0 <VS1003_WriteReg+0x84>)
 8001f64:	f002 ffea 	bl	8004f3c <HAL_GPIO_WritePin>
	VS1003_SPI_ReadWriteByte(VS1003_WRITE_COMMAND);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff ffc9 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(reg);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffc4 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(value >> 8);
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ffbe 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(value);
 8001f84:	88bb      	ldrh	r3, [r7, #4]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ffba 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	MP3_CCS(1);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <VS1003_WriteReg+0x84>)
 8001f94:	f002 ffd2 	bl	8004f3c <HAL_GPIO_WritePin>
	VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff ff6f 	bl	8001e7c <VS1003_SPI_SetSpeed>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <VS1003_ReadReg>:
* Output         : None
* Return         : - value: �о�� ������
* Attention	  : None
*******************************************************************************/
uint16_t VS1003_ReadReg(uint8_t reg)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	uint16_t value;

	while(MP3_DREQ == 0);
 8001fbe:	bf00      	nop
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <VS1003_ReadReg+0x84>)
 8001fc4:	f002 ffa2 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f8      	beq.n	8001fc0 <VS1003_ReadReg+0xc>
	VS1003_SPI_SetSpeed(SPI_SPEED_LOW );
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff ff54 	bl	8001e7c <VS1003_SPI_SetSpeed>
	MP3_DCS(1);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	4818      	ldr	r0, [pc, #96]	; (800203c <VS1003_ReadReg+0x88>)
 8001fda:	f002 ffaf 	bl	8004f3c <HAL_GPIO_WritePin>
	MP3_CCS(0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <VS1003_ReadReg+0x8c>)
 8001fe6:	f002 ffa9 	bl	8004f3c <HAL_GPIO_WritePin>
	VS1003_SPI_ReadWriteByte(VS1003_READ_COMMAND);
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff ff88 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(reg);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff83 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	value = VS1003_SPI_ReadWriteByte(0xff);
 8001ffa:	20ff      	movs	r0, #255	; 0xff
 8001ffc:	f7ff ff80 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
 8002000:	4603      	mov	r3, r0
 8002002:	81fb      	strh	r3, [r7, #14]
	value = value << 8;
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	81fb      	strh	r3, [r7, #14]
	value |= VS1003_SPI_ReadWriteByte(0xff);
 800200a:	20ff      	movs	r0, #255	; 0xff
 800200c:	f7ff ff78 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	4313      	orrs	r3, r2
 8002018:	81fb      	strh	r3, [r7, #14]
	MP3_CCS(1);
 800201a:	2201      	movs	r2, #1
 800201c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002020:	4807      	ldr	r0, [pc, #28]	; (8002040 <VS1003_ReadReg+0x8c>)
 8002022:	f002 ff8b 	bl	8004f3c <HAL_GPIO_WritePin>
	VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff ff28 	bl	8001e7c <VS1003_SPI_SetSpeed>
	return value;
 800202c:	89fb      	ldrh	r3, [r7, #14]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40020800 	.word	0x40020800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400

08002044 <VS1003_ResetDecodeTime>:
* Output         : None
* Return         : None
* Attention	  : None
*******************************************************************************/
void VS1003_ResetDecodeTime(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8002048:	2100      	movs	r1, #0
 800204a:	2004      	movs	r0, #4
 800204c:	f7ff ff6e 	bl	8001f2c <VS1003_WriteReg>
	VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8002050:	2100      	movs	r1, #0
 8002052:	2004      	movs	r0, #4
 8002054:	f7ff ff6a 	bl	8001f2c <VS1003_WriteReg>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <VS1003_SoftReset>:
* Output         : None
* Return         : None
* Attention	  : None
*******************************************************************************/
void VS1003_SoftReset(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	uint8_t retry;

	while(MP3_DREQ == 0);
 8002062:	bf00      	nop
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	483e      	ldr	r0, [pc, #248]	; (8002160 <VS1003_SoftReset+0x104>)
 8002068:	f002 ff50 	bl	8004f0c <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f8      	beq.n	8002064 <VS1003_SoftReset+0x8>
	VS1003_SPI_ReadWriteByte(0xff);
 8002072:	20ff      	movs	r0, #255	; 0xff
 8002074:	f7ff ff44 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	retry = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	71fb      	strb	r3, [r7, #7]
	while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 800207c:	e00c      	b.n	8002098 <VS1003_SoftReset+0x3c>
	{
		VS1003_WriteReg(SPI_MODE, 0x0804);
 800207e:	f640 0104 	movw	r1, #2052	; 0x804
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff ff52 	bl	8001f2c <VS1003_WriteReg>
		HAL_Delay(2);
 8002088:	2002      	movs	r0, #2
 800208a:	f001 fc59 	bl	8003940 <HAL_Delay>
		if(retry++ > 100)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	71fa      	strb	r2, [r7, #7]
 8002094:	2b64      	cmp	r3, #100	; 0x64
 8002096:	d809      	bhi.n	80020ac <VS1003_SoftReset+0x50>
	while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ff8b 	bl	8001fb4 <VS1003_ReadReg>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	f640 0304 	movw	r3, #2052	; 0x804
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d1e9      	bne.n	800207e <VS1003_SoftReset+0x22>
 80020aa:	e000      	b.n	80020ae <VS1003_SoftReset+0x52>
		{
			break;
 80020ac:	bf00      	nop
		}
	}

	while(MP3_DREQ == 0);
 80020ae:	bf00      	nop
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	482b      	ldr	r0, [pc, #172]	; (8002160 <VS1003_SoftReset+0x104>)
 80020b4:	f002 ff2a 	bl	8004f0c <HAL_GPIO_ReadPin>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f8      	beq.n	80020b0 <VS1003_SoftReset+0x54>
	retry = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	71fb      	strb	r3, [r7, #7]
	while( VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 80020c2:	e009      	b.n	80020d8 <VS1003_SoftReset+0x7c>
	{
		VS1003_WriteReg(SPI_CLOCKF, 0x9800);
 80020c4:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80020c8:	2003      	movs	r0, #3
 80020ca:	f7ff ff2f 	bl	8001f2c <VS1003_WriteReg>
		if(retry++ > 100)
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	71fa      	strb	r2, [r7, #7]
 80020d4:	2b64      	cmp	r3, #100	; 0x64
 80020d6:	d807      	bhi.n	80020e8 <VS1003_SoftReset+0x8c>
	while( VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 80020d8:	2003      	movs	r0, #3
 80020da:	f7ff ff6b 	bl	8001fb4 <VS1003_ReadReg>
 80020de:	4603      	mov	r3, r0
 80020e0:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 80020e4:	d1ee      	bne.n	80020c4 <VS1003_SoftReset+0x68>
 80020e6:	e000      	b.n	80020ea <VS1003_SoftReset+0x8e>
		{
			break;
 80020e8:	bf00      	nop
		}
	}

	retry = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	71fb      	strb	r3, [r7, #7]
	while( VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 80020ee:	e009      	b.n	8002104 <VS1003_SoftReset+0xa8>
	{
		VS1003_WriteReg(SPI_AUDATA, 0xBB81);
 80020f0:	f64b 3181 	movw	r1, #48001	; 0xbb81
 80020f4:	2005      	movs	r0, #5
 80020f6:	f7ff ff19 	bl	8001f2c <VS1003_WriteReg>
		if(retry++ > 100)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	71fa      	strb	r2, [r7, #7]
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d809      	bhi.n	8002118 <VS1003_SoftReset+0xbc>
	while( VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 8002104:	2005      	movs	r0, #5
 8002106:	f7ff ff55 	bl	8001fb4 <VS1003_ReadReg>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	f64b 3381 	movw	r3, #48001	; 0xbb81
 8002112:	429a      	cmp	r2, r3
 8002114:	d1ec      	bne.n	80020f0 <VS1003_SoftReset+0x94>
 8002116:	e000      	b.n	800211a <VS1003_SoftReset+0xbe>
		{
			break;
 8002118:	bf00      	nop
		}
	}

	VS1003_WriteReg(SPI_VOL, 0x0000);
 800211a:	2100      	movs	r1, #0
 800211c:	200b      	movs	r0, #11
 800211e:	f7ff ff05 	bl	8001f2c <VS1003_WriteReg>
	VS1003_ResetDecodeTime();
 8002122:	f7ff ff8f 	bl	8002044 <VS1003_ResetDecodeTime>

	MP3_DCS(0);
 8002126:	2200      	movs	r2, #0
 8002128:	2110      	movs	r1, #16
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <VS1003_SoftReset+0x108>)
 800212c:	f002 ff06 	bl	8004f3c <HAL_GPIO_WritePin>
	VS1003_SPI_ReadWriteByte(0xFF);
 8002130:	20ff      	movs	r0, #255	; 0xff
 8002132:	f7ff fee5 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(0xFF);
 8002136:	20ff      	movs	r0, #255	; 0xff
 8002138:	f7ff fee2 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(0xFF);
 800213c:	20ff      	movs	r0, #255	; 0xff
 800213e:	f7ff fedf 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	VS1003_SPI_ReadWriteByte(0xFF);
 8002142:	20ff      	movs	r0, #255	; 0xff
 8002144:	f7ff fedc 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	MP3_DCS(1);
 8002148:	2201      	movs	r2, #1
 800214a:	2110      	movs	r1, #16
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <VS1003_SoftReset+0x108>)
 800214e:	f002 fef5 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002152:	2014      	movs	r0, #20
 8002154:	f001 fbf4 	bl	8003940 <HAL_Delay>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40020800 	.word	0x40020800
 8002164:	40020000 	.word	0x40020000

08002168 <VS1003_WriteData>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void VS1003_WriteData(uint8_t* buf)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	uint8_t count = 32;
 8002170:	2320      	movs	r3, #32
 8002172:	73fb      	strb	r3, [r7, #15]

	MP3_DCS(0);
 8002174:	2200      	movs	r2, #0
 8002176:	2110      	movs	r1, #16
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <VS1003_WriteData+0x50>)
 800217a:	f002 fedf 	bl	8004f3c <HAL_GPIO_WritePin>
	while(count--)
 800217e:	e007      	b.n	8002190 <VS1003_WriteData+0x28>
	{
		VS1003_SPI_ReadWriteByte(*buf++);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff feb8 	bl	8001f00 <VS1003_SPI_ReadWriteByte>
	while(count--)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	1e5a      	subs	r2, r3, #1
 8002194:	73fa      	strb	r2, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <VS1003_WriteData+0x18>
	}
	MP3_DCS(1);
 800219a:	2201      	movs	r2, #1
 800219c:	2110      	movs	r1, #16
 800219e:	4806      	ldr	r0, [pc, #24]	; (80021b8 <VS1003_WriteData+0x50>)
 80021a0:	f002 fecc 	bl	8004f3c <HAL_GPIO_WritePin>
	MP3_CCS(1);
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <VS1003_WriteData+0x54>)
 80021ac:	f002 fec6 	bl	8004f3c <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400

080021c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <MX_ADC1_Init+0xec>)
 80021d4:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <MX_ADC1_Init+0xf0>)
 80021d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <MX_ADC1_Init+0xec>)
 80021da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <MX_ADC1_Init+0xec>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <MX_ADC1_Init+0xec>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <MX_ADC1_Init+0xec>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <MX_ADC1_Init+0xec>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <MX_ADC1_Init+0xec>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <MX_ADC1_Init+0xec>)
 8002202:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <MX_ADC1_Init+0xf4>)
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <MX_ADC1_Init+0xec>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <MX_ADC1_Init+0xec>)
 800220e:	2204      	movs	r2, #4
 8002210:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <MX_ADC1_Init+0xec>)
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_ADC1_Init+0xec>)
 800221c:	2201      	movs	r2, #1
 800221e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002220:	4822      	ldr	r0, [pc, #136]	; (80022ac <MX_ADC1_Init+0xec>)
 8002222:	f001 fbb1 	bl	8003988 <HAL_ADC_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800222c:	f000 fc6a 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002230:	230a      	movs	r3, #10
 8002232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002234:	2301      	movs	r3, #1
 8002236:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002238:	2304      	movs	r3, #4
 800223a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	4619      	mov	r1, r3
 8002240:	481a      	ldr	r0, [pc, #104]	; (80022ac <MX_ADC1_Init+0xec>)
 8002242:	f001 fd13 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800224c:	f000 fc5a 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002250:	230c      	movs	r3, #12
 8002252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002254:	2302      	movs	r3, #2
 8002256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	4619      	mov	r1, r3
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <MX_ADC1_Init+0xec>)
 800225e:	f001 fd05 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002268:	f000 fc4c 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800226c:	230d      	movs	r3, #13
 800226e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002270:	2303      	movs	r3, #3
 8002272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002274:	463b      	mov	r3, r7
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <MX_ADC1_Init+0xec>)
 800227a:	f001 fcf7 	bl	8003c6c <HAL_ADC_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002284:	f000 fc3e 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002288:	2309      	movs	r3, #9
 800228a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800228c:	2304      	movs	r3, #4
 800228e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002290:	463b      	mov	r3, r7
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_ADC1_Init+0xec>)
 8002296:	f001 fce9 	bl	8003c6c <HAL_ADC_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80022a0:	f000 fc30 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000248 	.word	0x20000248
 80022b0:	40012000 	.word	0x40012000
 80022b4:	0f000001 	.word	0x0f000001

080022b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <HAL_ADC_MspInit+0x110>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d171      	bne.n	80023be <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_ADC_MspInit+0x114>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a3a      	ldr	r2, [pc, #232]	; (80023cc <HAL_ADC_MspInit+0x114>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_ADC_MspInit+0x114>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_ADC_MspInit+0x114>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a33      	ldr	r2, [pc, #204]	; (80023cc <HAL_ADC_MspInit+0x114>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_ADC_MspInit+0x114>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_ADC_MspInit+0x114>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <HAL_ADC_MspInit+0x114>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_ADC_MspInit+0x114>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800232e:	230d      	movs	r3, #13
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002332:	2303      	movs	r3, #3
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	4823      	ldr	r0, [pc, #140]	; (80023d0 <HAL_ADC_MspInit+0x118>)
 8002342:	f002 fc47 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002346:	2302      	movs	r3, #2
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234a:	2303      	movs	r3, #3
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	481e      	ldr	r0, [pc, #120]	; (80023d4 <HAL_ADC_MspInit+0x11c>)
 800235a:	f002 fc3b 	bl	8004bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_ADC_MspInit+0x124>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002366:	2200      	movs	r2, #0
 8002368:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002384:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002394:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023a2:	480d      	ldr	r0, [pc, #52]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 80023a4:	f002 f814 	bl	80043d0 <HAL_DMA_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80023ae:	f000 fba9 	bl	8002b04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_ADC_MspInit+0x120>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40012000 	.word	0x40012000
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	20000290 	.word	0x20000290
 80023dc:	40026410 	.word	0x40026410

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_DMA_Init+0x3c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <MX_DMA_Init+0x3c>)
 80023f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_DMA_Init+0x3c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2038      	movs	r0, #56	; 0x38
 8002408:	f001 ffab 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800240c:	2038      	movs	r0, #56	; 0x38
 800240e:	f001 ffc4 	bl	800439a <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a62      	ldr	r2, [pc, #392]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a4d      	ldr	r2, [pc, #308]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a46      	ldr	r2, [pc, #280]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <MX_GPIO_Init+0x1a8>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80024de:	2200      	movs	r2, #0
 80024e0:	21f7      	movs	r1, #247	; 0xf7
 80024e2:	483a      	ldr	r0, [pc, #232]	; (80025cc <MX_GPIO_Init+0x1ac>)
 80024e4:	f002 fd2a 	bl	8004f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2150      	movs	r1, #80	; 0x50
 80024ec:	4838      	ldr	r0, [pc, #224]	; (80025d0 <MX_GPIO_Init+0x1b0>)
 80024ee:	f002 fd25 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024f8:	4836      	ldr	r0, [pc, #216]	; (80025d4 <MX_GPIO_Init+0x1b4>)
 80024fa:	f002 fd1f 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80024fe:	23f7      	movs	r3, #247	; 0xf7
 8002500:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	482d      	ldr	r0, [pc, #180]	; (80025cc <MX_GPIO_Init+0x1ac>)
 8002516:	f002 fb5d 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800251a:	2308      	movs	r3, #8
 800251c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800251e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	4827      	ldr	r0, [pc, #156]	; (80025cc <MX_GPIO_Init+0x1ac>)
 8002530:	f002 fb50 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800253e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	4823      	ldr	r0, [pc, #140]	; (80025d8 <MX_GPIO_Init+0x1b8>)
 800254c:	f002 fb42 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002550:	2350      	movs	r3, #80	; 0x50
 8002552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	481a      	ldr	r0, [pc, #104]	; (80025d0 <MX_GPIO_Init+0x1b0>)
 8002568:	f002 fb34 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800256c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002572:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4816      	ldr	r0, [pc, #88]	; (80025dc <MX_GPIO_Init+0x1bc>)
 8002584:	f002 fb26 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	4619      	mov	r1, r3
 800259a:	480f      	ldr	r0, [pc, #60]	; (80025d8 <MX_GPIO_Init+0x1b8>)
 800259c:	f002 fb1a 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <MX_GPIO_Init+0x1b4>)
 80025ba:	f002 fb0b 	bl	8004bd4 <HAL_GPIO_Init>

}
 80025be:	bf00      	nop
 80025c0:	3730      	adds	r7, #48	; 0x30
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <MX_I2C1_Init+0x50>)
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_I2C1_Init+0x54>)
 80025e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_I2C1_Init+0x50>)
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_I2C1_Init+0x58>)
 80025ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_I2C1_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_I2C1_Init+0x50>)
 80025fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <MX_I2C1_Init+0x50>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_I2C1_Init+0x50>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <MX_I2C1_Init+0x50>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_I2C1_Init+0x50>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <MX_I2C1_Init+0x50>)
 800261e:	f002 fcd9 	bl	8004fd4 <HAL_I2C_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002628:	f000 fa6c 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200002f0 	.word	0x200002f0
 8002634:	40005400 	.word	0x40005400
 8002638:	00061a80 	.word	0x00061a80

0800263c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_I2C_MspInit+0x84>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d12b      	bne.n	80026b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267a:	23c0      	movs	r3, #192	; 0xc0
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800267e:	2312      	movs	r3, #18
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268a:	2304      	movs	r3, #4
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <HAL_I2C_MspInit+0x8c>)
 8002696:	f002 fa9d 	bl	8004bd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 80026a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_I2C_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	; 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40005400 	.word	0x40005400
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400

080026cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b092      	sub	sp, #72	; 0x48
 80026d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026d2:	f001 f8c3 	bl	800385c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d6:	f000 f929 	bl	800292c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026da:	f7ff fea1 	bl	8002420 <MX_GPIO_Init>
  MX_DMA_Init();
 80026de:	f7ff fe7f 	bl	80023e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80026e2:	f001 f81f 	bl	8003724 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80026e6:	f000 fe15 	bl	8003314 <MX_TIM7_Init>
  MX_TIM3_Init();
 80026ea:	f000 fc67 	bl	8002fbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80026ee:	f000 fcf9 	bl	80030e4 <MX_TIM4_Init>
  MX_TIM10_Init();
 80026f2:	f000 fe45 	bl	8003380 <MX_TIM10_Init>
  MX_TIM2_Init();
 80026f6:	f000 fbeb 	bl	8002ed0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80026fa:	f000 fd87 	bl	800320c <MX_TIM5_Init>
  MX_ADC1_Init();
 80026fe:	f7ff fd5f 	bl	80021c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002702:	f7ff ff6d 	bl	80025e0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002706:	f000 fa03 	bl	8002b10 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800270a:	f000 f979 	bl	8002a00 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002714:	4873      	ldr	r0, [pc, #460]	; (80028e4 <main+0x218>)
 8002716:	f002 fc11 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002720:	4870      	ldr	r0, [pc, #448]	; (80028e4 <main+0x218>)
 8002722:	f002 fc0b 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272c:	486d      	ldr	r0, [pc, #436]	; (80028e4 <main+0x218>)
 800272e:	f002 fc05 	bl	8004f3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	486c      	ldr	r0, [pc, #432]	; (80028e8 <main+0x21c>)
 8002738:	f002 fc00 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	2120      	movs	r1, #32
 8002740:	486a      	ldr	r0, [pc, #424]	; (80028ec <main+0x220>)
 8002742:	f002 fbfb 	bl	8004f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002746:	2201      	movs	r2, #1
 8002748:	2101      	movs	r1, #1
 800274a:	4868      	ldr	r0, [pc, #416]	; (80028ec <main+0x220>)
 800274c:	f002 fbf6 	bl	8004f3c <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8002750:	2201      	movs	r2, #1
 8002752:	4967      	ldr	r1, [pc, #412]	; (80028f0 <main+0x224>)
 8002754:	4867      	ldr	r0, [pc, #412]	; (80028f4 <main+0x228>)
 8002756:	f005 fd1a 	bl	800818e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800275a:	4867      	ldr	r0, [pc, #412]	; (80028f8 <main+0x22c>)
 800275c:	f004 fc5c 	bl	8007018 <HAL_TIM_Base_Start_IT>

  CLCD_GPIO_Init();
 8002760:	f7ff f868 	bl	8001834 <CLCD_GPIO_Init>
  CLCD_Init();
 8002764:	f7ff fa8f 	bl	8001c86 <CLCD_Init>
  CLCD_Puts(0, 0, "hello world");
 8002768:	4a64      	ldr	r2, [pc, #400]	; (80028fc <main+0x230>)
 800276a:	2100      	movs	r1, #0
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fa65 	bl	8001c3c <CLCD_Puts>

  _7SEG_GPIO_Init();
 8002772:	f7fe fb97 	bl	8000ea4 <_7SEG_GPIO_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002776:	2100      	movs	r1, #0
 8002778:	4861      	ldr	r0, [pc, #388]	; (8002900 <main+0x234>)
 800277a:	f004 fd17 	bl	80071ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800277e:	2104      	movs	r1, #4
 8002780:	485f      	ldr	r0, [pc, #380]	; (8002900 <main+0x234>)
 8002782:	f004 fd13 	bl	80071ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002786:	2108      	movs	r1, #8
 8002788:	485d      	ldr	r0, [pc, #372]	; (8002900 <main+0x234>)
 800278a:	f004 fd0f 	bl	80071ac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800278e:	2100      	movs	r1, #0
 8002790:	485c      	ldr	r0, [pc, #368]	; (8002904 <main+0x238>)
 8002792:	f004 fd0b 	bl	80071ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002796:	2104      	movs	r1, #4
 8002798:	485a      	ldr	r0, [pc, #360]	; (8002904 <main+0x238>)
 800279a:	f004 fd07 	bl	80071ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800279e:	2108      	movs	r1, #8
 80027a0:	4858      	ldr	r0, [pc, #352]	; (8002904 <main+0x238>)
 80027a2:	f004 fd03 	bl	80071ac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80027a6:	2100      	movs	r1, #0
 80027a8:	4857      	ldr	r0, [pc, #348]	; (8002908 <main+0x23c>)
 80027aa:	f004 fcff 	bl	80071ac <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80027ae:	2100      	movs	r1, #0
 80027b0:	4856      	ldr	r0, [pc, #344]	; (800290c <main+0x240>)
 80027b2:	f004 fcfb 	bl	80071ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80027b6:	210c      	movs	r1, #12
 80027b8:	4854      	ldr	r0, [pc, #336]	; (800290c <main+0x240>)
 80027ba:	f004 fcf7 	bl	80071ac <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, &adcval[0], 4);
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	2204      	movs	r2, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4852      	ldr	r0, [pc, #328]	; (8002910 <main+0x244>)
 80027c8:	f001 f922 	bl	8003a10 <HAL_ADC_Start_DMA>
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  TIM10->CCR1 = 1500;
 80027cc:	4b51      	ldr	r3, [pc, #324]	; (8002914 <main+0x248>)
 80027ce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->ARR = 500 -1;
 80027d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2 ->CCR1 = 250;
 80027de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027e2:	22fa      	movs	r2, #250	; 0xfa
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34

  VS1003_Init();
 80027e6:	f7ff fabb 	bl	8001d60 <VS1003_Init>
  VS1003_SoftReset();
 80027ea:	f7ff fc37 	bl	800205c <VS1003_SoftReset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t a = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t str[20];
  uint16_t ccr = 100;
 80027f4:	2364      	movs	r3, #100	; 0x64
 80027f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint8_t eeprom[10] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99};
 80027f8:	4a47      	ldr	r2, [pc, #284]	; (8002918 <main+0x24c>)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80027fe:	c303      	stmia	r3!, {r0, r1}
 8002800:	801a      	strh	r2, [r3, #0]

  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00,I2C_MEMADD_SIZE_8BIT, &eeprom[0],10,10);
 8002802:	230a      	movs	r3, #10
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	230a      	movs	r3, #10
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2301      	movs	r3, #1
 8002810:	2200      	movs	r2, #0
 8002812:	21a0      	movs	r1, #160	; 0xa0
 8002814:	4841      	ldr	r0, [pc, #260]	; (800291c <main+0x250>)
 8002816:	f002 fd21 	bl	800525c <HAL_I2C_Mem_Write>

  HAL_Delay(3);
 800281a:	2003      	movs	r0, #3
 800281c:	f001 f890 	bl	8003940 <HAL_Delay>
  for(int i  = 0; i<10;i++){
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
 8002824:	e007      	b.n	8002836 <main+0x16a>
	  eeprom[i] = 0x00;
 8002826:	1d3a      	adds	r2, r7, #4
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	4413      	add	r3, r2
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
  for(int i  = 0; i<10;i++){
 8002830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002832:	3301      	adds	r3, #1
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	2b09      	cmp	r3, #9
 800283a:	ddf4      	ble.n	8002826 <main+0x15a>
  }
  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00,I2C_MEMADD_SIZE_8BIT, &eeprom[0],10,10);
 800283c:	230a      	movs	r3, #10
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	230a      	movs	r3, #10
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	2200      	movs	r2, #0
 800284c:	21a0      	movs	r1, #160	; 0xa0
 800284e:	4833      	ldr	r0, [pc, #204]	; (800291c <main+0x250>)
 8002850:	f002 fdfe 	bl	8005450 <HAL_I2C_Mem_Read>
  sprintf(str,"%02x %02x %02x %02x %02x",eeprom[0],eeprom[1],eeprom[2],eeprom[3],eeprom[4]);
 8002854:	793b      	ldrb	r3, [r7, #4]
 8002856:	461c      	mov	r4, r3
 8002858:	797b      	ldrb	r3, [r7, #5]
 800285a:	461d      	mov	r5, r3
 800285c:	79bb      	ldrb	r3, [r7, #6]
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	7a39      	ldrb	r1, [r7, #8]
 8002862:	f107 0010 	add.w	r0, r7, #16
 8002866:	9102      	str	r1, [sp, #8]
 8002868:	9201      	str	r2, [sp, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	462b      	mov	r3, r5
 800286e:	4622      	mov	r2, r4
 8002870:	492b      	ldr	r1, [pc, #172]	; (8002920 <main+0x254>)
 8002872:	f007 f92f 	bl	8009ad4 <siprintf>
  CLCD_Puts(0, 0, str);
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	461a      	mov	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff f9dc 	bl	8001c3c <CLCD_Puts>
  sprintf(str,"%02x %02x %02x %02x %02x",eeprom[5],eeprom[6],eeprom[7],eeprom[8],eeprom[9]);
 8002884:	7a7b      	ldrb	r3, [r7, #9]
 8002886:	461c      	mov	r4, r3
 8002888:	7abb      	ldrb	r3, [r7, #10]
 800288a:	461d      	mov	r5, r3
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	7b3a      	ldrb	r2, [r7, #12]
 8002890:	7b79      	ldrb	r1, [r7, #13]
 8002892:	f107 0010 	add.w	r0, r7, #16
 8002896:	9102      	str	r1, [sp, #8]
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	462b      	mov	r3, r5
 800289e:	4622      	mov	r2, r4
 80028a0:	491f      	ldr	r1, [pc, #124]	; (8002920 <main+0x254>)
 80028a2:	f007 f917 	bl	8009ad4 <siprintf>
  CLCD_Puts(0, 1, str);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	461a      	mov	r2, r3
 80028ac:	2101      	movs	r1, #1
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff f9c4 	bl	8001c3c <CLCD_Puts>

  int i =0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  while(1)
  {
	  if(MP3_DREQ ==1)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	480b      	ldr	r0, [pc, #44]	; (80028e8 <main+0x21c>)
 80028bc:	f002 fb26 	bl	8004f0c <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d1f8      	bne.n	80028b8 <main+0x1ec>
	  {
		  if(sizeof(MP3_DATA) > i)
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <main+0x258>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d8f4      	bhi.n	80028b8 <main+0x1ec>
		  {
		  VS1003_WriteData(&MP3_DATA[i]);
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <main+0x25c>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fc47 	bl	8002168 <VS1003_WriteData>
		  i +=32;
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	3320      	adds	r3, #32
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
	  if(MP3_DREQ ==1)
 80028e0:	e7ea      	b.n	80028b8 <main+0x1ec>
 80028e2:	bf00      	nop
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020400 	.word	0x40020400
 80028f0:	20000344 	.word	0x20000344
 80028f4:	20000554 	.word	0x20000554
 80028f8:	200004c4 	.word	0x200004c4
 80028fc:	0800bda8 	.word	0x0800bda8
 8002900:	200003ec 	.word	0x200003ec
 8002904:	20000434 	.word	0x20000434
 8002908:	2000050c 	.word	0x2000050c
 800290c:	2000047c 	.word	0x2000047c
 8002910:	20000248 	.word	0x20000248
 8002914:	40014400 	.word	0x40014400
 8002918:	0800bdd0 	.word	0x0800bdd0
 800291c:	200002f0 	.word	0x200002f0
 8002920:	0800bdb4 	.word	0x0800bdb4
 8002924:	0002df80 	.word	0x0002df80
 8002928:	0800bddc 	.word	0x0800bddc

0800292c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b094      	sub	sp, #80	; 0x50
 8002930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2230      	movs	r2, #48	; 0x30
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f007 f92d 	bl	8009b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <SystemClock_Config+0xcc>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <SystemClock_Config+0xcc>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <SystemClock_Config+0xcc>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <SystemClock_Config+0xd0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a21      	ldr	r2, [pc, #132]	; (80029fc <SystemClock_Config+0xd0>)
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <SystemClock_Config+0xd0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002992:	2302      	movs	r3, #2
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800299c:	2304      	movs	r3, #4
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029a0:	23a8      	movs	r3, #168	; 0xa8
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a4:	2302      	movs	r3, #2
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029a8:	2304      	movs	r3, #4
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ac:	f107 0320 	add.w	r3, r7, #32
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fb33 	bl	800601c <HAL_RCC_OscConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029bc:	f000 f8a2 	bl	8002b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c0:	230f      	movs	r3, #15
 80029c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2105      	movs	r1, #5
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fd94 	bl	800650c <HAL_RCC_ClockConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029ea:	f000 f88b 	bl	8002b04 <Error_Handler>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3750      	adds	r7, #80	; 0x50
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000

08002a00 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2027      	movs	r0, #39	; 0x27
 8002a0a:	f001 fcaa 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a0e:	2027      	movs	r0, #39	; 0x27
 8002a10:	f001 fcc3 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	2037      	movs	r0, #55	; 0x37
 8002a1a:	f001 fca2 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a1e:	2037      	movs	r0, #55	; 0x37
 8002a20:	f001 fcbb 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	2009      	movs	r0, #9
 8002a2a:	f001 fc9a 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a2e:	2009      	movs	r0, #9
 8002a30:	f001 fcb3 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f001 fc92 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f001 fcab 	bl	800439a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2028      	movs	r0, #40	; 0x28
 8002a4a:	f001 fc8a 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a4e:	2028      	movs	r0, #40	; 0x28
 8002a50:	f001 fca3 	bl	800439a <HAL_NVIC_EnableIRQ>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_UART_RxCpltCallback+0x30>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10a      	bne.n	8002a80 <HAL_UART_RxCpltCallback+0x28>
  {
	  HAL_UART_Receive_IT(&huart3, &rx3_data, 10);
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <HAL_UART_RxCpltCallback+0x34>)
 8002a6e:	4808      	ldr	r0, [pc, #32]	; (8002a90 <HAL_UART_RxCpltCallback+0x38>)
 8002a70:	f005 fb8d 	bl	800818e <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 8002a74:	230a      	movs	r3, #10
 8002a76:	2201      	movs	r2, #1
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_UART_RxCpltCallback+0x34>)
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_UART_RxCpltCallback+0x38>)
 8002a7c:	f005 fafc 	bl	8008078 <HAL_UART_Transmit>
  }
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	20000344 	.word	0x20000344
 8002a90:	20000554 	.word	0x20000554

08002a94 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM7)
  {

  }
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_3)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <HAL_GPIO_EXTI_Callback+0x54>)
 8002abe:	f002 fa56 	bl	8004f6e <HAL_GPIO_TogglePin>
  }
  if(GPIO_Pin == GPIO_PIN_15)
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac8:	d104      	bne.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x2c>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ace:	480b      	ldr	r0, [pc, #44]	; (8002afc <HAL_GPIO_EXTI_Callback+0x54>)
 8002ad0:	f002 fa4d 	bl	8004f6e <HAL_GPIO_TogglePin>
  }
  if(GPIO_Pin == GPIO_PIN_4)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d104      	bne.n	8002ae4 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <HAL_GPIO_EXTI_Callback+0x54>)
 8002ae0:	f002 fa45 	bl	8004f6e <HAL_GPIO_TogglePin>
  }
  if(GPIO_Pin == GPIO_PIN_10)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aea:	d103      	bne.n	8002af4 <HAL_GPIO_EXTI_Callback+0x4c>
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002aec:	2101      	movs	r1, #1
 8002aee:	4804      	ldr	r0, [pc, #16]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x58>)
 8002af0:	f002 fa3d 	bl	8004f6e <HAL_GPIO_TogglePin>
  }

}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40020400 	.word	0x40020400

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <Error_Handler+0x8>
	...

08002b10 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b16:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <MX_SPI2_Init+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b30:	2202      	movs	r2, #2
 8002b32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b44:	2210      	movs	r2, #16
 8002b46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b5c:	220a      	movs	r2, #10
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b60:	4804      	ldr	r0, [pc, #16]	; (8002b74 <MX_SPI2_Init+0x64>)
 8002b62:	f003 fef3 	bl	800694c <HAL_SPI_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b6c:	f7ff ffca 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000348 	.word	0x20000348
 8002b78:	40003800 	.word	0x40003800

08002b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_SPI_MspInit+0x84>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d12c      	bne.n	8002bf8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_SPI_MspInit+0x88>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002bd6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002be8:	2305      	movs	r3, #5
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_SPI_MspInit+0x8c>)
 8002bf4:	f001 ffee 	bl	8004bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40003800 	.word	0x40003800
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400

08002c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_MspInit+0x4c>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c60:	e7fe      	b.n	8002c60 <NMI_Handler+0x4>

08002c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <MemManage_Handler+0x4>

08002c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca8:	f000 fe2a 	bl	8003900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002cb4:	2008      	movs	r0, #8
 8002cb6:	f002 f975 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002cc2:	2010      	movs	r0, #16
 8002cc4:	f002 f96e 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <USART3_IRQHandler+0x10>)
 8002cd2:	f005 fa81 	bl	80081d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000554 	.word	0x20000554

08002ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002ce4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ce8:	f002 f95c 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002cec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002cf0:	f002 f958 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM7_IRQHandler+0x10>)
 8002cfe:	f004 fb1d 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200004c4 	.word	0x200004c4

08002d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <DMA2_Stream0_IRQHandler+0x10>)
 8002d12:	f001 fcf5 	bl	8004700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000290 	.word	0x20000290

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3a:	f006 ff81 	bl	8009c40 <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
  return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d62:	e7fe      	b.n	8002d62 <_exit+0x12>

08002d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00a      	b.n	8002d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d76:	f3af 8000 	nop.w
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	60ba      	str	r2, [r7, #8]
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf0      	blt.n	8002d76 <_read+0x12>
  }

  return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e009      	b.n	8002dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	60ba      	str	r2, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbf1      	blt.n	8002db0 <_write+0x12>
  }
  return len;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_close>:

int _close(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_isatty>:

int _isatty(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f006 fee6 	bl	8009c40 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20020000 	.word	0x20020000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	200003a0 	.word	0x200003a0
 8002ea8:	200006f0 	.word	0x200006f0

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee4:	f107 0320 	add.w	r3, r7, #32
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
 8002efc:	615a      	str	r2, [r3, #20]
 8002efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f0a:	22a7      	movs	r2, #167	; 0xa7
 8002f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f28:	4823      	ldr	r0, [pc, #140]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f2a:	f004 f825 	bl	8006f78 <HAL_TIM_Base_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002f34:	f7ff fde6 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f42:	4619      	mov	r1, r3
 8002f44:	481c      	ldr	r0, [pc, #112]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f46:	f004 fbab 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002f50:	f7ff fdd8 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f54:	4818      	ldr	r0, [pc, #96]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f56:	f004 f8cf 	bl	80070f8 <HAL_TIM_PWM_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002f60:	f7ff fdd0 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f6c:	f107 0320 	add.w	r3, r7, #32
 8002f70:	4619      	mov	r1, r3
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f74:	f004 ffa0 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002f7e:	f7ff fdc1 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f82:	2360      	movs	r3, #96	; 0x60
 8002f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002f86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	2200      	movs	r2, #0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002f9c:	f004 fabe 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002fa6:	f7ff fdad 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002faa:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <MX_TIM2_Init+0xe8>)
 8002fac:	f000 fac4 	bl	8003538 <HAL_TIM_MspPostInit>

}
 8002fb0:	bf00      	nop
 8002fb2:	3738      	adds	r7, #56	; 0x38
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200003a4 	.word	0x200003a4

08002fbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd0:	f107 0320 	add.w	r3, r7, #32
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <MX_TIM3_Init+0x120>)
 8002fee:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <MX_TIM3_Init+0x124>)
 8002ff0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <MX_TIM3_Init+0x120>)
 8002ff4:	2209      	movs	r2, #9
 8002ff6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <MX_TIM3_Init+0x120>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000-1;
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <MX_TIM3_Init+0x120>)
 8003000:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003004:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003006:	4b35      	ldr	r3, [pc, #212]	; (80030dc <MX_TIM3_Init+0x120>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <MX_TIM3_Init+0x120>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003012:	4832      	ldr	r0, [pc, #200]	; (80030dc <MX_TIM3_Init+0x120>)
 8003014:	f003 ffb0 	bl	8006f78 <HAL_TIM_Base_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800301e:	f7ff fd71 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800302c:	4619      	mov	r1, r3
 800302e:	482b      	ldr	r0, [pc, #172]	; (80030dc <MX_TIM3_Init+0x120>)
 8003030:	f004 fb36 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800303a:	f7ff fd63 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800303e:	4827      	ldr	r0, [pc, #156]	; (80030dc <MX_TIM3_Init+0x120>)
 8003040:	f004 f85a 	bl	80070f8 <HAL_TIM_PWM_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800304a:	f7ff fd5b 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003056:	f107 0320 	add.w	r3, r7, #32
 800305a:	4619      	mov	r1, r3
 800305c:	481f      	ldr	r0, [pc, #124]	; (80030dc <MX_TIM3_Init+0x120>)
 800305e:	f004 ff2b 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003068:	f7ff fd4c 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800306c:	2360      	movs	r3, #96	; 0x60
 800306e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8003070:	f245 2307 	movw	r3, #20999	; 0x5207
 8003074:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	4619      	mov	r1, r3
 8003084:	4815      	ldr	r0, [pc, #84]	; (80030dc <MX_TIM3_Init+0x120>)
 8003086:	f004 fa49 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003090:	f7ff fd38 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.Pulse = 10500-1;
 8003094:	f642 1303 	movw	r3, #10499	; 0x2903
 8003098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2204      	movs	r2, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	480e      	ldr	r0, [pc, #56]	; (80030dc <MX_TIM3_Init+0x120>)
 80030a2:	f004 fa3b 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80030ac:	f7ff fd2a 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.Pulse = 5250-1;
 80030b0:	f241 4381 	movw	r3, #5249	; 0x1481
 80030b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2208      	movs	r2, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	4807      	ldr	r0, [pc, #28]	; (80030dc <MX_TIM3_Init+0x120>)
 80030be:	f004 fa2d 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 80030c8:	f7ff fd1c 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030cc:	4803      	ldr	r0, [pc, #12]	; (80030dc <MX_TIM3_Init+0x120>)
 80030ce:	f000 fa33 	bl	8003538 <HAL_TIM_MspPostInit>

}
 80030d2:	bf00      	nop
 80030d4:	3738      	adds	r7, #56	; 0x38
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200003ec 	.word	0x200003ec
 80030e0:	40000400 	.word	0x40000400

080030e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	f107 0320 	add.w	r3, r7, #32
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
 8003110:	615a      	str	r2, [r3, #20]
 8003112:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <MX_TIM4_Init+0x120>)
 8003116:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <MX_TIM4_Init+0x124>)
 8003118:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20-1;
 800311a:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <MX_TIM4_Init+0x120>)
 800311c:	2213      	movs	r2, #19
 800311e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b38      	ldr	r3, [pc, #224]	; (8003204 <MX_TIM4_Init+0x120>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <MX_TIM4_Init+0x120>)
 8003128:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800312c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312e:	4b35      	ldr	r3, [pc, #212]	; (8003204 <MX_TIM4_Init+0x120>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003134:	4b33      	ldr	r3, [pc, #204]	; (8003204 <MX_TIM4_Init+0x120>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800313a:	4832      	ldr	r0, [pc, #200]	; (8003204 <MX_TIM4_Init+0x120>)
 800313c:	f003 ff1c 	bl	8006f78 <HAL_TIM_Base_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003146:	f7ff fcdd 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003154:	4619      	mov	r1, r3
 8003156:	482b      	ldr	r0, [pc, #172]	; (8003204 <MX_TIM4_Init+0x120>)
 8003158:	f004 faa2 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003162:	f7ff fccf 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003166:	4827      	ldr	r0, [pc, #156]	; (8003204 <MX_TIM4_Init+0x120>)
 8003168:	f003 ffc6 	bl	80070f8 <HAL_TIM_PWM_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003172:	f7ff fcc7 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	4619      	mov	r1, r3
 8003184:	481f      	ldr	r0, [pc, #124]	; (8003204 <MX_TIM4_Init+0x120>)
 8003186:	f004 fe97 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003190:	f7ff fcb8 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003194:	2360      	movs	r3, #96	; 0x60
 8003196:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 8003198:	f245 2307 	movw	r3, #20999	; 0x5207
 800319c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2200      	movs	r2, #0
 80031aa:	4619      	mov	r1, r3
 80031ac:	4815      	ldr	r0, [pc, #84]	; (8003204 <MX_TIM4_Init+0x120>)
 80031ae:	f004 f9b5 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80031b8:	f7ff fca4 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.Pulse = 10500-1;
 80031bc:	f642 1303 	movw	r3, #10499	; 0x2903
 80031c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	2204      	movs	r2, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	480e      	ldr	r0, [pc, #56]	; (8003204 <MX_TIM4_Init+0x120>)
 80031ca:	f004 f9a7 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80031d4:	f7ff fc96 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.Pulse = 5250-1;
 80031d8:	f241 4381 	movw	r3, #5249	; 0x1481
 80031dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	2208      	movs	r2, #8
 80031e2:	4619      	mov	r1, r3
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <MX_TIM4_Init+0x120>)
 80031e6:	f004 f999 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80031f0:	f7ff fc88 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031f4:	4803      	ldr	r0, [pc, #12]	; (8003204 <MX_TIM4_Init+0x120>)
 80031f6:	f000 f99f 	bl	8003538 <HAL_TIM_MspPostInit>

}
 80031fa:	bf00      	nop
 80031fc:	3738      	adds	r7, #56	; 0x38
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000434 	.word	0x20000434
 8003208:	40000800 	.word	0x40000800

0800320c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003220:	f107 0320 	add.w	r3, r7, #32
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
 8003238:	615a      	str	r2, [r3, #20]
 800323a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800323c:	4b33      	ldr	r3, [pc, #204]	; (800330c <MX_TIM5_Init+0x100>)
 800323e:	4a34      	ldr	r2, [pc, #208]	; (8003310 <MX_TIM5_Init+0x104>)
 8003240:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <MX_TIM5_Init+0x100>)
 8003244:	2253      	movs	r2, #83	; 0x53
 8003246:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <MX_TIM5_Init+0x100>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <MX_TIM5_Init+0x100>)
 8003250:	f242 720f 	movw	r2, #9999	; 0x270f
 8003254:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003256:	4b2d      	ldr	r3, [pc, #180]	; (800330c <MX_TIM5_Init+0x100>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_TIM5_Init+0x100>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003262:	482a      	ldr	r0, [pc, #168]	; (800330c <MX_TIM5_Init+0x100>)
 8003264:	f003 fe88 	bl	8006f78 <HAL_TIM_Base_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800326e:	f7ff fc49 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327c:	4619      	mov	r1, r3
 800327e:	4823      	ldr	r0, [pc, #140]	; (800330c <MX_TIM5_Init+0x100>)
 8003280:	f004 fa0e 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800328a:	f7ff fc3b 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800328e:	481f      	ldr	r0, [pc, #124]	; (800330c <MX_TIM5_Init+0x100>)
 8003290:	f003 ff32 	bl	80070f8 <HAL_TIM_PWM_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800329a:	f7ff fc33 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032a6:	f107 0320 	add.w	r3, r7, #32
 80032aa:	4619      	mov	r1, r3
 80032ac:	4817      	ldr	r0, [pc, #92]	; (800330c <MX_TIM5_Init+0x100>)
 80032ae:	f004 fe03 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80032b8:	f7ff fc24 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032bc:	2360      	movs	r3, #96	; 0x60
 80032be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80032c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	2200      	movs	r2, #0
 80032d2:	4619      	mov	r1, r3
 80032d4:	480d      	ldr	r0, [pc, #52]	; (800330c <MX_TIM5_Init+0x100>)
 80032d6:	f004 f921 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80032e0:	f7ff fc10 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	220c      	movs	r2, #12
 80032ec:	4619      	mov	r1, r3
 80032ee:	4807      	ldr	r0, [pc, #28]	; (800330c <MX_TIM5_Init+0x100>)
 80032f0:	f004 f914 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80032fa:	f7ff fc03 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <MX_TIM5_Init+0x100>)
 8003300:	f000 f91a 	bl	8003538 <HAL_TIM_MspPostInit>

}
 8003304:	bf00      	nop
 8003306:	3738      	adds	r7, #56	; 0x38
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000047c 	.word	0x2000047c
 8003310:	40000c00 	.word	0x40000c00

08003314 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331a:	463b      	mov	r3, r7
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <MX_TIM7_Init+0x64>)
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <MX_TIM7_Init+0x68>)
 8003326:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <MX_TIM7_Init+0x64>)
 800332a:	f242 720f 	movw	r2, #9999	; 0x270f
 800332e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <MX_TIM7_Init+0x64>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <MX_TIM7_Init+0x64>)
 8003338:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800333c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <MX_TIM7_Init+0x64>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <MX_TIM7_Init+0x64>)
 8003346:	f003 fe17 	bl	8006f78 <HAL_TIM_Base_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003350:	f7ff fbd8 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800335c:	463b      	mov	r3, r7
 800335e:	4619      	mov	r1, r3
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_TIM7_Init+0x64>)
 8003362:	f004 fda9 	bl	8007eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800336c:	f7ff fbca 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200004c4 	.word	0x200004c4
 800337c:	40001400 	.word	0x40001400

08003380 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
 8003394:	615a      	str	r2, [r3, #20]
 8003396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <MX_TIM10_Init+0x94>)
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <MX_TIM10_Init+0x98>)
 800339c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 336-1;
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <MX_TIM10_Init+0x94>)
 80033a0:	f240 124f 	movw	r2, #335	; 0x14f
 80033a4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <MX_TIM10_Init+0x94>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <MX_TIM10_Init+0x94>)
 80033ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80033b2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_TIM10_Init+0x94>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <MX_TIM10_Init+0x94>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80033c0:	4814      	ldr	r0, [pc, #80]	; (8003414 <MX_TIM10_Init+0x94>)
 80033c2:	f003 fdd9 	bl	8006f78 <HAL_TIM_Base_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80033cc:	f7ff fb9a 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80033d0:	4810      	ldr	r0, [pc, #64]	; (8003414 <MX_TIM10_Init+0x94>)
 80033d2:	f003 fe91 	bl	80070f8 <HAL_TIM_PWM_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80033dc:	f7ff fb92 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033e0:	2360      	movs	r3, #96	; 0x60
 80033e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80033e4:	2364      	movs	r3, #100	; 0x64
 80033e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	2200      	movs	r2, #0
 80033f4:	4619      	mov	r1, r3
 80033f6:	4807      	ldr	r0, [pc, #28]	; (8003414 <MX_TIM10_Init+0x94>)
 80033f8:	f004 f890 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8003402:	f7ff fb7f 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003406:	4803      	ldr	r0, [pc, #12]	; (8003414 <MX_TIM10_Init+0x94>)
 8003408:	f000 f896 	bl	8003538 <HAL_TIM_MspPostInit>

}
 800340c:	bf00      	nop
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000050c 	.word	0x2000050c
 8003418:	40014400 	.word	0x40014400

0800341c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342c:	d10e      	bne.n	800344c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a3a      	ldr	r2, [pc, #232]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800344a:	e062      	b.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a34      	ldr	r2, [pc, #208]	; (8003524 <HAL_TIM_Base_MspInit+0x108>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	e04e      	b.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <HAL_TIM_Base_MspInit+0x10c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10e      	bne.n	800349c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	697b      	ldr	r3, [r7, #20]
}
 800349a:	e03a      	b.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM5)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a22      	ldr	r2, [pc, #136]	; (800352c <HAL_TIM_Base_MspInit+0x110>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
}
 80034c2:	e026      	b.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM7)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_TIM_Base_MspInit+0x114>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
}
 80034ea:	e012      	b.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a10      	ldr	r2, [pc, #64]	; (8003534 <HAL_TIM_Base_MspInit+0x118>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10d      	bne.n	8003512 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003504:	6453      	str	r3, [r2, #68]	; 0x44
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_TIM_Base_MspInit+0x104>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
}
 8003512:	bf00      	nop
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40001400 	.word	0x40001400
 8003534:	40014400 	.word	0x40014400

08003538 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	; 0x38
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d11e      	bne.n	8003598 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003576:	2320      	movs	r3, #32
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2300      	movs	r3, #0
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003586:	2301      	movs	r3, #1
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358e:	4619      	mov	r1, r3
 8003590:	485c      	ldr	r0, [pc, #368]	; (8003704 <HAL_TIM_MspPostInit+0x1cc>)
 8003592:	f001 fb1f 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003596:	e0ae      	b.n	80036f6 <HAL_TIM_MspPostInit+0x1be>
  else if(timHandle->Instance==TIM3)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a5a      	ldr	r2, [pc, #360]	; (8003708 <HAL_TIM_MspPostInit+0x1d0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d13c      	bne.n	800361c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a55      	ldr	r2, [pc, #340]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	4b4f      	ldr	r3, [pc, #316]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80035da:	2321      	movs	r3, #33	; 0x21
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ea:	2302      	movs	r3, #2
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f2:	4619      	mov	r1, r3
 80035f4:	4845      	ldr	r0, [pc, #276]	; (800370c <HAL_TIM_MspPostInit+0x1d4>)
 80035f6:	f001 faed 	bl	8004bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035fa:	2340      	movs	r3, #64	; 0x40
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800360a:	2302      	movs	r3, #2
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003612:	4619      	mov	r1, r3
 8003614:	483e      	ldr	r0, [pc, #248]	; (8003710 <HAL_TIM_MspPostInit+0x1d8>)
 8003616:	f001 fadd 	bl	8004bd4 <HAL_GPIO_Init>
}
 800361a:	e06c      	b.n	80036f6 <HAL_TIM_MspPostInit+0x1be>
  else if(timHandle->Instance==TIM4)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <HAL_TIM_MspPostInit+0x1dc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d11f      	bne.n	8003666 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a34      	ldr	r2, [pc, #208]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003642:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003654:	2302      	movs	r3, #2
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365c:	4619      	mov	r1, r3
 800365e:	482e      	ldr	r0, [pc, #184]	; (8003718 <HAL_TIM_MspPostInit+0x1e0>)
 8003660:	f001 fab8 	bl	8004bd4 <HAL_GPIO_Init>
}
 8003664:	e047      	b.n	80036f6 <HAL_TIM_MspPostInit+0x1be>
  else if(timHandle->Instance==TIM5)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <HAL_TIM_MspPostInit+0x1e4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d11e      	bne.n	80036ae <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800368c:	2309      	movs	r3, #9
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003698:	2300      	movs	r3, #0
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800369c:	2302      	movs	r3, #2
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a4:	4619      	mov	r1, r3
 80036a6:	4817      	ldr	r0, [pc, #92]	; (8003704 <HAL_TIM_MspPostInit+0x1cc>)
 80036a8:	f001 fa94 	bl	8004bd4 <HAL_GPIO_Init>
}
 80036ac:	e023      	b.n	80036f6 <HAL_TIM_MspPostInit+0x1be>
  else if(timHandle->Instance==TIM10)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_MspPostInit+0x1e8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d11e      	bne.n	80036f6 <HAL_TIM_MspPostInit+0x1be>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	6313      	str	r3, [r2, #48]	; 0x30
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_TIM_MspPostInit+0x1c8>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80036e6:	2303      	movs	r3, #3
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	4619      	mov	r1, r3
 80036f0:	4806      	ldr	r0, [pc, #24]	; (800370c <HAL_TIM_MspPostInit+0x1d4>)
 80036f2:	f001 fa6f 	bl	8004bd4 <HAL_GPIO_Init>
}
 80036f6:	bf00      	nop
 80036f8:	3738      	adds	r7, #56	; 0x38
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	40020000 	.word	0x40020000
 8003708:	40000400 	.word	0x40000400
 800370c:	40020400 	.word	0x40020400
 8003710:	40020800 	.word	0x40020800
 8003714:	40000800 	.word	0x40000800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40014400 	.word	0x40014400

08003724 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <MX_USART3_UART_Init+0x50>)
 800372c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 8003730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 800374a:	220c      	movs	r2, #12
 800374c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800375a:	4805      	ldr	r0, [pc, #20]	; (8003770 <MX_USART3_UART_Init+0x4c>)
 800375c:	f004 fc3c 	bl	8007fd8 <HAL_UART_Init>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003766:	f7ff f9cd 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000554 	.word	0x20000554
 8003774:	40004800 	.word	0x40004800

08003778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_UART_MspInit+0x84>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12c      	bne.n	80037f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_UART_MspInit+0x88>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e0:	2303      	movs	r3, #3
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037e4:	2307      	movs	r3, #7
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <HAL_UART_MspInit+0x8c>)
 80037f0:	f001 f9f0 	bl	8004bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80037f4:	bf00      	nop
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40004800 	.word	0x40004800
 8003800:	40023800 	.word	0x40023800
 8003804:	40020c00 	.word	0x40020c00

08003808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800380c:	f7ff fb4e 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003810:	480c      	ldr	r0, [pc, #48]	; (8003844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003818:	e002      	b.n	8003820 <LoopCopyDataInit>

0800381a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800381c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800381e:	3304      	adds	r3, #4

08003820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003824:	d3f9      	bcc.n	800381a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003828:	4c0a      	ldr	r4, [pc, #40]	; (8003854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800382c:	e001      	b.n	8003832 <LoopFillZerobss>

0800382e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800382e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003830:	3204      	adds	r2, #4

08003832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003834:	d3fb      	bcc.n	800382e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003836:	f006 fa09 	bl	8009c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800383a:	f7fe ff47 	bl	80026cc <main>
  bx  lr    
 800383e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003848:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800384c:	0803a104 	.word	0x0803a104
  ldr r2, =_sbss
 8003850:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003854:	200006ec 	.word	0x200006ec

08003858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003858:	e7fe      	b.n	8003858 <ADC_IRQHandler>
	...

0800385c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <HAL_Init+0x40>)
 8003866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_Init+0x40>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_Init+0x40>)
 8003872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_Init+0x40>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_Init+0x40>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003884:	2003      	movs	r0, #3
 8003886:	f000 fd61 	bl	800434c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388a:	200f      	movs	r0, #15
 800388c:	f000 f808 	bl	80038a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003890:	f7ff f9bc 	bl	8002c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_InitTick+0x54>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x58>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fd79 	bl	80043b6 <HAL_SYSTICK_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00e      	b.n	80038ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d80a      	bhi.n	80038ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d4:	2200      	movs	r2, #0
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f000 fd41 	bl	8004362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <HAL_InitTick+0x5c>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000008 	.word	0x20000008
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x20>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x24>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_IncTick+0x24>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000008 	.word	0x20000008
 8003924:	2000059c 	.word	0x2000059c

08003928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_GetTick+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000059c 	.word	0x2000059c

08003940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7ff ffee 	bl	8003928 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d005      	beq.n	8003966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_Delay+0x44>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003966:	bf00      	nop
 8003968:	f7ff ffde 	bl	8003928 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d8f7      	bhi.n	8003968 <HAL_Delay+0x28>
  {
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000008 	.word	0x20000008

08003988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e033      	b.n	8003a06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe fc86 	bl	80022b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d118      	bne.n	80039f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039ce:	f023 0302 	bic.w	r3, r3, #2
 80039d2:	f043 0202 	orr.w	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa68 	bl	8003eb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
 80039f6:	e001      	b.n	80039fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Start_DMA+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0e9      	b.n	8003c02 <HAL_ADC_Start_DMA+0x1f2>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d018      	beq.n	8003a76 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a54:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_ADC_Start_DMA+0x1fc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6d      	ldr	r2, [pc, #436]	; (8003c10 <HAL_ADC_Start_DMA+0x200>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9a      	lsrs	r2, r3, #18
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003a68:	e002      	b.n	8003a70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f9      	bne.n	8003a6a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a84:	d107      	bne.n	8003a96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 80a1 	bne.w	8003be8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ad0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d106      	bne.n	8003af4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f023 0206 	bic.w	r2, r3, #6
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_ADC_Start_DMA+0x204>)
 8003b04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4a43      	ldr	r2, [pc, #268]	; (8003c18 <HAL_ADC_Start_DMA+0x208>)
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_ADC_Start_DMA+0x20c>)
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	4a41      	ldr	r2, [pc, #260]	; (8003c20 <HAL_ADC_Start_DMA+0x210>)
 8003b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	334c      	adds	r3, #76	; 0x4c
 8003b52:	4619      	mov	r1, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f000 fce8 	bl	800452c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d12a      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <HAL_ADC_Start_DMA+0x214>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d015      	beq.n	8003b9e <HAL_ADC_Start_DMA+0x18e>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <HAL_ADC_Start_DMA+0x218>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d105      	bne.n	8003b88 <HAL_ADC_Start_DMA+0x178>
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_ADC_Start_DMA+0x204>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_ADC_Start_DMA+0x21c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d136      	bne.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_ADC_Start_DMA+0x204>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d130      	bne.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d129      	bne.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	e020      	b.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_ADC_Start_DMA+0x214>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d11b      	bne.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d114      	bne.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003be4:	609a      	str	r2, [r3, #8]
 8003be6:	e00b      	b.n	8003c00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f043 0210 	orr.w	r2, r3, #16
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	431bde83 	.word	0x431bde83
 8003c14:	40012300 	.word	0x40012300
 8003c18:	080040a9 	.word	0x080040a9
 8003c1c:	08004163 	.word	0x08004163
 8003c20:	0800417f 	.word	0x0800417f
 8003c24:	40012000 	.word	0x40012000
 8003c28:	40012100 	.word	0x40012100
 8003c2c:	40012200 	.word	0x40012200

08003c30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e105      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x228>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d925      	bls.n	8003ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1e      	subs	r3, #30
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3b1e      	subs	r3, #30
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e022      	b.n	8003d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4403      	add	r3, r0
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d824      	bhi.n	8003d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3b05      	subs	r3, #5
 8003d44:	221f      	movs	r2, #31
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	400a      	ands	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34
 8003d7a:	e04c      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b23      	subs	r3, #35	; 0x23
 8003d96:	221f      	movs	r2, #31
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b23      	subs	r3, #35	; 0x23
 8003dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
 8003dcc:	e023      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b41      	subs	r3, #65	; 0x41
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	; 0x41
 8003e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_ADC_ConfigChannel+0x234>)
 8003e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d123      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d003      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x1e6>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b11      	cmp	r3, #17
 8003e50:	d11b      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d111      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e66:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_ADC_ConfigChannel+0x240>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	0c9a      	lsrs	r2, r3, #18
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e7c:	e002      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f9      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <ADC_Init+0x1f0>)
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <ADC_Init+0x1f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d13c      	bne.n	800413c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d12b      	bne.n	8004134 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d127      	bne.n	8004134 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d119      	bne.n	8004134 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0220 	bic.w	r2, r2, #32
 800410e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fd7b 	bl	8003c30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800413a:	e00e      	b.n	800415a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff fd85 	bl	8003c58 <HAL_ADC_ErrorCallback>
}
 800414e:	e004      	b.n	800415a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fd67 	bl	8003c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff fd5a 	bl	8003c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60d3      	str	r3, [r2, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__NVIC_GetPriorityGrouping+0x18>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 0307 	and.w	r3, r3, #7
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db0b      	blt.n	800423a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <__NVIC_EnableIRQ+0x38>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2001      	movs	r0, #1
 8004232:	fa00 f202 	lsl.w	r2, r0, r2
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d301      	bcc.n	800431e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <SysTick_Config+0x40>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004326:	210f      	movs	r1, #15
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	f7ff ff8e 	bl	800424c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SysTick_Config+0x40>)
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <SysTick_Config+0x40>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	e000e010 	.word	0xe000e010

0800434c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff29 	bl	80041ac <__NVIC_SetPriorityGrouping>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004374:	f7ff ff3e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff8e 	bl	80042a0 <NVIC_EncodePriority>
 8004384:	4602      	mov	r2, r0
 8004386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff5d 	bl	800424c <__NVIC_SetPriority>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff31 	bl	8004210 <__NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffa2 	bl	8004308 <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043dc:	f7ff faa4 	bl	8003928 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e099      	b.n	8004520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800440c:	e00f      	b.n	800442e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800440e:	f7ff fa8b 	bl	8003928 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b05      	cmp	r3, #5
 800441a:	d908      	bls.n	800442e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e078      	b.n	8004520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e8      	bne.n	800440e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4b38      	ldr	r3, [pc, #224]	; (8004528 <HAL_DMA_Init+0x158>)
 8004448:	4013      	ands	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800445a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	2b04      	cmp	r3, #4
 8004486:	d107      	bne.n	8004498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	4313      	orrs	r3, r2
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d117      	bne.n	80044f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb01 	bl	8004adc <DMA_CheckFifoParam>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2240      	movs	r2, #64	; 0x40
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044ee:	2301      	movs	r3, #1
 80044f0:	e016      	b.n	8004520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fab8 	bl	8004a70 <DMA_CalcBaseAndBitshift>
 8004500:	4603      	mov	r3, r0
 8004502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	223f      	movs	r2, #63	; 0x3f
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	f010803f 	.word	0xf010803f

0800452c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_DMA_Start_IT+0x26>
 800454e:	2302      	movs	r3, #2
 8004550:	e040      	b.n	80045d4 <HAL_DMA_Start_IT+0xa8>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d12f      	bne.n	80045c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa4a 	bl	8004a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	223f      	movs	r2, #63	; 0x3f
 8004586:	409a      	lsls	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0216 	orr.w	r2, r2, #22
 800459a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e005      	b.n	80045d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
 80045d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ea:	f7ff f99d 	bl	8003928 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e052      	b.n	80046b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0216 	bic.w	r2, r2, #22
 800461c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_DMA_Abort+0x62>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0208 	bic.w	r2, r2, #8
 800464c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800465e:	e013      	b.n	8004688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004660:	f7ff f962 	bl	8003928 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b05      	cmp	r3, #5
 800466c:	d90c      	bls.n	8004688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2203      	movs	r2, #3
 8004678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e015      	b.n	80046b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e4      	bne.n	8004660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	223f      	movs	r2, #63	; 0x3f
 800469c:	409a      	lsls	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e00c      	b.n	80046f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2205      	movs	r2, #5
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800470c:	4b8e      	ldr	r3, [pc, #568]	; (8004948 <HAL_DMA_IRQHandler+0x248>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a8e      	ldr	r2, [pc, #568]	; (800494c <HAL_DMA_IRQHandler+0x24c>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0a9b      	lsrs	r3, r3, #10
 8004718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2208      	movs	r2, #8
 800472c:	409a      	lsls	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01a      	beq.n	800476c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d013      	beq.n	800476c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0204 	bic.w	r2, r2, #4
 8004752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	2208      	movs	r2, #8
 800475a:	409a      	lsls	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d012      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	2201      	movs	r2, #1
 8004790:	409a      	lsls	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	2204      	movs	r2, #4
 80047a8:	409a      	lsls	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d012      	beq.n	80047d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c4:	2204      	movs	r2, #4
 80047c6:	409a      	lsls	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0204 	orr.w	r2, r3, #4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	2210      	movs	r2, #16
 80047de:	409a      	lsls	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d043      	beq.n	8004870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d03c      	beq.n	8004870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	2210      	movs	r2, #16
 80047fc:	409a      	lsls	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d018      	beq.n	8004842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d108      	bne.n	8004830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d024      	beq.n	8004870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e01f      	b.n	8004870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
 8004840:	e016      	b.n	8004870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0208 	bic.w	r2, r2, #8
 800485e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2220      	movs	r2, #32
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 808f 	beq.w	80049a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8087 	beq.w	80049a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2220      	movs	r2, #32
 8004898:	409a      	lsls	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d136      	bne.n	8004918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0216 	bic.w	r2, r2, #22
 80048b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_DMA_IRQHandler+0x1da>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0208 	bic.w	r2, r2, #8
 80048e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	223f      	movs	r2, #63	; 0x3f
 80048f0:	409a      	lsls	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d07e      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
        }
        return;
 8004916:	e079      	b.n	8004a0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01d      	beq.n	8004962 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	2b00      	cmp	r3, #0
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
 8004944:	e02c      	b.n	80049a0 <HAL_DMA_IRQHandler+0x2a0>
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000
 800494c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d023      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
 8004960:	e01e      	b.n	80049a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10f      	bne.n	8004990 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0210 	bic.w	r2, r2, #16
 800497e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d032      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d022      	beq.n	80049fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2205      	movs	r2, #5
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d307      	bcc.n	80049e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f2      	bne.n	80049cc <HAL_DMA_IRQHandler+0x2cc>
 80049e6:	e000      	b.n	80049ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
 8004a0a:	e000      	b.n	8004a0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a0c:	bf00      	nop
    }
  }
}
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d108      	bne.n	8004a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a52:	e007      	b.n	8004a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	3b10      	subs	r3, #16
 8004a80:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a8a:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d909      	bls.n	8004ab2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	1d1a      	adds	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	659a      	str	r2, [r3, #88]	; 0x58
 8004ab0:	e007      	b.n	8004ac2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	aaaaaaab 	.word	0xaaaaaaab
 8004ad8:	08039d78 	.word	0x08039d78

08004adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11f      	bne.n	8004b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d856      	bhi.n	8004baa <DMA_CheckFifoParam+0xce>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <DMA_CheckFifoParam+0x28>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b27 	.word	0x08004b27
 8004b0c:	08004b15 	.word	0x08004b15
 8004b10:	08004bab 	.word	0x08004bab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d046      	beq.n	8004bae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b24:	e043      	b.n	8004bae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b2e:	d140      	bne.n	8004bb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b34:	e03d      	b.n	8004bb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d121      	bne.n	8004b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d837      	bhi.n	8004bb6 <DMA_CheckFifoParam+0xda>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <DMA_CheckFifoParam+0x70>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b63 	.word	0x08004b63
 8004b54:	08004b5d 	.word	0x08004b5d
 8004b58:	08004b75 	.word	0x08004b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b60:	e030      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d025      	beq.n	8004bba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b72:	e022      	b.n	8004bba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b7c:	d11f      	bne.n	8004bbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b82:	e01c      	b.n	8004bbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d903      	bls.n	8004b92 <DMA_CheckFifoParam+0xb6>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d003      	beq.n	8004b98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b90:	e018      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
      break;
 8004b96:	e015      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e00b      	b.n	8004bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8004baa:	bf00      	nop
 8004bac:	e00a      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e008      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e006      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e004      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bc2:	bf00      	nop
    }
  } 
  
  return status; 
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e16b      	b.n	8004ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	f040 815a 	bne.w	8004ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d005      	beq.n	8004c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d130      	bne.n	8004c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	2203      	movs	r2, #3
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 0201 	and.w	r2, r3, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d017      	beq.n	8004cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d123      	bne.n	8004d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	08da      	lsrs	r2, r3, #3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3208      	adds	r2, #8
 8004cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	220f      	movs	r2, #15
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	08da      	lsrs	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3208      	adds	r2, #8
 8004d12:	69b9      	ldr	r1, [r7, #24]
 8004d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80b4 	beq.w	8004ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	4b60      	ldr	r3, [pc, #384]	; (8004ee0 <HAL_GPIO_Init+0x30c>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	4a5f      	ldr	r2, [pc, #380]	; (8004ee0 <HAL_GPIO_Init+0x30c>)
 8004d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d68:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <HAL_GPIO_Init+0x30c>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d76:	4a5b      	ldr	r2, [pc, #364]	; (8004ee4 <HAL_GPIO_Init+0x310>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_GPIO_Init+0x314>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02b      	beq.n	8004dfa <HAL_GPIO_Init+0x226>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_GPIO_Init+0x318>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d025      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <HAL_GPIO_Init+0x31c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a4f      	ldr	r2, [pc, #316]	; (8004ef4 <HAL_GPIO_Init+0x320>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d019      	beq.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <HAL_GPIO_Init+0x324>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_GPIO_Init+0x216>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a4d      	ldr	r2, [pc, #308]	; (8004efc <HAL_GPIO_Init+0x328>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00d      	beq.n	8004de6 <HAL_GPIO_Init+0x212>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a4c      	ldr	r2, [pc, #304]	; (8004f00 <HAL_GPIO_Init+0x32c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <HAL_GPIO_Init+0x20e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a4b      	ldr	r2, [pc, #300]	; (8004f04 <HAL_GPIO_Init+0x330>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_GPIO_Init+0x20a>
 8004dda:	2307      	movs	r3, #7
 8004ddc:	e00e      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004dde:	2308      	movs	r3, #8
 8004de0:	e00c      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004de2:	2306      	movs	r3, #6
 8004de4:	e00a      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e008      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e006      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e004      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e002      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x228>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	f002 0203 	and.w	r2, r2, #3
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	4093      	lsls	r3, r2
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e0c:	4935      	ldr	r1, [pc, #212]	; (8004ee4 <HAL_GPIO_Init+0x310>)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e3e:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e44:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e68:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e6e:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e92:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ebc:	4a12      	ldr	r2, [pc, #72]	; (8004f08 <HAL_GPIO_Init+0x334>)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	f67f ae90 	bls.w	8004bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3724      	adds	r7, #36	; 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	40020800 	.word	0x40020800
 8004ef4:	40020c00 	.word	0x40020c00
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40021400 	.word	0x40021400
 8004f00:	40021800 	.word	0x40021800
 8004f04:	40021c00 	.word	0x40021c00
 8004f08:	40013c00 	.word	0x40013c00

08004f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f58:	e003      	b.n	8004f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	041a      	lsls	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f80:	887a      	ldrh	r2, [r7, #2]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	041a      	lsls	r2, r3, #16
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	400b      	ands	r3, r1
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	619a      	str	r2, [r3, #24]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd fd70 	bl	8002aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40013c00 	.word	0x40013c00

08004fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e12b      	b.n	800523e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd fb1e 	bl	800263c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005038:	f001 fc60 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 800503c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4a81      	ldr	r2, [pc, #516]	; (8005248 <HAL_I2C_Init+0x274>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d807      	bhi.n	8005058 <HAL_I2C_Init+0x84>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a80      	ldr	r2, [pc, #512]	; (800524c <HAL_I2C_Init+0x278>)
 800504c:	4293      	cmp	r3, r2
 800504e:	bf94      	ite	ls
 8005050:	2301      	movls	r3, #1
 8005052:	2300      	movhi	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e006      	b.n	8005066 <HAL_I2C_Init+0x92>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a7d      	ldr	r2, [pc, #500]	; (8005250 <HAL_I2C_Init+0x27c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	bf94      	ite	ls
 8005060:	2301      	movls	r3, #1
 8005062:	2300      	movhi	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0e7      	b.n	800523e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a78      	ldr	r2, [pc, #480]	; (8005254 <HAL_I2C_Init+0x280>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0c9b      	lsrs	r3, r3, #18
 8005078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a6a      	ldr	r2, [pc, #424]	; (8005248 <HAL_I2C_Init+0x274>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d802      	bhi.n	80050a8 <HAL_I2C_Init+0xd4>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3301      	adds	r3, #1
 80050a6:	e009      	b.n	80050bc <HAL_I2C_Init+0xe8>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	4a69      	ldr	r2, [pc, #420]	; (8005258 <HAL_I2C_Init+0x284>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	099b      	lsrs	r3, r3, #6
 80050ba:	3301      	adds	r3, #1
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	495c      	ldr	r1, [pc, #368]	; (8005248 <HAL_I2C_Init+0x274>)
 80050d8:	428b      	cmp	r3, r1
 80050da:	d819      	bhi.n	8005110 <HAL_I2C_Init+0x13c>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1e59      	subs	r1, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050f0:	400b      	ands	r3, r1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_I2C_Init+0x138>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1e59      	subs	r1, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	fbb1 f3f3 	udiv	r3, r1, r3
 8005104:	3301      	adds	r3, #1
 8005106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510a:	e051      	b.n	80051b0 <HAL_I2C_Init+0x1dc>
 800510c:	2304      	movs	r3, #4
 800510e:	e04f      	b.n	80051b0 <HAL_I2C_Init+0x1dc>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <HAL_I2C_Init+0x168>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1e58      	subs	r0, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	440b      	add	r3, r1
 8005126:	fbb0 f3f3 	udiv	r3, r0, r3
 800512a:	3301      	adds	r3, #1
 800512c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e012      	b.n	8005162 <HAL_I2C_Init+0x18e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e58      	subs	r0, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	0099      	lsls	r1, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005152:	3301      	adds	r3, #1
 8005154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_I2C_Init+0x196>
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_I2C_Init+0x1dc>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10e      	bne.n	8005190 <HAL_I2C_Init+0x1bc>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1e58      	subs	r0, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	440b      	add	r3, r1
 8005180:	fbb0 f3f3 	udiv	r3, r0, r3
 8005184:	3301      	adds	r3, #1
 8005186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	e00f      	b.n	80051b0 <HAL_I2C_Init+0x1dc>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e58      	subs	r0, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	0099      	lsls	r1, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a6:	3301      	adds	r3, #1
 80051a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	6809      	ldr	r1, [r1, #0]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6911      	ldr	r1, [r2, #16]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68d2      	ldr	r2, [r2, #12]
 80051ea:	4311      	orrs	r1, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	000186a0 	.word	0x000186a0
 800524c:	001e847f 	.word	0x001e847f
 8005250:	003d08ff 	.word	0x003d08ff
 8005254:	431bde83 	.word	0x431bde83
 8005258:	10624dd3 	.word	0x10624dd3

0800525c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005276:	f7fe fb57 	bl	8003928 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b20      	cmp	r3, #32
 8005286:	f040 80d9 	bne.w	800543c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2319      	movs	r3, #25
 8005290:	2201      	movs	r2, #1
 8005292:	496d      	ldr	r1, [pc, #436]	; (8005448 <HAL_I2C_Mem_Write+0x1ec>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fc8b 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0cc      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_Mem_Write+0x56>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0c5      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d007      	beq.n	80052d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2221      	movs	r2, #33	; 0x21
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2240      	movs	r2, #64	; 0x40
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a4d      	ldr	r2, [pc, #308]	; (800544c <HAL_I2C_Mem_Write+0x1f0>)
 8005318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800531a:	88f8      	ldrh	r0, [r7, #6]
 800531c:	893a      	ldrh	r2, [r7, #8]
 800531e:	8979      	ldrh	r1, [r7, #10]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fac2 	bl	80058b4 <I2C_RequestMemoryWrite>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d052      	beq.n	80053dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e081      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fd50 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b04      	cmp	r3, #4
 8005350:	d107      	bne.n	8005362 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06b      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_I2C_Mem_Write+0x180>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1aa      	bne.n	800533a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fd43 	bl	8005e74 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d107      	bne.n	800540c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e016      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	00100002 	.word	0x00100002
 800544c:	ffff0000 	.word	0xffff0000

08005450 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08c      	sub	sp, #48	; 0x30
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	461a      	mov	r2, r3
 800545e:	4603      	mov	r3, r0
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	460b      	mov	r3, r1
 8005464:	813b      	strh	r3, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800546a:	f7fe fa5d 	bl	8003928 <HAL_GetTick>
 800546e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b20      	cmp	r3, #32
 800547a:	f040 8214 	bne.w	80058a6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2319      	movs	r3, #25
 8005484:	2201      	movs	r2, #1
 8005486:	497b      	ldr	r1, [pc, #492]	; (8005674 <HAL_I2C_Mem_Read+0x224>)
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fb91 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	e207      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x56>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e200      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d007      	beq.n	80054cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2222      	movs	r2, #34	; 0x22
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a5b      	ldr	r2, [pc, #364]	; (8005678 <HAL_I2C_Mem_Read+0x228>)
 800550c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800550e:	88f8      	ldrh	r0, [r7, #6]
 8005510:	893a      	ldrh	r2, [r7, #8]
 8005512:	8979      	ldrh	r1, [r7, #10]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	4603      	mov	r3, r0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fa5e 	bl	80059e0 <I2C_RequestMemoryRead>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e1bc      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d113      	bne.n	800555e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e190      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b01      	cmp	r3, #1
 8005564:	d11b      	bne.n	800559e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e170      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d11b      	bne.n	80055de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	e150      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055f4:	e144      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	f200 80f1 	bhi.w	80057e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	2b01      	cmp	r3, #1
 8005606:	d123      	bne.n	8005650 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fc79 	bl	8005f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e145      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800564e:	e117      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	2b02      	cmp	r3, #2
 8005656:	d14e      	bne.n	80056f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2200      	movs	r2, #0
 8005660:	4906      	ldr	r1, [pc, #24]	; (800567c <HAL_I2C_Mem_Read+0x22c>)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 faa4 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e11a      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
 8005672:	bf00      	nop
 8005674:	00100002 	.word	0x00100002
 8005678:	ffff0000 	.word	0xffff0000
 800567c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f4:	e0c4      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2200      	movs	r2, #0
 80056fe:	496c      	ldr	r1, [pc, #432]	; (80058b0 <HAL_I2C_Mem_Read+0x460>)
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fa55 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0cb      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2200      	movs	r2, #0
 800575a:	4955      	ldr	r1, [pc, #340]	; (80058b0 <HAL_I2C_Mem_Read+0x460>)
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 fa27 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e09d      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057e0:	e04e      	b.n	8005880 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fb8c 	bl	8005f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e058      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d124      	bne.n	8005880 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	2b03      	cmp	r3, #3
 800583c:	d107      	bne.n	800584e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	f47f aeb6 	bne.w	80055f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3728      	adds	r7, #40	; 0x28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	00010004 	.word	0x00010004

080058b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	817b      	strh	r3, [r7, #10]
 80058c6:	460b      	mov	r3, r1
 80058c8:	813b      	strh	r3, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f960 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005904:	d103      	bne.n	800590e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e05f      	b.n	80059d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005912:	897b      	ldrh	r3, [r7, #10]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	492d      	ldr	r1, [pc, #180]	; (80059dc <I2C_RequestMemoryWrite+0x128>)
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f9bb 	bl	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04c      	b.n	80059d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005950:	6a39      	ldr	r1, [r7, #32]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fa46 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00d      	beq.n	800597a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	2b04      	cmp	r3, #4
 8005964:	d107      	bne.n	8005976 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e02b      	b.n	80059d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d105      	bne.n	800598c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	e021      	b.n	80059d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	6a39      	ldr	r1, [r7, #32]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa20 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d107      	bne.n	80059c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e005      	b.n	80059d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c6:	893b      	ldrh	r3, [r7, #8]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	00010002 	.word	0x00010002

080059e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	817b      	strh	r3, [r7, #10]
 80059f2:	460b      	mov	r3, r1
 80059f4:	813b      	strh	r3, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8c2 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d103      	bne.n	8005a4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e0aa      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	4952      	ldr	r1, [pc, #328]	; (8005bac <I2C_RequestMemoryRead+0x1cc>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f91d 	bl	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e097      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f9a8 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d107      	bne.n	8005ab2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e076      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	611a      	str	r2, [r3, #16]
 8005ac6:	e021      	b.n	8005b0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ac8:	893b      	ldrh	r3, [r7, #8]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	6a39      	ldr	r1, [r7, #32]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f982 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d107      	bne.n	8005afe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e050      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b02:	893b      	ldrh	r3, [r7, #8]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f967 	bl	8005de4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d107      	bne.n	8005b34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e035      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f82b 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d103      	bne.n	8005b78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e013      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b7c:	897b      	ldrh	r3, [r7, #10]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	4906      	ldr	r1, [pc, #24]	; (8005bac <I2C_RequestMemoryRead+0x1cc>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f886 	bl	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	00010002 	.word	0x00010002

08005bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc0:	e048      	b.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d044      	beq.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fd fead 	bl	8003928 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d139      	bne.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10d      	bne.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	43da      	mvns	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	e00c      	b.n	8005c20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4013      	ands	r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d116      	bne.n	8005c54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e023      	b.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10d      	bne.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	43da      	mvns	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf0c      	ite	eq
 8005c70:	2301      	moveq	r3, #1
 8005c72:	2300      	movne	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	e00c      	b.n	8005c94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	43da      	mvns	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4013      	ands	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d093      	beq.n	8005bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb2:	e071      	b.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc2:	d123      	bne.n	8005d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e067      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d041      	beq.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d14:	f7fd fe08 	bl	8003928 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d136      	bne.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d10c      	bne.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	43da      	mvns	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	e00b      	b.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	43da      	mvns	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e021      	b.n	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	0c1b      	lsrs	r3, r3, #16
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d10c      	bne.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	43da      	mvns	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e00b      	b.n	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	43da      	mvns	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf14      	ite	ne
 8005dce:	2301      	movne	r3, #1
 8005dd0:	2300      	moveq	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f af6d 	bne.w	8005cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df0:	e034      	b.n	8005e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f8e3 	bl	8005fbe <I2C_IsAcknowledgeFailed>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e034      	b.n	8005e6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d028      	beq.n	8005e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0a:	f7fd fd8d 	bl	8003928 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11d      	bne.n	8005e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b80      	cmp	r3, #128	; 0x80
 8005e2c:	d016      	beq.n	8005e5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f043 0220 	orr.w	r2, r3, #32
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e007      	b.n	8005e6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d1c3      	bne.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e80:	e034      	b.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f89b 	bl	8005fbe <I2C_IsAcknowledgeFailed>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e034      	b.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d028      	beq.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fd fd45 	bl	8003928 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11d      	bne.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d016      	beq.n	8005eec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e007      	b.n	8005efc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	d1c3      	bne.n	8005e82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f10:	e049      	b.n	8005fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d119      	bne.n	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e030      	b.n	8005fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f54:	f7fd fce8 	bl	8003928 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11d      	bne.n	8005fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d016      	beq.n	8005fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e007      	b.n	8005fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d1ae      	bne.n	8005f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d11b      	bne.n	800600e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fde:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f043 0204 	orr.w	r2, r3, #4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e267      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d075      	beq.n	8006126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b04      	cmp	r3, #4
 8006044:	d00c      	beq.n	8006060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006046:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800604e:	2b08      	cmp	r3, #8
 8006050:	d112      	bne.n	8006078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006052:	4b82      	ldr	r3, [pc, #520]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605e:	d10b      	bne.n	8006078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006060:	4b7e      	ldr	r3, [pc, #504]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05b      	beq.n	8006124 <HAL_RCC_OscConfig+0x108>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d157      	bne.n	8006124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e242      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x74>
 8006082:	4b76      	ldr	r3, [pc, #472]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a75      	ldr	r2, [pc, #468]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e01d      	b.n	80060cc <HAL_RCC_OscConfig+0xb0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x98>
 800609a:	4b70      	ldr	r3, [pc, #448]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a6f      	ldr	r2, [pc, #444]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b6d      	ldr	r3, [pc, #436]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a6c      	ldr	r2, [pc, #432]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e00b      	b.n	80060cc <HAL_RCC_OscConfig+0xb0>
 80060b4:	4b69      	ldr	r3, [pc, #420]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a65      	ldr	r2, [pc, #404]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d013      	beq.n	80060fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fd fc28 	bl	8003928 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fd fc24 	bl	8003928 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e207      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ee:	4b5b      	ldr	r3, [pc, #364]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0xc0>
 80060fa:	e014      	b.n	8006126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fd fc14 	bl	8003928 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006104:	f7fd fc10 	bl	8003928 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b64      	cmp	r3, #100	; 0x64
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e1f3      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006116:	4b51      	ldr	r3, [pc, #324]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0xe8>
 8006122:	e000      	b.n	8006126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d063      	beq.n	80061fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006132:	4b4a      	ldr	r3, [pc, #296]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613e:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006146:	2b08      	cmp	r3, #8
 8006148:	d11c      	bne.n	8006184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800614a:	4b44      	ldr	r3, [pc, #272]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d116      	bne.n	8006184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006156:	4b41      	ldr	r3, [pc, #260]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_RCC_OscConfig+0x152>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d001      	beq.n	800616e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e1c7      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4937      	ldr	r1, [pc, #220]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006182:	e03a      	b.n	80061fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d020      	beq.n	80061ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800618c:	4b34      	ldr	r3, [pc, #208]	; (8006260 <HAL_RCC_OscConfig+0x244>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fd fbc9 	bl	8003928 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619a:	f7fd fbc5 	bl	8003928 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1a8      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ac:	4b2b      	ldr	r3, [pc, #172]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b8:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4925      	ldr	r1, [pc, #148]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]
 80061cc:	e015      	b.n	80061fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <HAL_RCC_OscConfig+0x244>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fd fba8 	bl	8003928 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061dc:	f7fd fba4 	bl	8003928 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e187      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d036      	beq.n	8006274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800620e:	4b15      	ldr	r3, [pc, #84]	; (8006264 <HAL_RCC_OscConfig+0x248>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fd fb88 	bl	8003928 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621c:	f7fd fb84 	bl	8003928 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e167      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622e:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCC_OscConfig+0x200>
 800623a:	e01b      	b.n	8006274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <HAL_RCC_OscConfig+0x248>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006242:	f7fd fb71 	bl	8003928 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006248:	e00e      	b.n	8006268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624a:	f7fd fb6d 	bl	8003928 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d907      	bls.n	8006268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e150      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
 800625c:	40023800 	.word	0x40023800
 8006260:	42470000 	.word	0x42470000
 8006264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006268:	4b88      	ldr	r3, [pc, #544]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1ea      	bne.n	800624a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8097 	beq.w	80063b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006286:	4b81      	ldr	r3, [pc, #516]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	4b7d      	ldr	r3, [pc, #500]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	4a7c      	ldr	r2, [pc, #496]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	6413      	str	r3, [r2, #64]	; 0x40
 80062a2:	4b7a      	ldr	r3, [pc, #488]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b2:	4b77      	ldr	r3, [pc, #476]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d118      	bne.n	80062f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062be:	4b74      	ldr	r3, [pc, #464]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a73      	ldr	r2, [pc, #460]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ca:	f7fd fb2d 	bl	8003928 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d2:	f7fd fb29 	bl	8003928 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e10c      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d106      	bne.n	8006306 <HAL_RCC_OscConfig+0x2ea>
 80062f8:	4b64      	ldr	r3, [pc, #400]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	4a63      	ldr	r2, [pc, #396]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
 8006304:	e01c      	b.n	8006340 <HAL_RCC_OscConfig+0x324>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b05      	cmp	r3, #5
 800630c:	d10c      	bne.n	8006328 <HAL_RCC_OscConfig+0x30c>
 800630e:	4b5f      	ldr	r3, [pc, #380]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a5e      	ldr	r2, [pc, #376]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006314:	f043 0304 	orr.w	r3, r3, #4
 8006318:	6713      	str	r3, [r2, #112]	; 0x70
 800631a:	4b5c      	ldr	r3, [pc, #368]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a5b      	ldr	r2, [pc, #364]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6713      	str	r3, [r2, #112]	; 0x70
 8006326:	e00b      	b.n	8006340 <HAL_RCC_OscConfig+0x324>
 8006328:	4b58      	ldr	r3, [pc, #352]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	4a57      	ldr	r2, [pc, #348]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	; 0x70
 8006334:	4b55      	ldr	r3, [pc, #340]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	4a54      	ldr	r2, [pc, #336]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800633a:	f023 0304 	bic.w	r3, r3, #4
 800633e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006348:	f7fd faee 	bl	8003928 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634e:	e00a      	b.n	8006366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006350:	f7fd faea 	bl	8003928 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e0cb      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006366:	4b49      	ldr	r3, [pc, #292]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0ee      	beq.n	8006350 <HAL_RCC_OscConfig+0x334>
 8006372:	e014      	b.n	800639e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006374:	f7fd fad8 	bl	8003928 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800637a:	e00a      	b.n	8006392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800637c:	f7fd fad4 	bl	8003928 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	; 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0b5      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006392:	4b3e      	ldr	r3, [pc, #248]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1ee      	bne.n	800637c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d105      	bne.n	80063b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a4:	4b39      	ldr	r3, [pc, #228]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	4a38      	ldr	r2, [pc, #224]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80a1 	beq.w	80064fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ba:	4b34      	ldr	r3, [pc, #208]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d05c      	beq.n	8006480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d141      	bne.n	8006452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fd faa8 	bl	8003928 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fd faa4 	bl	8003928 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e087      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	4b27      	ldr	r3, [pc, #156]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	491b      	ldr	r1, [pc, #108]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642a:	f7fd fa7d 	bl	8003928 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fd fa79 	bl	8003928 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e05c      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x416>
 8006450:	e054      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fd fa66 	bl	8003928 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006460:	f7fd fa62 	bl	8003928 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e045      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x444>
 800647e:	e03d      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d107      	bne.n	8006498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e038      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
 800648c:	40023800 	.word	0x40023800
 8006490:	40007000 	.word	0x40007000
 8006494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <HAL_RCC_OscConfig+0x4ec>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d028      	beq.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d121      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	429a      	cmp	r2, r3
 80064c0:	d11a      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d111      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	3b01      	subs	r3, #1
 80064e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800

0800650c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0cc      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b68      	ldr	r3, [pc, #416]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d90c      	bls.n	8006548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	4b63      	ldr	r3, [pc, #396]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0b8      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d020      	beq.n	8006596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006560:	4b59      	ldr	r3, [pc, #356]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4a58      	ldr	r2, [pc, #352]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800656a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006578:	4b53      	ldr	r3, [pc, #332]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4a52      	ldr	r2, [pc, #328]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006584:	4b50      	ldr	r3, [pc, #320]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	494d      	ldr	r1, [pc, #308]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d044      	beq.n	800662c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	4b47      	ldr	r3, [pc, #284]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d119      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e07f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d003      	beq.n	80065ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ca:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e06f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e067      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 0203 	bic.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4934      	ldr	r1, [pc, #208]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065fc:	f7fd f994 	bl	8003928 <HAL_GetTick>
 8006600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006602:	e00a      	b.n	800661a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006604:	f7fd f990 	bl	8003928 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e04f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 020c 	and.w	r2, r3, #12
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	429a      	cmp	r2, r3
 800662a:	d1eb      	bne.n	8006604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d20c      	bcs.n	8006654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e032      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4916      	ldr	r1, [pc, #88]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	4313      	orrs	r3, r2
 8006670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	490e      	ldr	r1, [pc, #56]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006692:	f000 f821 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8006696:	4602      	mov	r2, r0
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	490a      	ldr	r1, [pc, #40]	; (80066cc <HAL_RCC_ClockConfig+0x1c0>)
 80066a4:	5ccb      	ldrb	r3, [r1, r3]
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <HAL_RCC_ClockConfig+0x1c4>)
 80066ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fd f8f4 	bl	80038a0 <HAL_InitTick>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023c00 	.word	0x40023c00
 80066c8:	40023800 	.word	0x40023800
 80066cc:	08039d60 	.word	0x08039d60
 80066d0:	20000000 	.word	0x20000000
 80066d4:	20000004 	.word	0x20000004

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066dc:	b094      	sub	sp, #80	; 0x50
 80066de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
 80066e4:	2300      	movs	r3, #0
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e8:	2300      	movs	r3, #0
 80066ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f0:	4b79      	ldr	r3, [pc, #484]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d00d      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x40>
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	f200 80e1 	bhi.w	80068c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x34>
 8006706:	2b04      	cmp	r3, #4
 8006708:	d003      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x3a>
 800670a:	e0db      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800670c:	4b73      	ldr	r3, [pc, #460]	; (80068dc <HAL_RCC_GetSysClockFreq+0x204>)
 800670e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006710:	e0db      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006712:	4b73      	ldr	r3, [pc, #460]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006716:	e0d8      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006718:	4b6f      	ldr	r3, [pc, #444]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006722:	4b6d      	ldr	r3, [pc, #436]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d063      	beq.n	80067f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800672e:	4b6a      	ldr	r3, [pc, #424]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	2200      	movs	r2, #0
 8006736:	63bb      	str	r3, [r7, #56]	; 0x38
 8006738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 8006742:	2300      	movs	r3, #0
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
 8006746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f04f 0000 	mov.w	r0, #0
 8006752:	f04f 0100 	mov.w	r1, #0
 8006756:	0159      	lsls	r1, r3, #5
 8006758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800675c:	0150      	lsls	r0, r2, #5
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4621      	mov	r1, r4
 8006764:	1a51      	subs	r1, r2, r1
 8006766:	6139      	str	r1, [r7, #16]
 8006768:	4629      	mov	r1, r5
 800676a:	eb63 0301 	sbc.w	r3, r3, r1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800677c:	4659      	mov	r1, fp
 800677e:	018b      	lsls	r3, r1, #6
 8006780:	4651      	mov	r1, sl
 8006782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006786:	4651      	mov	r1, sl
 8006788:	018a      	lsls	r2, r1, #6
 800678a:	4651      	mov	r1, sl
 800678c:	ebb2 0801 	subs.w	r8, r2, r1
 8006790:	4659      	mov	r1, fp
 8006792:	eb63 0901 	sbc.w	r9, r3, r1
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067aa:	4690      	mov	r8, r2
 80067ac:	4699      	mov	r9, r3
 80067ae:	4623      	mov	r3, r4
 80067b0:	eb18 0303 	adds.w	r3, r8, r3
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	462b      	mov	r3, r5
 80067b8:	eb49 0303 	adc.w	r3, r9, r3
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ca:	4629      	mov	r1, r5
 80067cc:	024b      	lsls	r3, r1, #9
 80067ce:	4621      	mov	r1, r4
 80067d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067d4:	4621      	mov	r1, r4
 80067d6:	024a      	lsls	r2, r1, #9
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067de:	2200      	movs	r2, #0
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067e8:	f7fa f9de 	bl	8000ba8 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4613      	mov	r3, r2
 80067f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f4:	e058      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	4611      	mov	r1, r2
 8006802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	2300      	movs	r3, #0
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
 800680c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	f04f 0000 	mov.w	r0, #0
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	0159      	lsls	r1, r3, #5
 800681e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006822:	0150      	lsls	r0, r2, #5
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4641      	mov	r1, r8
 800682a:	ebb2 0a01 	subs.w	sl, r2, r1
 800682e:	4649      	mov	r1, r9
 8006830:	eb63 0b01 	sbc.w	fp, r3, r1
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006848:	ebb2 040a 	subs.w	r4, r2, sl
 800684c:	eb63 050b 	sbc.w	r5, r3, fp
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	00eb      	lsls	r3, r5, #3
 800685a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685e:	00e2      	lsls	r2, r4, #3
 8006860:	4614      	mov	r4, r2
 8006862:	461d      	mov	r5, r3
 8006864:	4643      	mov	r3, r8
 8006866:	18e3      	adds	r3, r4, r3
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	464b      	mov	r3, r9
 800686c:	eb45 0303 	adc.w	r3, r5, r3
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800687e:	4629      	mov	r1, r5
 8006880:	028b      	lsls	r3, r1, #10
 8006882:	4621      	mov	r1, r4
 8006884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006888:	4621      	mov	r1, r4
 800688a:	028a      	lsls	r2, r1, #10
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	2200      	movs	r2, #0
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	61fa      	str	r2, [r7, #28]
 8006898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800689c:	f7fa f984 	bl	8000ba8 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4613      	mov	r3, r2
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	3301      	adds	r3, #1
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80068b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068c2:	e002      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_GetSysClockFreq+0x204>)
 80068c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3750      	adds	r7, #80	; 0x50
 80068d0:	46bd      	mov	sp, r7
 80068d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	007a1200 	.word	0x007a1200

080068e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000000 	.word	0x20000000

080068fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006900:	f7ff fff0 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0a9b      	lsrs	r3, r3, #10
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	08039d70 	.word	0x08039d70

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006928:	f7ff ffdc 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0b5b      	lsrs	r3, r3, #13
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	; (8006948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	08039d70 	.word	0x08039d70

0800694c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e07b      	b.n	8006a56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d009      	beq.n	8006984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
 8006976:	e005      	b.n	8006984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fc f8ec 	bl	8002b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	ea42 0103 	orr.w	r1, r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	f003 0104 	and.w	r1, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	f003 0210 	and.w	r2, r3, #16
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08c      	sub	sp, #48	; 0x30
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x26>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e198      	b.n	8006db6 <HAL_SPI_TransmitReceive+0x358>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8c:	f7fc ff4c 	bl	8003928 <HAL_GetTick>
 8006a90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d00f      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x70>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab4:	d107      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x68>
 8006abe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d003      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006acc:	e16d      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x82>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x82>
 8006ada:	887b      	ldrh	r3, [r7, #2]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ae6:	e160      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d003      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2205      	movs	r2, #5
 8006af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	887a      	ldrh	r2, [r7, #2]
 8006b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d007      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b58:	d17c      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x10a>
 8006b62:	8b7b      	ldrh	r3, [r7, #26]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d16a      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	881a      	ldrh	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	1c9a      	adds	r2, r3, #2
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b8c:	e057      	b.n	8006c3e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x176>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d016      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0x176>
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d113      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	881a      	ldrh	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	1c9a      	adds	r2, r3, #2
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d119      	bne.n	8006c16 <HAL_SPI_TransmitReceive+0x1b8>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d014      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	1c9a      	adds	r2, r3, #2
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c12:	2301      	movs	r3, #1
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c16:	f7fc fe87 	bl	8003928 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d80b      	bhi.n	8006c3e <HAL_SPI_TransmitReceive+0x1e0>
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d007      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006c3c:	e0b5      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1a2      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x130>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d19d      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x130>
 8006c52:	e080      	b.n	8006d56 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_TransmitReceive+0x204>
 8006c5c:	8b7b      	ldrh	r3, [r7, #26]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d16f      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	7812      	ldrb	r2, [r2, #0]
 8006c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c88:	e05b      	b.n	8006d42 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d11c      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x274>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d017      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x274>
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d114      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	7812      	ldrb	r2, [r2, #0]
 8006cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d119      	bne.n	8006d14 <HAL_SPI_TransmitReceive+0x2b6>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d014      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d10:	2301      	movs	r3, #1
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d14:	f7fc fe08 	bl	8003928 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d803      	bhi.n	8006d2c <HAL_SPI_TransmitReceive+0x2ce>
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	d102      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x2d4>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006d40:	e033      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d19e      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x22c>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d199      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f8b8 	bl	8006ed0 <SPI_EndRxTxTransaction>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d72:	e01a      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da0:	e003      	b.n	8006daa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3730      	adds	r7, #48	; 0x30
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd0:	f7fc fdaa 	bl	8003928 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4413      	add	r3, r2
 8006dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de0:	f7fc fda2 	bl	8003928 <HAL_GetTick>
 8006de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	0d1b      	lsrs	r3, r3, #20
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006df6:	e054      	b.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d050      	beq.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e00:	f7fc fd92 	bl	8003928 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d902      	bls.n	8006e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d13d      	bne.n	8006e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e2e:	d111      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e38:	d004      	beq.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e42:	d107      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5c:	d10f      	bne.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e017      	b.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d19b      	bne.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000000 	.word	0x20000000

08006ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f7ff ff6a 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e032      	b.n	8006f68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f02:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <SPI_EndRxTxTransaction+0xa0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <SPI_EndRxTxTransaction+0xa4>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	0d5b      	lsrs	r3, r3, #21
 8006f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f20:	d112      	bne.n	8006f48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff ff47 	bl	8006dc0 <SPI_WaitFlagStateUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d016      	beq.n	8006f66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e00f      	b.n	8006f68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5e:	2b80      	cmp	r3, #128	; 0x80
 8006f60:	d0f2      	beq.n	8006f48 <SPI_EndRxTxTransaction+0x78>
 8006f62:	e000      	b.n	8006f66 <SPI_EndRxTxTransaction+0x96>
        break;
 8006f64:	bf00      	nop
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000000 	.word	0x20000000
 8006f74:	165e9f81 	.word	0x165e9f81

08006f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e041      	b.n	800700e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fc fa3c 	bl	800341c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f000 fc62 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e04e      	b.n	80070ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_TIM_Base_Start_IT+0xc4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d022      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705a:	d01d      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d018      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00e      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d009      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a19      	ldr	r2, [pc, #100]	; (80070f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d111      	bne.n	80070bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d010      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	e007      	b.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40010400 	.word	0x40010400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40001800 	.word	0x40001800

080070f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e041      	b.n	800718e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f839 	bl	8007196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f000 fba2 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d109      	bne.n	80071d0 <HAL_TIM_PWM_Start+0x24>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	bf14      	ite	ne
 80071c8:	2301      	movne	r3, #1
 80071ca:	2300      	moveq	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e022      	b.n	8007216 <HAL_TIM_PWM_Start+0x6a>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d109      	bne.n	80071ea <HAL_TIM_PWM_Start+0x3e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	bf14      	ite	ne
 80071e2:	2301      	movne	r3, #1
 80071e4:	2300      	moveq	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	e015      	b.n	8007216 <HAL_TIM_PWM_Start+0x6a>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d109      	bne.n	8007204 <HAL_TIM_PWM_Start+0x58>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	bf14      	ite	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	2300      	moveq	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	e008      	b.n	8007216 <HAL_TIM_PWM_Start+0x6a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e07c      	b.n	8007318 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_TIM_PWM_Start+0x82>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722c:	e013      	b.n	8007256 <HAL_TIM_PWM_Start+0xaa>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b04      	cmp	r3, #4
 8007232:	d104      	bne.n	800723e <HAL_TIM_PWM_Start+0x92>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800723c:	e00b      	b.n	8007256 <HAL_TIM_PWM_Start+0xaa>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d104      	bne.n	800724e <HAL_TIM_PWM_Start+0xa2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800724c:	e003      	b.n	8007256 <HAL_TIM_PWM_Start+0xaa>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fe04 	bl	8007e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a2d      	ldr	r2, [pc, #180]	; (8007320 <HAL_TIM_PWM_Start+0x174>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_TIM_PWM_Start+0xcc>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a2c      	ldr	r2, [pc, #176]	; (8007324 <HAL_TIM_PWM_Start+0x178>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d101      	bne.n	800727c <HAL_TIM_PWM_Start+0xd0>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <HAL_TIM_PWM_Start+0xd2>
 800727c:	2300      	movs	r3, #0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <HAL_TIM_PWM_Start+0x174>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a4:	d01d      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <HAL_TIM_PWM_Start+0x17c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d018      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a1d      	ldr	r2, [pc, #116]	; (800732c <HAL_TIM_PWM_Start+0x180>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <HAL_TIM_PWM_Start+0x184>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a16      	ldr	r2, [pc, #88]	; (8007324 <HAL_TIM_PWM_Start+0x178>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a18      	ldr	r2, [pc, #96]	; (8007334 <HAL_TIM_PWM_Start+0x188>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x136>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a16      	ldr	r2, [pc, #88]	; (8007338 <HAL_TIM_PWM_Start+0x18c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d111      	bne.n	8007306 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	d010      	beq.n	8007316 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007304:	e007      	b.n	8007316 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0201 	orr.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40014000 	.word	0x40014000
 8007338:	40001800 	.word	0x40001800

0800733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d020      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01b      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0202 	mvn.w	r2, #2
 8007370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa5b 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa4d 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa5e 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d020      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01b      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0204 	mvn.w	r2, #4
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa35 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa27 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa38 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d020      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01b      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0208 	mvn.w	r2, #8
 8007408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2204      	movs	r2, #4
 800740e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa0f 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa01 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa12 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d020      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0210 	mvn.w	r2, #16
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2208      	movs	r2, #8
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9e9 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9db 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f9ec 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0201 	mvn.w	r2, #1
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fb faf6 	bl	8002a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fd7c 	bl	8007fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9bd 	bl	800786a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0220 	mvn.w	r2, #32
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fd4e 	bl	8007fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007536:	2302      	movs	r3, #2
 8007538:	e0ae      	b.n	8007698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b0c      	cmp	r3, #12
 8007546:	f200 809f 	bhi.w	8007688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007585 	.word	0x08007585
 8007554:	08007689 	.word	0x08007689
 8007558:	08007689 	.word	0x08007689
 800755c:	08007689 	.word	0x08007689
 8007560:	080075c5 	.word	0x080075c5
 8007564:	08007689 	.word	0x08007689
 8007568:	08007689 	.word	0x08007689
 800756c:	08007689 	.word	0x08007689
 8007570:	08007607 	.word	0x08007607
 8007574:	08007689 	.word	0x08007689
 8007578:	08007689 	.word	0x08007689
 800757c:	08007689 	.word	0x08007689
 8007580:	08007647 	.word	0x08007647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fa24 	bl	80079d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0208 	orr.w	r2, r2, #8
 800759e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0204 	bic.w	r2, r2, #4
 80075ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6999      	ldr	r1, [r3, #24]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	619a      	str	r2, [r3, #24]
      break;
 80075c2:	e064      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fa74 	bl	8007ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6999      	ldr	r1, [r3, #24]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	021a      	lsls	r2, r3, #8
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	619a      	str	r2, [r3, #24]
      break;
 8007604:	e043      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fac9 	bl	8007ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0208 	orr.w	r2, r2, #8
 8007620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0204 	bic.w	r2, r2, #4
 8007630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69d9      	ldr	r1, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	61da      	str	r2, [r3, #28]
      break;
 8007644:	e023      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb1d 	bl	8007c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	021a      	lsls	r2, r3, #8
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	61da      	str	r2, [r3, #28]
      break;
 8007686:	e002      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	75fb      	strb	r3, [r7, #23]
      break;
 800768c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_TIM_ConfigClockSource+0x1c>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e0b4      	b.n	8007826 <HAL_TIM_ConfigClockSource+0x186>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f4:	d03e      	beq.n	8007774 <HAL_TIM_ConfigClockSource+0xd4>
 80076f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fa:	f200 8087 	bhi.w	800780c <HAL_TIM_ConfigClockSource+0x16c>
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007702:	f000 8086 	beq.w	8007812 <HAL_TIM_ConfigClockSource+0x172>
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770a:	d87f      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 800770c:	2b70      	cmp	r3, #112	; 0x70
 800770e:	d01a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0xa6>
 8007710:	2b70      	cmp	r3, #112	; 0x70
 8007712:	d87b      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 8007714:	2b60      	cmp	r3, #96	; 0x60
 8007716:	d050      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0x11a>
 8007718:	2b60      	cmp	r3, #96	; 0x60
 800771a:	d877      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 800771c:	2b50      	cmp	r3, #80	; 0x50
 800771e:	d03c      	beq.n	800779a <HAL_TIM_ConfigClockSource+0xfa>
 8007720:	2b50      	cmp	r3, #80	; 0x50
 8007722:	d873      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	d058      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x13a>
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d86f      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b30      	cmp	r3, #48	; 0x30
 800772e:	d064      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15a>
 8007730:	2b30      	cmp	r3, #48	; 0x30
 8007732:	d86b      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d060      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15a>
 8007738:	2b20      	cmp	r3, #32
 800773a:	d867      	bhi.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d05c      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15a>
 8007740:	2b10      	cmp	r3, #16
 8007742:	d05a      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x15a>
 8007744:	e062      	b.n	800780c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007756:	f000 fb69 	bl	8007e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	609a      	str	r2, [r3, #8]
      break;
 8007772:	e04f      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007784:	f000 fb52 	bl	8007e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007796:	609a      	str	r2, [r3, #8]
      break;
 8007798:	e03c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	461a      	mov	r2, r3
 80077a8:	f000 fac6 	bl	8007d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2150      	movs	r1, #80	; 0x50
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fb1f 	bl	8007df6 <TIM_ITRx_SetConfig>
      break;
 80077b8:	e02c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c6:	461a      	mov	r2, r3
 80077c8:	f000 fae5 	bl	8007d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2160      	movs	r1, #96	; 0x60
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fb0f 	bl	8007df6 <TIM_ITRx_SetConfig>
      break;
 80077d8:	e01c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 faa6 	bl	8007d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2140      	movs	r1, #64	; 0x40
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 faff 	bl	8007df6 <TIM_ITRx_SetConfig>
      break;
 80077f8:	e00c      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f000 faf6 	bl	8007df6 <TIM_ITRx_SetConfig>
      break;
 800780a:	e003      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e000      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
	...

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a46      	ldr	r2, [pc, #280]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d00f      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a43      	ldr	r2, [pc, #268]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a42      	ldr	r2, [pc, #264]	; (80079b4 <TIM_Base_SetConfig+0x134>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <TIM_Base_SetConfig+0x138>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a40      	ldr	r2, [pc, #256]	; (80079bc <TIM_Base_SetConfig+0x13c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d108      	bne.n	80078d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a35      	ldr	r2, [pc, #212]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d02b      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d027      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a32      	ldr	r2, [pc, #200]	; (80079b0 <TIM_Base_SetConfig+0x130>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d023      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a31      	ldr	r2, [pc, #196]	; (80079b4 <TIM_Base_SetConfig+0x134>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01f      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a30      	ldr	r2, [pc, #192]	; (80079b8 <TIM_Base_SetConfig+0x138>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01b      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2f      	ldr	r2, [pc, #188]	; (80079bc <TIM_Base_SetConfig+0x13c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d017      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <TIM_Base_SetConfig+0x140>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2d      	ldr	r2, [pc, #180]	; (80079c4 <TIM_Base_SetConfig+0x144>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00f      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2c      	ldr	r2, [pc, #176]	; (80079c8 <TIM_Base_SetConfig+0x148>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00b      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <TIM_Base_SetConfig+0x14c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d007      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2a      	ldr	r2, [pc, #168]	; (80079d0 <TIM_Base_SetConfig+0x150>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a29      	ldr	r2, [pc, #164]	; (80079d4 <TIM_Base_SetConfig+0x154>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d108      	bne.n	8007944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <TIM_Base_SetConfig+0x12c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a12      	ldr	r2, [pc, #72]	; (80079bc <TIM_Base_SetConfig+0x13c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d103      	bne.n	8007980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d105      	bne.n	800799e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]
  }
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800
 80079cc:	40001800 	.word	0x40001800
 80079d0:	40001c00 	.word	0x40001c00
 80079d4:	40002000 	.word	0x40002000

080079d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f023 0201 	bic.w	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 0302 	bic.w	r3, r3, #2
 8007a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <TIM_OC1_SetConfig+0xd8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_OC1_SetConfig+0x64>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <TIM_OC1_SetConfig+0xdc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d10c      	bne.n	8007a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f023 0308 	bic.w	r3, r3, #8
 8007a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 0304 	bic.w	r3, r3, #4
 8007a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <TIM_OC1_SetConfig+0xd8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d003      	beq.n	8007a66 <TIM_OC1_SetConfig+0x8e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a14      	ldr	r2, [pc, #80]	; (8007ab4 <TIM_OC1_SetConfig+0xdc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d111      	bne.n	8007a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	621a      	str	r2, [r3, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0210 	bic.w	r2, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0320 	bic.w	r3, r3, #32
 8007b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <TIM_OC2_SetConfig+0xe4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC2_SetConfig+0x68>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <TIM_OC2_SetConfig+0xe8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10d      	bne.n	8007b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <TIM_OC2_SetConfig+0xe4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d003      	beq.n	8007b4c <TIM_OC2_SetConfig+0x94>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a16      	ldr	r2, [pc, #88]	; (8007ba0 <TIM_OC2_SetConfig+0xe8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d113      	bne.n	8007b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40010400 	.word	0x40010400

08007ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <TIM_OC3_SetConfig+0xe0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC3_SetConfig+0x66>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a20      	ldr	r2, [pc, #128]	; (8007c88 <TIM_OC3_SetConfig+0xe4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d10d      	bne.n	8007c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <TIM_OC3_SetConfig+0xe0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_OC3_SetConfig+0x92>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a15      	ldr	r2, [pc, #84]	; (8007c88 <TIM_OC3_SetConfig+0xe4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d113      	bne.n	8007c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400

08007c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a12      	ldr	r2, [pc, #72]	; (8007d30 <TIM_OC4_SetConfig+0xa4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_OC4_SetConfig+0x68>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a11      	ldr	r2, [pc, #68]	; (8007d34 <TIM_OC4_SetConfig+0xa8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d109      	bne.n	8007d08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	019b      	lsls	r3, r3, #6
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400

08007d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f023 0201 	bic.w	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 030a 	bic.w	r3, r3, #10
 8007d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b087      	sub	sp, #28
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	f023 0210 	bic.w	r2, r3, #16
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f043 0307 	orr.w	r3, r3, #7
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	609a      	str	r2, [r3, #8]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	021a      	lsls	r2, r3, #8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	609a      	str	r2, [r3, #8]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f003 031f 	and.w	r3, r3, #31
 8007e7e:	2201      	movs	r2, #1
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a1a      	ldr	r2, [r3, #32]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1a      	ldr	r2, [r3, #32]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e05a      	b.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a21      	ldr	r2, [pc, #132]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d022      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1c:	d01d      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d018      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d013      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00e      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d009      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d004      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d10c      	bne.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40010400 	.word	0x40010400
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40001800 	.word	0x40001800

08007fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e042      	b.n	8008070 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d106      	bne.n	8008004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fb fbba 	bl	8003778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2224      	movs	r2, #36	; 0x24
 8008008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800801a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fdbd 	bl	8008b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695a      	ldr	r2, [r3, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	; 0x28
 800807c:	af02      	add	r7, sp, #8
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b20      	cmp	r3, #32
 8008096:	d175      	bne.n	8008184 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_UART_Transmit+0x2c>
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e06e      	b.n	8008186 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2221      	movs	r2, #33	; 0x21
 80080b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080b6:	f7fb fc37 	bl	8003928 <HAL_GetTick>
 80080ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	88fa      	ldrh	r2, [r7, #6]
 80080c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d0:	d108      	bne.n	80080e4 <HAL_UART_Transmit+0x6c>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d104      	bne.n	80080e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	e003      	b.n	80080ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080ec:	e02e      	b.n	800814c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2200      	movs	r2, #0
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fb1f 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e03a      	b.n	8008186 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	3302      	adds	r3, #2
 800812a:	61bb      	str	r3, [r7, #24]
 800812c:	e007      	b.n	800813e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1cb      	bne.n	80080ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2200      	movs	r2, #0
 800815e:	2140      	movs	r1, #64	; 0x40
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 faeb 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e006      	b.n	8008186 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2220      	movs	r2, #32
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	4613      	mov	r3, r2
 800819a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d112      	bne.n	80081ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_UART_Receive_IT+0x26>
 80081ae:	88fb      	ldrh	r3, [r7, #6]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e00b      	b.n	80081d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	461a      	mov	r2, r3
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fb12 	bl	80087ee <UART_Start_Receive_IT>
 80081ca:	4603      	mov	r3, r0
 80081cc:	e000      	b.n	80081d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80081ce:	2302      	movs	r3, #2
  }
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b0ba      	sub	sp, #232	; 0xe8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081fe:	2300      	movs	r3, #0
 8008200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10f      	bne.n	800823e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800821e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <HAL_UART_IRQHandler+0x66>
 800822a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fbf2 	bl	8008a20 <UART_Receive_IT>
      return;
 800823c:	e25b      	b.n	80086f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800823e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80de 	beq.w	8008404 <HAL_UART_IRQHandler+0x22c>
 8008248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008258:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80d1 	beq.w	8008404 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <HAL_UART_IRQHandler+0xae>
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827e:	f043 0201 	orr.w	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <HAL_UART_IRQHandler+0xd2>
 8008292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <HAL_UART_IRQHandler+0xf6>
 80082b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d011      	beq.n	80082fe <HAL_UART_IRQHandler+0x126>
 80082da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d005      	beq.n	80082fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	f043 0208 	orr.w	r2, r3, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 81f2 	beq.w	80086ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_UART_IRQHandler+0x14e>
 8008314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fb7d 	bl	8008a20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008342:	f003 0308 	and.w	r3, r3, #8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <HAL_UART_IRQHandler+0x17a>
 800834a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04f      	beq.n	80083f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa85 	bl	8008862 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	d141      	bne.n	80083ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3314      	adds	r3, #20
 800836c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800837c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3314      	adds	r3, #20
 800838e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008392:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800839e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1d9      	bne.n	8008366 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d013      	beq.n	80083e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	4a7e      	ldr	r2, [pc, #504]	; (80085b8 <HAL_UART_IRQHandler+0x3e0>)
 80083c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fc f978 	bl	80046bc <HAL_DMA_Abort_IT>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e0:	e00e      	b.n	8008400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f994 	bl	8008710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e8:	e00a      	b.n	8008400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f990 	bl	8008710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f0:	e006      	b.n	8008400 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f98c 	bl	8008710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80083fe:	e175      	b.n	80086ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	bf00      	nop
    return;
 8008402:	e173      	b.n	80086ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	2b01      	cmp	r3, #1
 800840a:	f040 814f 	bne.w	80086ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 8148 	beq.w	80086ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800841c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8141 	beq.w	80086ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800842a:	2300      	movs	r3, #0
 800842c:	60bb      	str	r3, [r7, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	60bb      	str	r3, [r7, #8]
 800843e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	f040 80b6 	bne.w	80085bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800845c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8145 	beq.w	80086f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800846a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800846e:	429a      	cmp	r2, r3
 8008470:	f080 813e 	bcs.w	80086f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800847a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008486:	f000 8088 	beq.w	800859a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1d9      	bne.n	800848a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3314      	adds	r3, #20
 80084f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008502:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800850c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e1      	bne.n	80084d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3314      	adds	r3, #20
 8008518:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3314      	adds	r3, #20
 8008532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008536:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008538:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800853c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e3      	bne.n	8008512 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856a:	f023 0310 	bic.w	r3, r3, #16
 800856e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	330c      	adds	r3, #12
 8008578:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800857c:	65ba      	str	r2, [r7, #88]	; 0x58
 800857e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800858a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e3      	bne.n	8008558 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	4618      	mov	r0, r3
 8008596:	f7fc f821 	bl	80045dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8b7 	bl	8008724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085b6:	e09b      	b.n	80086f0 <HAL_UART_IRQHandler+0x518>
 80085b8:	08008929 	.word	0x08008929
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 808e 	beq.w	80086f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8089 	beq.w	80086f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	330c      	adds	r3, #12
 80085e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	330c      	adds	r3, #12
 8008602:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008606:	647a      	str	r2, [r7, #68]	; 0x44
 8008608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800860c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e3      	bne.n	80085e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	623b      	str	r3, [r7, #32]
   return(result);
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	f023 0301 	bic.w	r3, r3, #1
 8008630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3314      	adds	r3, #20
 800863a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800863e:	633a      	str	r2, [r7, #48]	; 0x30
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e3      	bne.n	800861a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0310 	bic.w	r3, r3, #16
 8008676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008684:	61fa      	str	r2, [r7, #28]
 8008686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	69b9      	ldr	r1, [r7, #24]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	617b      	str	r3, [r7, #20]
   return(result);
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e3      	bne.n	8008660 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800869e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f83d 	bl	8008724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086aa:	e023      	b.n	80086f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_UART_IRQHandler+0x4f4>
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f943 	bl	8008950 <UART_Transmit_IT>
    return;
 80086ca:	e014      	b.n	80086f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00e      	beq.n	80086f6 <HAL_UART_IRQHandler+0x51e>
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f983 	bl	80089f0 <UART_EndTransmit_IT>
    return;
 80086ea:	e004      	b.n	80086f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80086ec:	bf00      	nop
 80086ee:	e002      	b.n	80086f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80086f0:	bf00      	nop
 80086f2:	e000      	b.n	80086f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80086f4:	bf00      	nop
  }
}
 80086f6:	37e8      	adds	r7, #232	; 0xe8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	e03b      	b.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d037      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008756:	f7fb f8e7 	bl	8003928 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	6a3a      	ldr	r2, [r7, #32]
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <UART_WaitOnFlagUntilTimeout+0x30>
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e03a      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d023      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b80      	cmp	r3, #128	; 0x80
 8008782:	d020      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b40      	cmp	r3, #64	; 0x40
 8008788:	d01d      	beq.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b08      	cmp	r3, #8
 8008796:	d116      	bne.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 f857 	bl	8008862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2208      	movs	r2, #8
 80087b8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e00f      	b.n	80087e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4013      	ands	r3, r2
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d0b4      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	4613      	mov	r3, r2
 80087fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	88fa      	ldrh	r2, [r7, #6]
 800880c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2222      	movs	r2, #34	; 0x22
 8008818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d007      	beq.n	8008834 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008832:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695a      	ldr	r2, [r3, #20]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0220 	orr.w	r2, r2, #32
 8008852:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b095      	sub	sp, #84	; 0x54
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	330c      	adds	r3, #12
 8008888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800888a:	643a      	str	r2, [r7, #64]	; 0x40
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e5      	bne.n	800886a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3314      	adds	r3, #20
 80088a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3314      	adds	r3, #20
 80088bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e5      	bne.n	800889e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d119      	bne.n	800890e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	330c      	adds	r3, #12
 80088e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f023 0310 	bic.w	r3, r3, #16
 80088f0:	647b      	str	r3, [r7, #68]	; 0x44
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	330c      	adds	r3, #12
 80088f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fa:	61ba      	str	r2, [r7, #24]
 80088fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	613b      	str	r3, [r7, #16]
   return(result);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e5      	bne.n	80088da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800891c:	bf00      	nop
 800891e:	3754      	adds	r7, #84	; 0x54
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fee4 	bl	8008710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b21      	cmp	r3, #33	; 0x21
 8008962:	d13e      	bne.n	80089e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896c:	d114      	bne.n	8008998 <UART_Transmit_IT+0x48>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d110      	bne.n	8008998 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800898a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	1c9a      	adds	r2, r3, #2
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	621a      	str	r2, [r3, #32]
 8008996:	e008      	b.n	80089aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	1c59      	adds	r1, r3, #1
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6211      	str	r1, [r2, #32]
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	4619      	mov	r1, r3
 80089b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10f      	bne.n	80089de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	e000      	b.n	80089e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089e2:	2302      	movs	r3, #2
  }
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fe73 	bl	80086fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08c      	sub	sp, #48	; 0x30
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b22      	cmp	r3, #34	; 0x22
 8008a32:	f040 80ae 	bne.w	8008b92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3e:	d117      	bne.n	8008a70 <UART_Receive_IT+0x50>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d113      	bne.n	8008a70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	1c9a      	adds	r2, r3, #2
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8008a6e:	e026      	b.n	8008abe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a82:	d007      	beq.n	8008a94 <UART_Receive_IT+0x74>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <UART_Receive_IT+0x82>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	701a      	strb	r2, [r3, #0]
 8008aa0:	e008      	b.n	8008ab4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	4619      	mov	r1, r3
 8008acc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d15d      	bne.n	8008b8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0220 	bic.w	r2, r2, #32
 8008ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d135      	bne.n	8008b84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f023 0310 	bic.w	r3, r3, #16
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	623a      	str	r2, [r7, #32]
 8008b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69f9      	ldr	r1, [r7, #28]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d10a      	bne.n	8008b76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fdd1 	bl	8008724 <HAL_UARTEx_RxEventCallback>
 8008b82:	e002      	b.n	8008b8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7f9 ff67 	bl	8002a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e002      	b.n	8008b94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e000      	b.n	8008b94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b92:	2302      	movs	r3, #2
  }
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3730      	adds	r7, #48	; 0x30
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba0:	b0c0      	sub	sp, #256	; 0x100
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	68d9      	ldr	r1, [r3, #12]
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	ea40 0301 	orr.w	r3, r0, r1
 8008bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bf4:	f021 010c 	bic.w	r1, r1, #12
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c02:	430b      	orrs	r3, r1
 8008c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c16:	6999      	ldr	r1, [r3, #24]
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	ea40 0301 	orr.w	r3, r0, r1
 8008c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b8f      	ldr	r3, [pc, #572]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d005      	beq.n	8008c3c <UART_SetConfig+0xa0>
 8008c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b8d      	ldr	r3, [pc, #564]	; (8008e6c <UART_SetConfig+0x2d0>)
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d104      	bne.n	8008c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c3c:	f7fd fe72 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 8008c40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c44:	e003      	b.n	8008c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c46:	f7fd fe59 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8008c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c58:	f040 810c 	bne.w	8008e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	1891      	adds	r1, r2, r2
 8008c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c76:	415b      	adcs	r3, r3
 8008c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c7e:	4621      	mov	r1, r4
 8008c80:	eb12 0801 	adds.w	r8, r2, r1
 8008c84:	4629      	mov	r1, r5
 8008c86:	eb43 0901 	adc.w	r9, r3, r1
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c9e:	4690      	mov	r8, r2
 8008ca0:	4699      	mov	r9, r3
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	eb18 0303 	adds.w	r3, r8, r3
 8008ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cac:	462b      	mov	r3, r5
 8008cae:	eb49 0303 	adc.w	r3, r9, r3
 8008cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cca:	460b      	mov	r3, r1
 8008ccc:	18db      	adds	r3, r3, r3
 8008cce:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	eb42 0303 	adc.w	r3, r2, r3
 8008cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ce0:	f7f7 ff62 	bl	8000ba8 <__aeabi_uldivmod>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008cea:	fba3 2302 	umull	r2, r3, r3, r2
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	011c      	lsls	r4, r3, #4
 8008cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	1891      	adds	r1, r2, r2
 8008d0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d0c:	415b      	adcs	r3, r3
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d14:	4641      	mov	r1, r8
 8008d16:	eb12 0a01 	adds.w	sl, r2, r1
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d34:	4692      	mov	sl, r2
 8008d36:	469b      	mov	fp, r3
 8008d38:	4643      	mov	r3, r8
 8008d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d42:	464b      	mov	r3, r9
 8008d44:	eb4b 0303 	adc.w	r3, fp, r3
 8008d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d60:	460b      	mov	r3, r1
 8008d62:	18db      	adds	r3, r3, r3
 8008d64:	643b      	str	r3, [r7, #64]	; 0x40
 8008d66:	4613      	mov	r3, r2
 8008d68:	eb42 0303 	adc.w	r3, r2, r3
 8008d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d76:	f7f7 ff17 	bl	8000ba8 <__aeabi_uldivmod>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4b3b      	ldr	r3, [pc, #236]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008d82:	fba3 2301 	umull	r2, r3, r3, r1
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	2264      	movs	r2, #100	; 0x64
 8008d8a:	fb02 f303 	mul.w	r3, r2, r3
 8008d8e:	1acb      	subs	r3, r1, r3
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d96:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008d98:	fba3 2302 	umull	r2, r3, r3, r2
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008da4:	441c      	add	r4, r3
 8008da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008db0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	1891      	adds	r1, r2, r2
 8008dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dc0:	415b      	adcs	r3, r3
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dc8:	4641      	mov	r1, r8
 8008dca:	1851      	adds	r1, r2, r1
 8008dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8008dce:	4649      	mov	r1, r9
 8008dd0:	414b      	adcs	r3, r1
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008de0:	4659      	mov	r1, fp
 8008de2:	00cb      	lsls	r3, r1, #3
 8008de4:	4651      	mov	r1, sl
 8008de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dea:	4651      	mov	r1, sl
 8008dec:	00ca      	lsls	r2, r1, #3
 8008dee:	4610      	mov	r0, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	4642      	mov	r2, r8
 8008df6:	189b      	adds	r3, r3, r2
 8008df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	460a      	mov	r2, r1
 8008e00:	eb42 0303 	adc.w	r3, r2, r3
 8008e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	18db      	adds	r3, r3, r3
 8008e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e22:	4613      	mov	r3, r2
 8008e24:	eb42 0303 	adc.w	r3, r2, r3
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e32:	f7f7 feb9 	bl	8000ba8 <__aeabi_uldivmod>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	2164      	movs	r1, #100	; 0x64
 8008e44:	fb01 f303 	mul.w	r3, r1, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	3332      	adds	r3, #50	; 0x32
 8008e4e:	4a08      	ldr	r2, [pc, #32]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f003 0207 	and.w	r2, r3, #7
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4422      	add	r2, r4
 8008e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e64:	e106      	b.n	8009074 <UART_SetConfig+0x4d8>
 8008e66:	bf00      	nop
 8008e68:	40011000 	.word	0x40011000
 8008e6c:	40011400 	.word	0x40011400
 8008e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e86:	4642      	mov	r2, r8
 8008e88:	464b      	mov	r3, r9
 8008e8a:	1891      	adds	r1, r2, r2
 8008e8c:	6239      	str	r1, [r7, #32]
 8008e8e:	415b      	adcs	r3, r3
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
 8008e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e96:	4641      	mov	r1, r8
 8008e98:	1854      	adds	r4, r2, r1
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	eb43 0501 	adc.w	r5, r3, r1
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	00eb      	lsls	r3, r5, #3
 8008eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eae:	00e2      	lsls	r2, r4, #3
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	461d      	mov	r5, r3
 8008eb4:	4643      	mov	r3, r8
 8008eb6:	18e3      	adds	r3, r4, r3
 8008eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	eb45 0303 	adc.w	r3, r5, r3
 8008ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	008b      	lsls	r3, r1, #2
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eec:	4621      	mov	r1, r4
 8008eee:	008a      	lsls	r2, r1, #2
 8008ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ef4:	f7f7 fe58 	bl	8000ba8 <__aeabi_uldivmod>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4b60      	ldr	r3, [pc, #384]	; (8009080 <UART_SetConfig+0x4e4>)
 8008efe:	fba3 2302 	umull	r2, r3, r3, r2
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	011c      	lsls	r4, r3, #4
 8008f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	1891      	adds	r1, r2, r2
 8008f1e:	61b9      	str	r1, [r7, #24]
 8008f20:	415b      	adcs	r3, r3
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f28:	4641      	mov	r1, r8
 8008f2a:	1851      	adds	r1, r2, r1
 8008f2c:	6139      	str	r1, [r7, #16]
 8008f2e:	4649      	mov	r1, r9
 8008f30:	414b      	adcs	r3, r1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f40:	4659      	mov	r1, fp
 8008f42:	00cb      	lsls	r3, r1, #3
 8008f44:	4651      	mov	r1, sl
 8008f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f4a:	4651      	mov	r1, sl
 8008f4c:	00ca      	lsls	r2, r1, #3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	4603      	mov	r3, r0
 8008f54:	4642      	mov	r2, r8
 8008f56:	189b      	adds	r3, r3, r2
 8008f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	460a      	mov	r2, r1
 8008f60:	eb42 0303 	adc.w	r3, r2, r3
 8008f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f80:	4649      	mov	r1, r9
 8008f82:	008b      	lsls	r3, r1, #2
 8008f84:	4641      	mov	r1, r8
 8008f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	008a      	lsls	r2, r1, #2
 8008f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f92:	f7f7 fe09 	bl	8000ba8 <__aeabi_uldivmod>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4b38      	ldr	r3, [pc, #224]	; (8009080 <UART_SetConfig+0x4e4>)
 8008f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	2264      	movs	r2, #100	; 0x64
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	1acb      	subs	r3, r1, r3
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	3332      	adds	r3, #50	; 0x32
 8008fb0:	4a33      	ldr	r2, [pc, #204]	; (8009080 <UART_SetConfig+0x4e4>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fbc:	441c      	add	r4, r3
 8008fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	673b      	str	r3, [r7, #112]	; 0x70
 8008fc6:	677a      	str	r2, [r7, #116]	; 0x74
 8008fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	1891      	adds	r1, r2, r2
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	415b      	adcs	r3, r3
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fdc:	4641      	mov	r1, r8
 8008fde:	1851      	adds	r1, r2, r1
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	414b      	adcs	r3, r1
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	00cb      	lsls	r3, r1, #3
 8008ff8:	4651      	mov	r1, sl
 8008ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ffe:	4651      	mov	r1, sl
 8009000:	00ca      	lsls	r2, r1, #3
 8009002:	4610      	mov	r0, r2
 8009004:	4619      	mov	r1, r3
 8009006:	4603      	mov	r3, r0
 8009008:	4642      	mov	r2, r8
 800900a:	189b      	adds	r3, r3, r2
 800900c:	66bb      	str	r3, [r7, #104]	; 0x68
 800900e:	464b      	mov	r3, r9
 8009010:	460a      	mov	r2, r1
 8009012:	eb42 0303 	adc.w	r3, r2, r3
 8009016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	663b      	str	r3, [r7, #96]	; 0x60
 8009022:	667a      	str	r2, [r7, #100]	; 0x64
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009030:	4649      	mov	r1, r9
 8009032:	008b      	lsls	r3, r1, #2
 8009034:	4641      	mov	r1, r8
 8009036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800903a:	4641      	mov	r1, r8
 800903c:	008a      	lsls	r2, r1, #2
 800903e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009042:	f7f7 fdb1 	bl	8000ba8 <__aeabi_uldivmod>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <UART_SetConfig+0x4e4>)
 800904c:	fba3 1302 	umull	r1, r3, r3, r2
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	2164      	movs	r1, #100	; 0x64
 8009054:	fb01 f303 	mul.w	r3, r1, r3
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	3332      	adds	r3, #50	; 0x32
 800905e:	4a08      	ldr	r2, [pc, #32]	; (8009080 <UART_SetConfig+0x4e4>)
 8009060:	fba2 2303 	umull	r2, r3, r2, r3
 8009064:	095b      	lsrs	r3, r3, #5
 8009066:	f003 020f 	and.w	r2, r3, #15
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4422      	add	r2, r4
 8009072:	609a      	str	r2, [r3, #8]
}
 8009074:	bf00      	nop
 8009076:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800907a:	46bd      	mov	sp, r7
 800907c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009080:	51eb851f 	.word	0x51eb851f

08009084 <__cvt>:
 8009084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	ec55 4b10 	vmov	r4, r5, d0
 800908c:	2d00      	cmp	r5, #0
 800908e:	460e      	mov	r6, r1
 8009090:	4619      	mov	r1, r3
 8009092:	462b      	mov	r3, r5
 8009094:	bfbb      	ittet	lt
 8009096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800909a:	461d      	movlt	r5, r3
 800909c:	2300      	movge	r3, #0
 800909e:	232d      	movlt	r3, #45	; 0x2d
 80090a0:	700b      	strb	r3, [r1, #0]
 80090a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090a8:	4691      	mov	r9, r2
 80090aa:	f023 0820 	bic.w	r8, r3, #32
 80090ae:	bfbc      	itt	lt
 80090b0:	4622      	movlt	r2, r4
 80090b2:	4614      	movlt	r4, r2
 80090b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090b8:	d005      	beq.n	80090c6 <__cvt+0x42>
 80090ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090be:	d100      	bne.n	80090c2 <__cvt+0x3e>
 80090c0:	3601      	adds	r6, #1
 80090c2:	2102      	movs	r1, #2
 80090c4:	e000      	b.n	80090c8 <__cvt+0x44>
 80090c6:	2103      	movs	r1, #3
 80090c8:	ab03      	add	r3, sp, #12
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	ab02      	add	r3, sp, #8
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	ec45 4b10 	vmov	d0, r4, r5
 80090d4:	4653      	mov	r3, sl
 80090d6:	4632      	mov	r2, r6
 80090d8:	f000 fe6a 	bl	8009db0 <_dtoa_r>
 80090dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090e0:	4607      	mov	r7, r0
 80090e2:	d102      	bne.n	80090ea <__cvt+0x66>
 80090e4:	f019 0f01 	tst.w	r9, #1
 80090e8:	d022      	beq.n	8009130 <__cvt+0xac>
 80090ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090ee:	eb07 0906 	add.w	r9, r7, r6
 80090f2:	d110      	bne.n	8009116 <__cvt+0x92>
 80090f4:	783b      	ldrb	r3, [r7, #0]
 80090f6:	2b30      	cmp	r3, #48	; 0x30
 80090f8:	d10a      	bne.n	8009110 <__cvt+0x8c>
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	4620      	mov	r0, r4
 8009100:	4629      	mov	r1, r5
 8009102:	f7f7 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009106:	b918      	cbnz	r0, 8009110 <__cvt+0x8c>
 8009108:	f1c6 0601 	rsb	r6, r6, #1
 800910c:	f8ca 6000 	str.w	r6, [sl]
 8009110:	f8da 3000 	ldr.w	r3, [sl]
 8009114:	4499      	add	r9, r3
 8009116:	2200      	movs	r2, #0
 8009118:	2300      	movs	r3, #0
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009122:	b108      	cbz	r0, 8009128 <__cvt+0xa4>
 8009124:	f8cd 900c 	str.w	r9, [sp, #12]
 8009128:	2230      	movs	r2, #48	; 0x30
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	454b      	cmp	r3, r9
 800912e:	d307      	bcc.n	8009140 <__cvt+0xbc>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009134:	1bdb      	subs	r3, r3, r7
 8009136:	4638      	mov	r0, r7
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	b004      	add	sp, #16
 800913c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009140:	1c59      	adds	r1, r3, #1
 8009142:	9103      	str	r1, [sp, #12]
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e7f0      	b.n	800912a <__cvt+0xa6>

08009148 <__exponent>:
 8009148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800914a:	4603      	mov	r3, r0
 800914c:	2900      	cmp	r1, #0
 800914e:	bfb8      	it	lt
 8009150:	4249      	neglt	r1, r1
 8009152:	f803 2b02 	strb.w	r2, [r3], #2
 8009156:	bfb4      	ite	lt
 8009158:	222d      	movlt	r2, #45	; 0x2d
 800915a:	222b      	movge	r2, #43	; 0x2b
 800915c:	2909      	cmp	r1, #9
 800915e:	7042      	strb	r2, [r0, #1]
 8009160:	dd2a      	ble.n	80091b8 <__exponent+0x70>
 8009162:	f10d 0207 	add.w	r2, sp, #7
 8009166:	4617      	mov	r7, r2
 8009168:	260a      	movs	r6, #10
 800916a:	4694      	mov	ip, r2
 800916c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009170:	fb06 1415 	mls	r4, r6, r5, r1
 8009174:	3430      	adds	r4, #48	; 0x30
 8009176:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800917a:	460c      	mov	r4, r1
 800917c:	2c63      	cmp	r4, #99	; 0x63
 800917e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009182:	4629      	mov	r1, r5
 8009184:	dcf1      	bgt.n	800916a <__exponent+0x22>
 8009186:	3130      	adds	r1, #48	; 0x30
 8009188:	f1ac 0402 	sub.w	r4, ip, #2
 800918c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009190:	1c41      	adds	r1, r0, #1
 8009192:	4622      	mov	r2, r4
 8009194:	42ba      	cmp	r2, r7
 8009196:	d30a      	bcc.n	80091ae <__exponent+0x66>
 8009198:	f10d 0209 	add.w	r2, sp, #9
 800919c:	eba2 020c 	sub.w	r2, r2, ip
 80091a0:	42bc      	cmp	r4, r7
 80091a2:	bf88      	it	hi
 80091a4:	2200      	movhi	r2, #0
 80091a6:	4413      	add	r3, r2
 80091a8:	1a18      	subs	r0, r3, r0
 80091aa:	b003      	add	sp, #12
 80091ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80091b6:	e7ed      	b.n	8009194 <__exponent+0x4c>
 80091b8:	2330      	movs	r3, #48	; 0x30
 80091ba:	3130      	adds	r1, #48	; 0x30
 80091bc:	7083      	strb	r3, [r0, #2]
 80091be:	70c1      	strb	r1, [r0, #3]
 80091c0:	1d03      	adds	r3, r0, #4
 80091c2:	e7f1      	b.n	80091a8 <__exponent+0x60>

080091c4 <_printf_float>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	ed2d 8b02 	vpush	{d8}
 80091cc:	b08d      	sub	sp, #52	; 0x34
 80091ce:	460c      	mov	r4, r1
 80091d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091d4:	4616      	mov	r6, r2
 80091d6:	461f      	mov	r7, r3
 80091d8:	4605      	mov	r5, r0
 80091da:	f000 fce7 	bl	8009bac <_localeconv_r>
 80091de:	f8d0 a000 	ldr.w	sl, [r0]
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7f7 f844 	bl	8000270 <strlen>
 80091e8:	2300      	movs	r3, #0
 80091ea:	930a      	str	r3, [sp, #40]	; 0x28
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	f8d8 3000 	ldr.w	r3, [r8]
 80091f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091f8:	3307      	adds	r3, #7
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	f103 0208 	add.w	r2, r3, #8
 8009202:	f8c8 2000 	str.w	r2, [r8]
 8009206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800920a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	f8cd 8018 	str.w	r8, [sp, #24]
 8009214:	ee08 0a10 	vmov	s16, r0
 8009218:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800921c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009220:	4b9e      	ldr	r3, [pc, #632]	; (800949c <_printf_float+0x2d8>)
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	f7f7 fc81 	bl	8000b2c <__aeabi_dcmpun>
 800922a:	bb88      	cbnz	r0, 8009290 <_printf_float+0xcc>
 800922c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009230:	4b9a      	ldr	r3, [pc, #616]	; (800949c <_printf_float+0x2d8>)
 8009232:	f04f 32ff 	mov.w	r2, #4294967295
 8009236:	f7f7 fc5b 	bl	8000af0 <__aeabi_dcmple>
 800923a:	bb48      	cbnz	r0, 8009290 <_printf_float+0xcc>
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 fc4a 	bl	8000adc <__aeabi_dcmplt>
 8009248:	b110      	cbz	r0, 8009250 <_printf_float+0x8c>
 800924a:	232d      	movs	r3, #45	; 0x2d
 800924c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009250:	4a93      	ldr	r2, [pc, #588]	; (80094a0 <_printf_float+0x2dc>)
 8009252:	4b94      	ldr	r3, [pc, #592]	; (80094a4 <_printf_float+0x2e0>)
 8009254:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009258:	bf94      	ite	ls
 800925a:	4690      	movls	r8, r2
 800925c:	4698      	movhi	r8, r3
 800925e:	2303      	movs	r3, #3
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	f023 0304 	bic.w	r3, r3, #4
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	f04f 0900 	mov.w	r9, #0
 800926e:	9700      	str	r7, [sp, #0]
 8009270:	4633      	mov	r3, r6
 8009272:	aa0b      	add	r2, sp, #44	; 0x2c
 8009274:	4621      	mov	r1, r4
 8009276:	4628      	mov	r0, r5
 8009278:	f000 f9da 	bl	8009630 <_printf_common>
 800927c:	3001      	adds	r0, #1
 800927e:	f040 8090 	bne.w	80093a2 <_printf_float+0x1de>
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	b00d      	add	sp, #52	; 0x34
 8009288:	ecbd 8b02 	vpop	{d8}
 800928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009290:	4642      	mov	r2, r8
 8009292:	464b      	mov	r3, r9
 8009294:	4640      	mov	r0, r8
 8009296:	4649      	mov	r1, r9
 8009298:	f7f7 fc48 	bl	8000b2c <__aeabi_dcmpun>
 800929c:	b140      	cbz	r0, 80092b0 <_printf_float+0xec>
 800929e:	464b      	mov	r3, r9
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bfbc      	itt	lt
 80092a4:	232d      	movlt	r3, #45	; 0x2d
 80092a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092aa:	4a7f      	ldr	r2, [pc, #508]	; (80094a8 <_printf_float+0x2e4>)
 80092ac:	4b7f      	ldr	r3, [pc, #508]	; (80094ac <_printf_float+0x2e8>)
 80092ae:	e7d1      	b.n	8009254 <_printf_float+0x90>
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092b6:	9206      	str	r2, [sp, #24]
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	d13f      	bne.n	800933c <_printf_float+0x178>
 80092bc:	2306      	movs	r3, #6
 80092be:	6063      	str	r3, [r4, #4]
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	6861      	ldr	r1, [r4, #4]
 80092c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092c8:	2300      	movs	r3, #0
 80092ca:	9303      	str	r3, [sp, #12]
 80092cc:	ab0a      	add	r3, sp, #40	; 0x28
 80092ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092d2:	ab09      	add	r3, sp, #36	; 0x24
 80092d4:	ec49 8b10 	vmov	d0, r8, r9
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	6022      	str	r2, [r4, #0]
 80092dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fecf 	bl	8009084 <__cvt>
 80092e6:	9b06      	ldr	r3, [sp, #24]
 80092e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ea:	2b47      	cmp	r3, #71	; 0x47
 80092ec:	4680      	mov	r8, r0
 80092ee:	d108      	bne.n	8009302 <_printf_float+0x13e>
 80092f0:	1cc8      	adds	r0, r1, #3
 80092f2:	db02      	blt.n	80092fa <_printf_float+0x136>
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	4299      	cmp	r1, r3
 80092f8:	dd41      	ble.n	800937e <_printf_float+0x1ba>
 80092fa:	f1ab 0302 	sub.w	r3, fp, #2
 80092fe:	fa5f fb83 	uxtb.w	fp, r3
 8009302:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009306:	d820      	bhi.n	800934a <_printf_float+0x186>
 8009308:	3901      	subs	r1, #1
 800930a:	465a      	mov	r2, fp
 800930c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009310:	9109      	str	r1, [sp, #36]	; 0x24
 8009312:	f7ff ff19 	bl	8009148 <__exponent>
 8009316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009318:	1813      	adds	r3, r2, r0
 800931a:	2a01      	cmp	r2, #1
 800931c:	4681      	mov	r9, r0
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	dc02      	bgt.n	8009328 <_printf_float+0x164>
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	07d2      	lsls	r2, r2, #31
 8009326:	d501      	bpl.n	800932c <_printf_float+0x168>
 8009328:	3301      	adds	r3, #1
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009330:	2b00      	cmp	r3, #0
 8009332:	d09c      	beq.n	800926e <_printf_float+0xaa>
 8009334:	232d      	movs	r3, #45	; 0x2d
 8009336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800933a:	e798      	b.n	800926e <_printf_float+0xaa>
 800933c:	9a06      	ldr	r2, [sp, #24]
 800933e:	2a47      	cmp	r2, #71	; 0x47
 8009340:	d1be      	bne.n	80092c0 <_printf_float+0xfc>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1bc      	bne.n	80092c0 <_printf_float+0xfc>
 8009346:	2301      	movs	r3, #1
 8009348:	e7b9      	b.n	80092be <_printf_float+0xfa>
 800934a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800934e:	d118      	bne.n	8009382 <_printf_float+0x1be>
 8009350:	2900      	cmp	r1, #0
 8009352:	6863      	ldr	r3, [r4, #4]
 8009354:	dd0b      	ble.n	800936e <_printf_float+0x1aa>
 8009356:	6121      	str	r1, [r4, #16]
 8009358:	b913      	cbnz	r3, 8009360 <_printf_float+0x19c>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	07d0      	lsls	r0, r2, #31
 800935e:	d502      	bpl.n	8009366 <_printf_float+0x1a2>
 8009360:	3301      	adds	r3, #1
 8009362:	440b      	add	r3, r1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	65a1      	str	r1, [r4, #88]	; 0x58
 8009368:	f04f 0900 	mov.w	r9, #0
 800936c:	e7de      	b.n	800932c <_printf_float+0x168>
 800936e:	b913      	cbnz	r3, 8009376 <_printf_float+0x1b2>
 8009370:	6822      	ldr	r2, [r4, #0]
 8009372:	07d2      	lsls	r2, r2, #31
 8009374:	d501      	bpl.n	800937a <_printf_float+0x1b6>
 8009376:	3302      	adds	r3, #2
 8009378:	e7f4      	b.n	8009364 <_printf_float+0x1a0>
 800937a:	2301      	movs	r3, #1
 800937c:	e7f2      	b.n	8009364 <_printf_float+0x1a0>
 800937e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009384:	4299      	cmp	r1, r3
 8009386:	db05      	blt.n	8009394 <_printf_float+0x1d0>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	6121      	str	r1, [r4, #16]
 800938c:	07d8      	lsls	r0, r3, #31
 800938e:	d5ea      	bpl.n	8009366 <_printf_float+0x1a2>
 8009390:	1c4b      	adds	r3, r1, #1
 8009392:	e7e7      	b.n	8009364 <_printf_float+0x1a0>
 8009394:	2900      	cmp	r1, #0
 8009396:	bfd4      	ite	le
 8009398:	f1c1 0202 	rsble	r2, r1, #2
 800939c:	2201      	movgt	r2, #1
 800939e:	4413      	add	r3, r2
 80093a0:	e7e0      	b.n	8009364 <_printf_float+0x1a0>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	055a      	lsls	r2, r3, #21
 80093a6:	d407      	bmi.n	80093b8 <_printf_float+0x1f4>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	4642      	mov	r2, r8
 80093ac:	4631      	mov	r1, r6
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b8      	blx	r7
 80093b2:	3001      	adds	r0, #1
 80093b4:	d12c      	bne.n	8009410 <_printf_float+0x24c>
 80093b6:	e764      	b.n	8009282 <_printf_float+0xbe>
 80093b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093bc:	f240 80e0 	bls.w	8009580 <_printf_float+0x3bc>
 80093c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	f7f7 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d034      	beq.n	800943a <_printf_float+0x276>
 80093d0:	4a37      	ldr	r2, [pc, #220]	; (80094b0 <_printf_float+0x2ec>)
 80093d2:	2301      	movs	r3, #1
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f43f af51 	beq.w	8009282 <_printf_float+0xbe>
 80093e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e4:	429a      	cmp	r2, r3
 80093e6:	db02      	blt.n	80093ee <_printf_float+0x22a>
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	07d8      	lsls	r0, r3, #31
 80093ec:	d510      	bpl.n	8009410 <_printf_float+0x24c>
 80093ee:	ee18 3a10 	vmov	r3, s16
 80093f2:	4652      	mov	r2, sl
 80093f4:	4631      	mov	r1, r6
 80093f6:	4628      	mov	r0, r5
 80093f8:	47b8      	blx	r7
 80093fa:	3001      	adds	r0, #1
 80093fc:	f43f af41 	beq.w	8009282 <_printf_float+0xbe>
 8009400:	f04f 0800 	mov.w	r8, #0
 8009404:	f104 091a 	add.w	r9, r4, #26
 8009408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940a:	3b01      	subs	r3, #1
 800940c:	4543      	cmp	r3, r8
 800940e:	dc09      	bgt.n	8009424 <_printf_float+0x260>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	079b      	lsls	r3, r3, #30
 8009414:	f100 8107 	bmi.w	8009626 <_printf_float+0x462>
 8009418:	68e0      	ldr	r0, [r4, #12]
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	4298      	cmp	r0, r3
 800941e:	bfb8      	it	lt
 8009420:	4618      	movlt	r0, r3
 8009422:	e730      	b.n	8009286 <_printf_float+0xc2>
 8009424:	2301      	movs	r3, #1
 8009426:	464a      	mov	r2, r9
 8009428:	4631      	mov	r1, r6
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	f43f af27 	beq.w	8009282 <_printf_float+0xbe>
 8009434:	f108 0801 	add.w	r8, r8, #1
 8009438:	e7e6      	b.n	8009408 <_printf_float+0x244>
 800943a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943c:	2b00      	cmp	r3, #0
 800943e:	dc39      	bgt.n	80094b4 <_printf_float+0x2f0>
 8009440:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <_printf_float+0x2ec>)
 8009442:	2301      	movs	r3, #1
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af19 	beq.w	8009282 <_printf_float+0xbe>
 8009450:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009454:	4313      	orrs	r3, r2
 8009456:	d102      	bne.n	800945e <_printf_float+0x29a>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	07d9      	lsls	r1, r3, #31
 800945c:	d5d8      	bpl.n	8009410 <_printf_float+0x24c>
 800945e:	ee18 3a10 	vmov	r3, s16
 8009462:	4652      	mov	r2, sl
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f af09 	beq.w	8009282 <_printf_float+0xbe>
 8009470:	f04f 0900 	mov.w	r9, #0
 8009474:	f104 0a1a 	add.w	sl, r4, #26
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	425b      	negs	r3, r3
 800947c:	454b      	cmp	r3, r9
 800947e:	dc01      	bgt.n	8009484 <_printf_float+0x2c0>
 8009480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009482:	e792      	b.n	80093aa <_printf_float+0x1e6>
 8009484:	2301      	movs	r3, #1
 8009486:	4652      	mov	r2, sl
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f aef7 	beq.w	8009282 <_printf_float+0xbe>
 8009494:	f109 0901 	add.w	r9, r9, #1
 8009498:	e7ee      	b.n	8009478 <_printf_float+0x2b4>
 800949a:	bf00      	nop
 800949c:	7fefffff 	.word	0x7fefffff
 80094a0:	08039d80 	.word	0x08039d80
 80094a4:	08039d84 	.word	0x08039d84
 80094a8:	08039d88 	.word	0x08039d88
 80094ac:	08039d8c 	.word	0x08039d8c
 80094b0:	08039d90 	.word	0x08039d90
 80094b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094b8:	429a      	cmp	r2, r3
 80094ba:	bfa8      	it	ge
 80094bc:	461a      	movge	r2, r3
 80094be:	2a00      	cmp	r2, #0
 80094c0:	4691      	mov	r9, r2
 80094c2:	dc37      	bgt.n	8009534 <_printf_float+0x370>
 80094c4:	f04f 0b00 	mov.w	fp, #0
 80094c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094cc:	f104 021a 	add.w	r2, r4, #26
 80094d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094d2:	9305      	str	r3, [sp, #20]
 80094d4:	eba3 0309 	sub.w	r3, r3, r9
 80094d8:	455b      	cmp	r3, fp
 80094da:	dc33      	bgt.n	8009544 <_printf_float+0x380>
 80094dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094e0:	429a      	cmp	r2, r3
 80094e2:	db3b      	blt.n	800955c <_printf_float+0x398>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	07da      	lsls	r2, r3, #31
 80094e8:	d438      	bmi.n	800955c <_printf_float+0x398>
 80094ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094ee:	eba2 0903 	sub.w	r9, r2, r3
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	1ad2      	subs	r2, r2, r3
 80094f6:	4591      	cmp	r9, r2
 80094f8:	bfa8      	it	ge
 80094fa:	4691      	movge	r9, r2
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	dc35      	bgt.n	800956e <_printf_float+0x3aa>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800950a:	f104 0a1a 	add.w	sl, r4, #26
 800950e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	eba3 0309 	sub.w	r3, r3, r9
 8009518:	4543      	cmp	r3, r8
 800951a:	f77f af79 	ble.w	8009410 <_printf_float+0x24c>
 800951e:	2301      	movs	r3, #1
 8009520:	4652      	mov	r2, sl
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f aeaa 	beq.w	8009282 <_printf_float+0xbe>
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	e7ec      	b.n	800950e <_printf_float+0x34a>
 8009534:	4613      	mov	r3, r2
 8009536:	4631      	mov	r1, r6
 8009538:	4642      	mov	r2, r8
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	d1c0      	bne.n	80094c4 <_printf_float+0x300>
 8009542:	e69e      	b.n	8009282 <_printf_float+0xbe>
 8009544:	2301      	movs	r3, #1
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	9205      	str	r2, [sp, #20]
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f ae97 	beq.w	8009282 <_printf_float+0xbe>
 8009554:	9a05      	ldr	r2, [sp, #20]
 8009556:	f10b 0b01 	add.w	fp, fp, #1
 800955a:	e7b9      	b.n	80094d0 <_printf_float+0x30c>
 800955c:	ee18 3a10 	vmov	r3, s16
 8009560:	4652      	mov	r2, sl
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	47b8      	blx	r7
 8009568:	3001      	adds	r0, #1
 800956a:	d1be      	bne.n	80094ea <_printf_float+0x326>
 800956c:	e689      	b.n	8009282 <_printf_float+0xbe>
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	464b      	mov	r3, r9
 8009572:	4442      	add	r2, r8
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	d1c1      	bne.n	8009502 <_printf_float+0x33e>
 800957e:	e680      	b.n	8009282 <_printf_float+0xbe>
 8009580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009582:	2a01      	cmp	r2, #1
 8009584:	dc01      	bgt.n	800958a <_printf_float+0x3c6>
 8009586:	07db      	lsls	r3, r3, #31
 8009588:	d53a      	bpl.n	8009600 <_printf_float+0x43c>
 800958a:	2301      	movs	r3, #1
 800958c:	4642      	mov	r2, r8
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	f43f ae74 	beq.w	8009282 <_printf_float+0xbe>
 800959a:	ee18 3a10 	vmov	r3, s16
 800959e:	4652      	mov	r2, sl
 80095a0:	4631      	mov	r1, r6
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	f43f ae6b 	beq.w	8009282 <_printf_float+0xbe>
 80095ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095b0:	2200      	movs	r2, #0
 80095b2:	2300      	movs	r3, #0
 80095b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80095b8:	f7f7 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80095bc:	b9d8      	cbnz	r0, 80095f6 <_printf_float+0x432>
 80095be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095c2:	f108 0201 	add.w	r2, r8, #1
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	d10e      	bne.n	80095ee <_printf_float+0x42a>
 80095d0:	e657      	b.n	8009282 <_printf_float+0xbe>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	f43f ae50 	beq.w	8009282 <_printf_float+0xbe>
 80095e2:	f108 0801 	add.w	r8, r8, #1
 80095e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4543      	cmp	r3, r8
 80095ec:	dcf1      	bgt.n	80095d2 <_printf_float+0x40e>
 80095ee:	464b      	mov	r3, r9
 80095f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095f4:	e6da      	b.n	80093ac <_printf_float+0x1e8>
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	f104 0a1a 	add.w	sl, r4, #26
 80095fe:	e7f2      	b.n	80095e6 <_printf_float+0x422>
 8009600:	2301      	movs	r3, #1
 8009602:	4642      	mov	r2, r8
 8009604:	e7df      	b.n	80095c6 <_printf_float+0x402>
 8009606:	2301      	movs	r3, #1
 8009608:	464a      	mov	r2, r9
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	f43f ae36 	beq.w	8009282 <_printf_float+0xbe>
 8009616:	f108 0801 	add.w	r8, r8, #1
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800961e:	1a5b      	subs	r3, r3, r1
 8009620:	4543      	cmp	r3, r8
 8009622:	dcf0      	bgt.n	8009606 <_printf_float+0x442>
 8009624:	e6f8      	b.n	8009418 <_printf_float+0x254>
 8009626:	f04f 0800 	mov.w	r8, #0
 800962a:	f104 0919 	add.w	r9, r4, #25
 800962e:	e7f4      	b.n	800961a <_printf_float+0x456>

08009630 <_printf_common>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	4616      	mov	r6, r2
 8009636:	4699      	mov	r9, r3
 8009638:	688a      	ldr	r2, [r1, #8]
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009640:	4293      	cmp	r3, r2
 8009642:	bfb8      	it	lt
 8009644:	4613      	movlt	r3, r2
 8009646:	6033      	str	r3, [r6, #0]
 8009648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800964c:	4607      	mov	r7, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b10a      	cbz	r2, 8009656 <_printf_common+0x26>
 8009652:	3301      	adds	r3, #1
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	0699      	lsls	r1, r3, #26
 800965a:	bf42      	ittt	mi
 800965c:	6833      	ldrmi	r3, [r6, #0]
 800965e:	3302      	addmi	r3, #2
 8009660:	6033      	strmi	r3, [r6, #0]
 8009662:	6825      	ldr	r5, [r4, #0]
 8009664:	f015 0506 	ands.w	r5, r5, #6
 8009668:	d106      	bne.n	8009678 <_printf_common+0x48>
 800966a:	f104 0a19 	add.w	sl, r4, #25
 800966e:	68e3      	ldr	r3, [r4, #12]
 8009670:	6832      	ldr	r2, [r6, #0]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	42ab      	cmp	r3, r5
 8009676:	dc26      	bgt.n	80096c6 <_printf_common+0x96>
 8009678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800967c:	1e13      	subs	r3, r2, #0
 800967e:	6822      	ldr	r2, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	2301      	movne	r3, #1
 8009684:	0692      	lsls	r2, r2, #26
 8009686:	d42b      	bmi.n	80096e0 <_printf_common+0xb0>
 8009688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800968c:	4649      	mov	r1, r9
 800968e:	4638      	mov	r0, r7
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d01e      	beq.n	80096d4 <_printf_common+0xa4>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	6922      	ldr	r2, [r4, #16]
 800969a:	f003 0306 	and.w	r3, r3, #6
 800969e:	2b04      	cmp	r3, #4
 80096a0:	bf02      	ittt	eq
 80096a2:	68e5      	ldreq	r5, [r4, #12]
 80096a4:	6833      	ldreq	r3, [r6, #0]
 80096a6:	1aed      	subeq	r5, r5, r3
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	bf0c      	ite	eq
 80096ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b0:	2500      	movne	r5, #0
 80096b2:	4293      	cmp	r3, r2
 80096b4:	bfc4      	itt	gt
 80096b6:	1a9b      	subgt	r3, r3, r2
 80096b8:	18ed      	addgt	r5, r5, r3
 80096ba:	2600      	movs	r6, #0
 80096bc:	341a      	adds	r4, #26
 80096be:	42b5      	cmp	r5, r6
 80096c0:	d11a      	bne.n	80096f8 <_printf_common+0xc8>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e008      	b.n	80096d8 <_printf_common+0xa8>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4652      	mov	r2, sl
 80096ca:	4649      	mov	r1, r9
 80096cc:	4638      	mov	r0, r7
 80096ce:	47c0      	blx	r8
 80096d0:	3001      	adds	r0, #1
 80096d2:	d103      	bne.n	80096dc <_printf_common+0xac>
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295
 80096d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096dc:	3501      	adds	r5, #1
 80096de:	e7c6      	b.n	800966e <_printf_common+0x3e>
 80096e0:	18e1      	adds	r1, r4, r3
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	2030      	movs	r0, #48	; 0x30
 80096e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ea:	4422      	add	r2, r4
 80096ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096f4:	3302      	adds	r3, #2
 80096f6:	e7c7      	b.n	8009688 <_printf_common+0x58>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4622      	mov	r2, r4
 80096fc:	4649      	mov	r1, r9
 80096fe:	4638      	mov	r0, r7
 8009700:	47c0      	blx	r8
 8009702:	3001      	adds	r0, #1
 8009704:	d0e6      	beq.n	80096d4 <_printf_common+0xa4>
 8009706:	3601      	adds	r6, #1
 8009708:	e7d9      	b.n	80096be <_printf_common+0x8e>
	...

0800970c <_printf_i>:
 800970c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	7e0f      	ldrb	r7, [r1, #24]
 8009712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009714:	2f78      	cmp	r7, #120	; 0x78
 8009716:	4691      	mov	r9, r2
 8009718:	4680      	mov	r8, r0
 800971a:	460c      	mov	r4, r1
 800971c:	469a      	mov	sl, r3
 800971e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009722:	d807      	bhi.n	8009734 <_printf_i+0x28>
 8009724:	2f62      	cmp	r7, #98	; 0x62
 8009726:	d80a      	bhi.n	800973e <_printf_i+0x32>
 8009728:	2f00      	cmp	r7, #0
 800972a:	f000 80d4 	beq.w	80098d6 <_printf_i+0x1ca>
 800972e:	2f58      	cmp	r7, #88	; 0x58
 8009730:	f000 80c0 	beq.w	80098b4 <_printf_i+0x1a8>
 8009734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800973c:	e03a      	b.n	80097b4 <_printf_i+0xa8>
 800973e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009742:	2b15      	cmp	r3, #21
 8009744:	d8f6      	bhi.n	8009734 <_printf_i+0x28>
 8009746:	a101      	add	r1, pc, #4	; (adr r1, 800974c <_printf_i+0x40>)
 8009748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800974c:	080097a5 	.word	0x080097a5
 8009750:	080097b9 	.word	0x080097b9
 8009754:	08009735 	.word	0x08009735
 8009758:	08009735 	.word	0x08009735
 800975c:	08009735 	.word	0x08009735
 8009760:	08009735 	.word	0x08009735
 8009764:	080097b9 	.word	0x080097b9
 8009768:	08009735 	.word	0x08009735
 800976c:	08009735 	.word	0x08009735
 8009770:	08009735 	.word	0x08009735
 8009774:	08009735 	.word	0x08009735
 8009778:	080098bd 	.word	0x080098bd
 800977c:	080097e5 	.word	0x080097e5
 8009780:	08009877 	.word	0x08009877
 8009784:	08009735 	.word	0x08009735
 8009788:	08009735 	.word	0x08009735
 800978c:	080098df 	.word	0x080098df
 8009790:	08009735 	.word	0x08009735
 8009794:	080097e5 	.word	0x080097e5
 8009798:	08009735 	.word	0x08009735
 800979c:	08009735 	.word	0x08009735
 80097a0:	0800987f 	.word	0x0800987f
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	602a      	str	r2, [r5, #0]
 80097ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097b4:	2301      	movs	r3, #1
 80097b6:	e09f      	b.n	80098f8 <_printf_i+0x1ec>
 80097b8:	6820      	ldr	r0, [r4, #0]
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	0607      	lsls	r7, r0, #24
 80097be:	f103 0104 	add.w	r1, r3, #4
 80097c2:	6029      	str	r1, [r5, #0]
 80097c4:	d501      	bpl.n	80097ca <_printf_i+0xbe>
 80097c6:	681e      	ldr	r6, [r3, #0]
 80097c8:	e003      	b.n	80097d2 <_printf_i+0xc6>
 80097ca:	0646      	lsls	r6, r0, #25
 80097cc:	d5fb      	bpl.n	80097c6 <_printf_i+0xba>
 80097ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097d2:	2e00      	cmp	r6, #0
 80097d4:	da03      	bge.n	80097de <_printf_i+0xd2>
 80097d6:	232d      	movs	r3, #45	; 0x2d
 80097d8:	4276      	negs	r6, r6
 80097da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097de:	485a      	ldr	r0, [pc, #360]	; (8009948 <_printf_i+0x23c>)
 80097e0:	230a      	movs	r3, #10
 80097e2:	e012      	b.n	800980a <_printf_i+0xfe>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	6820      	ldr	r0, [r4, #0]
 80097e8:	1d19      	adds	r1, r3, #4
 80097ea:	6029      	str	r1, [r5, #0]
 80097ec:	0605      	lsls	r5, r0, #24
 80097ee:	d501      	bpl.n	80097f4 <_printf_i+0xe8>
 80097f0:	681e      	ldr	r6, [r3, #0]
 80097f2:	e002      	b.n	80097fa <_printf_i+0xee>
 80097f4:	0641      	lsls	r1, r0, #25
 80097f6:	d5fb      	bpl.n	80097f0 <_printf_i+0xe4>
 80097f8:	881e      	ldrh	r6, [r3, #0]
 80097fa:	4853      	ldr	r0, [pc, #332]	; (8009948 <_printf_i+0x23c>)
 80097fc:	2f6f      	cmp	r7, #111	; 0x6f
 80097fe:	bf0c      	ite	eq
 8009800:	2308      	moveq	r3, #8
 8009802:	230a      	movne	r3, #10
 8009804:	2100      	movs	r1, #0
 8009806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800980a:	6865      	ldr	r5, [r4, #4]
 800980c:	60a5      	str	r5, [r4, #8]
 800980e:	2d00      	cmp	r5, #0
 8009810:	bfa2      	ittt	ge
 8009812:	6821      	ldrge	r1, [r4, #0]
 8009814:	f021 0104 	bicge.w	r1, r1, #4
 8009818:	6021      	strge	r1, [r4, #0]
 800981a:	b90e      	cbnz	r6, 8009820 <_printf_i+0x114>
 800981c:	2d00      	cmp	r5, #0
 800981e:	d04b      	beq.n	80098b8 <_printf_i+0x1ac>
 8009820:	4615      	mov	r5, r2
 8009822:	fbb6 f1f3 	udiv	r1, r6, r3
 8009826:	fb03 6711 	mls	r7, r3, r1, r6
 800982a:	5dc7      	ldrb	r7, [r0, r7]
 800982c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009830:	4637      	mov	r7, r6
 8009832:	42bb      	cmp	r3, r7
 8009834:	460e      	mov	r6, r1
 8009836:	d9f4      	bls.n	8009822 <_printf_i+0x116>
 8009838:	2b08      	cmp	r3, #8
 800983a:	d10b      	bne.n	8009854 <_printf_i+0x148>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	07de      	lsls	r6, r3, #31
 8009840:	d508      	bpl.n	8009854 <_printf_i+0x148>
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	6861      	ldr	r1, [r4, #4]
 8009846:	4299      	cmp	r1, r3
 8009848:	bfde      	ittt	le
 800984a:	2330      	movle	r3, #48	; 0x30
 800984c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009854:	1b52      	subs	r2, r2, r5
 8009856:	6122      	str	r2, [r4, #16]
 8009858:	f8cd a000 	str.w	sl, [sp]
 800985c:	464b      	mov	r3, r9
 800985e:	aa03      	add	r2, sp, #12
 8009860:	4621      	mov	r1, r4
 8009862:	4640      	mov	r0, r8
 8009864:	f7ff fee4 	bl	8009630 <_printf_common>
 8009868:	3001      	adds	r0, #1
 800986a:	d14a      	bne.n	8009902 <_printf_i+0x1f6>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b004      	add	sp, #16
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	f043 0320 	orr.w	r3, r3, #32
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	4833      	ldr	r0, [pc, #204]	; (800994c <_printf_i+0x240>)
 8009880:	2778      	movs	r7, #120	; 0x78
 8009882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	6829      	ldr	r1, [r5, #0]
 800988a:	061f      	lsls	r7, r3, #24
 800988c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009890:	d402      	bmi.n	8009898 <_printf_i+0x18c>
 8009892:	065f      	lsls	r7, r3, #25
 8009894:	bf48      	it	mi
 8009896:	b2b6      	uxthmi	r6, r6
 8009898:	07df      	lsls	r7, r3, #31
 800989a:	bf48      	it	mi
 800989c:	f043 0320 	orrmi.w	r3, r3, #32
 80098a0:	6029      	str	r1, [r5, #0]
 80098a2:	bf48      	it	mi
 80098a4:	6023      	strmi	r3, [r4, #0]
 80098a6:	b91e      	cbnz	r6, 80098b0 <_printf_i+0x1a4>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	f023 0320 	bic.w	r3, r3, #32
 80098ae:	6023      	str	r3, [r4, #0]
 80098b0:	2310      	movs	r3, #16
 80098b2:	e7a7      	b.n	8009804 <_printf_i+0xf8>
 80098b4:	4824      	ldr	r0, [pc, #144]	; (8009948 <_printf_i+0x23c>)
 80098b6:	e7e4      	b.n	8009882 <_printf_i+0x176>
 80098b8:	4615      	mov	r5, r2
 80098ba:	e7bd      	b.n	8009838 <_printf_i+0x12c>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	6826      	ldr	r6, [r4, #0]
 80098c0:	6961      	ldr	r1, [r4, #20]
 80098c2:	1d18      	adds	r0, r3, #4
 80098c4:	6028      	str	r0, [r5, #0]
 80098c6:	0635      	lsls	r5, r6, #24
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	d501      	bpl.n	80098d0 <_printf_i+0x1c4>
 80098cc:	6019      	str	r1, [r3, #0]
 80098ce:	e002      	b.n	80098d6 <_printf_i+0x1ca>
 80098d0:	0670      	lsls	r0, r6, #25
 80098d2:	d5fb      	bpl.n	80098cc <_printf_i+0x1c0>
 80098d4:	8019      	strh	r1, [r3, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	4615      	mov	r5, r2
 80098dc:	e7bc      	b.n	8009858 <_printf_i+0x14c>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	602a      	str	r2, [r5, #0]
 80098e4:	681d      	ldr	r5, [r3, #0]
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	2100      	movs	r1, #0
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7f6 fc70 	bl	80001d0 <memchr>
 80098f0:	b108      	cbz	r0, 80098f6 <_printf_i+0x1ea>
 80098f2:	1b40      	subs	r0, r0, r5
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	2300      	movs	r3, #0
 80098fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009900:	e7aa      	b.n	8009858 <_printf_i+0x14c>
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	462a      	mov	r2, r5
 8009906:	4649      	mov	r1, r9
 8009908:	4640      	mov	r0, r8
 800990a:	47d0      	blx	sl
 800990c:	3001      	adds	r0, #1
 800990e:	d0ad      	beq.n	800986c <_printf_i+0x160>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	079b      	lsls	r3, r3, #30
 8009914:	d413      	bmi.n	800993e <_printf_i+0x232>
 8009916:	68e0      	ldr	r0, [r4, #12]
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	4298      	cmp	r0, r3
 800991c:	bfb8      	it	lt
 800991e:	4618      	movlt	r0, r3
 8009920:	e7a6      	b.n	8009870 <_printf_i+0x164>
 8009922:	2301      	movs	r3, #1
 8009924:	4632      	mov	r2, r6
 8009926:	4649      	mov	r1, r9
 8009928:	4640      	mov	r0, r8
 800992a:	47d0      	blx	sl
 800992c:	3001      	adds	r0, #1
 800992e:	d09d      	beq.n	800986c <_printf_i+0x160>
 8009930:	3501      	adds	r5, #1
 8009932:	68e3      	ldr	r3, [r4, #12]
 8009934:	9903      	ldr	r1, [sp, #12]
 8009936:	1a5b      	subs	r3, r3, r1
 8009938:	42ab      	cmp	r3, r5
 800993a:	dcf2      	bgt.n	8009922 <_printf_i+0x216>
 800993c:	e7eb      	b.n	8009916 <_printf_i+0x20a>
 800993e:	2500      	movs	r5, #0
 8009940:	f104 0619 	add.w	r6, r4, #25
 8009944:	e7f5      	b.n	8009932 <_printf_i+0x226>
 8009946:	bf00      	nop
 8009948:	08039d92 	.word	0x08039d92
 800994c:	08039da3 	.word	0x08039da3

08009950 <std>:
 8009950:	2300      	movs	r3, #0
 8009952:	b510      	push	{r4, lr}
 8009954:	4604      	mov	r4, r0
 8009956:	e9c0 3300 	strd	r3, r3, [r0]
 800995a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800995e:	6083      	str	r3, [r0, #8]
 8009960:	8181      	strh	r1, [r0, #12]
 8009962:	6643      	str	r3, [r0, #100]	; 0x64
 8009964:	81c2      	strh	r2, [r0, #14]
 8009966:	6183      	str	r3, [r0, #24]
 8009968:	4619      	mov	r1, r3
 800996a:	2208      	movs	r2, #8
 800996c:	305c      	adds	r0, #92	; 0x5c
 800996e:	f000 f914 	bl	8009b9a <memset>
 8009972:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <std+0x58>)
 8009974:	6263      	str	r3, [r4, #36]	; 0x24
 8009976:	4b0d      	ldr	r3, [pc, #52]	; (80099ac <std+0x5c>)
 8009978:	62a3      	str	r3, [r4, #40]	; 0x28
 800997a:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <std+0x60>)
 800997c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <std+0x64>)
 8009980:	6323      	str	r3, [r4, #48]	; 0x30
 8009982:	4b0d      	ldr	r3, [pc, #52]	; (80099b8 <std+0x68>)
 8009984:	6224      	str	r4, [r4, #32]
 8009986:	429c      	cmp	r4, r3
 8009988:	d006      	beq.n	8009998 <std+0x48>
 800998a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800998e:	4294      	cmp	r4, r2
 8009990:	d002      	beq.n	8009998 <std+0x48>
 8009992:	33d0      	adds	r3, #208	; 0xd0
 8009994:	429c      	cmp	r4, r3
 8009996:	d105      	bne.n	80099a4 <std+0x54>
 8009998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a0:	f000 b978 	b.w	8009c94 <__retarget_lock_init_recursive>
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	08009b15 	.word	0x08009b15
 80099ac:	08009b37 	.word	0x08009b37
 80099b0:	08009b6f 	.word	0x08009b6f
 80099b4:	08009b93 	.word	0x08009b93
 80099b8:	200005a0 	.word	0x200005a0

080099bc <stdio_exit_handler>:
 80099bc:	4a02      	ldr	r2, [pc, #8]	; (80099c8 <stdio_exit_handler+0xc>)
 80099be:	4903      	ldr	r1, [pc, #12]	; (80099cc <stdio_exit_handler+0x10>)
 80099c0:	4803      	ldr	r0, [pc, #12]	; (80099d0 <stdio_exit_handler+0x14>)
 80099c2:	f000 b869 	b.w	8009a98 <_fwalk_sglue>
 80099c6:	bf00      	nop
 80099c8:	2000000c 	.word	0x2000000c
 80099cc:	0800b649 	.word	0x0800b649
 80099d0:	20000018 	.word	0x20000018

080099d4 <cleanup_stdio>:
 80099d4:	6841      	ldr	r1, [r0, #4]
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <cleanup_stdio+0x34>)
 80099d8:	4299      	cmp	r1, r3
 80099da:	b510      	push	{r4, lr}
 80099dc:	4604      	mov	r4, r0
 80099de:	d001      	beq.n	80099e4 <cleanup_stdio+0x10>
 80099e0:	f001 fe32 	bl	800b648 <_fflush_r>
 80099e4:	68a1      	ldr	r1, [r4, #8]
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <cleanup_stdio+0x38>)
 80099e8:	4299      	cmp	r1, r3
 80099ea:	d002      	beq.n	80099f2 <cleanup_stdio+0x1e>
 80099ec:	4620      	mov	r0, r4
 80099ee:	f001 fe2b 	bl	800b648 <_fflush_r>
 80099f2:	68e1      	ldr	r1, [r4, #12]
 80099f4:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <cleanup_stdio+0x3c>)
 80099f6:	4299      	cmp	r1, r3
 80099f8:	d004      	beq.n	8009a04 <cleanup_stdio+0x30>
 80099fa:	4620      	mov	r0, r4
 80099fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a00:	f001 be22 	b.w	800b648 <_fflush_r>
 8009a04:	bd10      	pop	{r4, pc}
 8009a06:	bf00      	nop
 8009a08:	200005a0 	.word	0x200005a0
 8009a0c:	20000608 	.word	0x20000608
 8009a10:	20000670 	.word	0x20000670

08009a14 <global_stdio_init.part.0>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <global_stdio_init.part.0+0x30>)
 8009a18:	4c0b      	ldr	r4, [pc, #44]	; (8009a48 <global_stdio_init.part.0+0x34>)
 8009a1a:	4a0c      	ldr	r2, [pc, #48]	; (8009a4c <global_stdio_init.part.0+0x38>)
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	2200      	movs	r2, #0
 8009a22:	2104      	movs	r1, #4
 8009a24:	f7ff ff94 	bl	8009950 <std>
 8009a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	2109      	movs	r1, #9
 8009a30:	f7ff ff8e 	bl	8009950 <std>
 8009a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a38:	2202      	movs	r2, #2
 8009a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a3e:	2112      	movs	r1, #18
 8009a40:	f7ff bf86 	b.w	8009950 <std>
 8009a44:	200006d8 	.word	0x200006d8
 8009a48:	200005a0 	.word	0x200005a0
 8009a4c:	080099bd 	.word	0x080099bd

08009a50 <__sfp_lock_acquire>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__sfp_lock_acquire+0x8>)
 8009a52:	f000 b920 	b.w	8009c96 <__retarget_lock_acquire_recursive>
 8009a56:	bf00      	nop
 8009a58:	200006e1 	.word	0x200006e1

08009a5c <__sfp_lock_release>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__sfp_lock_release+0x8>)
 8009a5e:	f000 b91b 	b.w	8009c98 <__retarget_lock_release_recursive>
 8009a62:	bf00      	nop
 8009a64:	200006e1 	.word	0x200006e1

08009a68 <__sinit>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	f7ff fff0 	bl	8009a50 <__sfp_lock_acquire>
 8009a70:	6a23      	ldr	r3, [r4, #32]
 8009a72:	b11b      	cbz	r3, 8009a7c <__sinit+0x14>
 8009a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a78:	f7ff bff0 	b.w	8009a5c <__sfp_lock_release>
 8009a7c:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <__sinit+0x28>)
 8009a7e:	6223      	str	r3, [r4, #32]
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <__sinit+0x2c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f5      	bne.n	8009a74 <__sinit+0xc>
 8009a88:	f7ff ffc4 	bl	8009a14 <global_stdio_init.part.0>
 8009a8c:	e7f2      	b.n	8009a74 <__sinit+0xc>
 8009a8e:	bf00      	nop
 8009a90:	080099d5 	.word	0x080099d5
 8009a94:	200006d8 	.word	0x200006d8

08009a98 <_fwalk_sglue>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	4688      	mov	r8, r1
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8009aac:	d505      	bpl.n	8009aba <_fwalk_sglue+0x22>
 8009aae:	6824      	ldr	r4, [r4, #0]
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	d1f7      	bne.n	8009aa4 <_fwalk_sglue+0xc>
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d907      	bls.n	8009ad0 <_fwalk_sglue+0x38>
 8009ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	d003      	beq.n	8009ad0 <_fwalk_sglue+0x38>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4638      	mov	r0, r7
 8009acc:	47c0      	blx	r8
 8009ace:	4306      	orrs	r6, r0
 8009ad0:	3568      	adds	r5, #104	; 0x68
 8009ad2:	e7e9      	b.n	8009aa8 <_fwalk_sglue+0x10>

08009ad4 <siprintf>:
 8009ad4:	b40e      	push	{r1, r2, r3}
 8009ad6:	b500      	push	{lr}
 8009ad8:	b09c      	sub	sp, #112	; 0x70
 8009ada:	ab1d      	add	r3, sp, #116	; 0x74
 8009adc:	9002      	str	r0, [sp, #8]
 8009ade:	9006      	str	r0, [sp, #24]
 8009ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ae4:	4809      	ldr	r0, [pc, #36]	; (8009b0c <siprintf+0x38>)
 8009ae6:	9107      	str	r1, [sp, #28]
 8009ae8:	9104      	str	r1, [sp, #16]
 8009aea:	4909      	ldr	r1, [pc, #36]	; (8009b10 <siprintf+0x3c>)
 8009aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	6800      	ldr	r0, [r0, #0]
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	a902      	add	r1, sp, #8
 8009af8:	f001 fc22 	bl	800b340 <_svfiprintf_r>
 8009afc:	9b02      	ldr	r3, [sp, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	b01c      	add	sp, #112	; 0x70
 8009b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b08:	b003      	add	sp, #12
 8009b0a:	4770      	bx	lr
 8009b0c:	20000064 	.word	0x20000064
 8009b10:	ffff0208 	.word	0xffff0208

08009b14 <__sread>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	f000 f86c 	bl	8009bf8 <_read_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	bfab      	itete	ge
 8009b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b26:	89a3      	ldrhlt	r3, [r4, #12]
 8009b28:	181b      	addge	r3, r3, r0
 8009b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b2e:	bfac      	ite	ge
 8009b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b32:	81a3      	strhlt	r3, [r4, #12]
 8009b34:	bd10      	pop	{r4, pc}

08009b36 <__swrite>:
 8009b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	898b      	ldrh	r3, [r1, #12]
 8009b3e:	05db      	lsls	r3, r3, #23
 8009b40:	4605      	mov	r5, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	4616      	mov	r6, r2
 8009b46:	d505      	bpl.n	8009b54 <__swrite+0x1e>
 8009b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f000 f840 	bl	8009bd4 <_lseek_r>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	4632      	mov	r2, r6
 8009b62:	463b      	mov	r3, r7
 8009b64:	4628      	mov	r0, r5
 8009b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6a:	f000 b857 	b.w	8009c1c <_write_r>

08009b6e <__sseek>:
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	460c      	mov	r4, r1
 8009b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b76:	f000 f82d 	bl	8009bd4 <_lseek_r>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	bf15      	itete	ne
 8009b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b8a:	81a3      	strheq	r3, [r4, #12]
 8009b8c:	bf18      	it	ne
 8009b8e:	81a3      	strhne	r3, [r4, #12]
 8009b90:	bd10      	pop	{r4, pc}

08009b92 <__sclose>:
 8009b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b96:	f000 b80d 	b.w	8009bb4 <_close_r>

08009b9a <memset>:
 8009b9a:	4402      	add	r2, r0
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d100      	bne.n	8009ba4 <memset+0xa>
 8009ba2:	4770      	bx	lr
 8009ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ba8:	e7f9      	b.n	8009b9e <memset+0x4>
	...

08009bac <_localeconv_r>:
 8009bac:	4800      	ldr	r0, [pc, #0]	; (8009bb0 <_localeconv_r+0x4>)
 8009bae:	4770      	bx	lr
 8009bb0:	20000158 	.word	0x20000158

08009bb4 <_close_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d06      	ldr	r5, [pc, #24]	; (8009bd0 <_close_r+0x1c>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	f7f9 f909 	bl	8002dd6 <_close>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_close_r+0x1a>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_close_r+0x1a>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	200006dc 	.word	0x200006dc

08009bd4 <_lseek_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d07      	ldr	r5, [pc, #28]	; (8009bf4 <_lseek_r+0x20>)
 8009bd8:	4604      	mov	r4, r0
 8009bda:	4608      	mov	r0, r1
 8009bdc:	4611      	mov	r1, r2
 8009bde:	2200      	movs	r2, #0
 8009be0:	602a      	str	r2, [r5, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	f7f9 f91e 	bl	8002e24 <_lseek>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_lseek_r+0x1e>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_lseek_r+0x1e>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	200006dc 	.word	0x200006dc

08009bf8 <_read_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d07      	ldr	r5, [pc, #28]	; (8009c18 <_read_r+0x20>)
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4608      	mov	r0, r1
 8009c00:	4611      	mov	r1, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	602a      	str	r2, [r5, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f7f9 f8ac 	bl	8002d64 <_read>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_read_r+0x1e>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_read_r+0x1e>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	200006dc 	.word	0x200006dc

08009c1c <_write_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	; (8009c3c <_write_r+0x20>)
 8009c20:	4604      	mov	r4, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f9 f8b7 	bl	8002d9e <_write>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_write_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_write_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	200006dc 	.word	0x200006dc

08009c40 <__errno>:
 8009c40:	4b01      	ldr	r3, [pc, #4]	; (8009c48 <__errno+0x8>)
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000064 	.word	0x20000064

08009c4c <__libc_init_array>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	4d0d      	ldr	r5, [pc, #52]	; (8009c84 <__libc_init_array+0x38>)
 8009c50:	4c0d      	ldr	r4, [pc, #52]	; (8009c88 <__libc_init_array+0x3c>)
 8009c52:	1b64      	subs	r4, r4, r5
 8009c54:	10a4      	asrs	r4, r4, #2
 8009c56:	2600      	movs	r6, #0
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	d109      	bne.n	8009c70 <__libc_init_array+0x24>
 8009c5c:	4d0b      	ldr	r5, [pc, #44]	; (8009c8c <__libc_init_array+0x40>)
 8009c5e:	4c0c      	ldr	r4, [pc, #48]	; (8009c90 <__libc_init_array+0x44>)
 8009c60:	f002 f896 	bl	800bd90 <_init>
 8009c64:	1b64      	subs	r4, r4, r5
 8009c66:	10a4      	asrs	r4, r4, #2
 8009c68:	2600      	movs	r6, #0
 8009c6a:	42a6      	cmp	r6, r4
 8009c6c:	d105      	bne.n	8009c7a <__libc_init_array+0x2e>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c74:	4798      	blx	r3
 8009c76:	3601      	adds	r6, #1
 8009c78:	e7ee      	b.n	8009c58 <__libc_init_array+0xc>
 8009c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7e:	4798      	blx	r3
 8009c80:	3601      	adds	r6, #1
 8009c82:	e7f2      	b.n	8009c6a <__libc_init_array+0x1e>
 8009c84:	0803a0fc 	.word	0x0803a0fc
 8009c88:	0803a0fc 	.word	0x0803a0fc
 8009c8c:	0803a0fc 	.word	0x0803a0fc
 8009c90:	0803a100 	.word	0x0803a100

08009c94 <__retarget_lock_init_recursive>:
 8009c94:	4770      	bx	lr

08009c96 <__retarget_lock_acquire_recursive>:
 8009c96:	4770      	bx	lr

08009c98 <__retarget_lock_release_recursive>:
 8009c98:	4770      	bx	lr

08009c9a <quorem>:
 8009c9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9e:	6903      	ldr	r3, [r0, #16]
 8009ca0:	690c      	ldr	r4, [r1, #16]
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	db7e      	blt.n	8009da6 <quorem+0x10c>
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	f101 0814 	add.w	r8, r1, #20
 8009cae:	f100 0514 	add.w	r5, r0, #20
 8009cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ccc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cd0:	d331      	bcc.n	8009d36 <quorem+0x9c>
 8009cd2:	f04f 0e00 	mov.w	lr, #0
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	46ac      	mov	ip, r5
 8009cda:	46f2      	mov	sl, lr
 8009cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ce0:	b293      	uxth	r3, r2
 8009ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ce6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cea:	0c1a      	lsrs	r2, r3, #16
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	ebaa 0303 	sub.w	r3, sl, r3
 8009cf2:	f8dc a000 	ldr.w	sl, [ip]
 8009cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8009cfa:	fb06 220e 	mla	r2, r6, lr, r2
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d06:	b292      	uxth	r2, r2
 8009d08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d10:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d14:	4581      	cmp	r9, r0
 8009d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009d1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d22:	d2db      	bcs.n	8009cdc <quorem+0x42>
 8009d24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d28:	b92b      	cbnz	r3, 8009d36 <quorem+0x9c>
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	d32c      	bcc.n	8009d8e <quorem+0xf4>
 8009d34:	613c      	str	r4, [r7, #16]
 8009d36:	4638      	mov	r0, r7
 8009d38:	f001 f9a8 	bl	800b08c <__mcmp>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	db22      	blt.n	8009d86 <quorem+0xec>
 8009d40:	3601      	adds	r6, #1
 8009d42:	4629      	mov	r1, r5
 8009d44:	2000      	movs	r0, #0
 8009d46:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d4a:	f8d1 c000 	ldr.w	ip, [r1]
 8009d4e:	b293      	uxth	r3, r2
 8009d50:	1ac3      	subs	r3, r0, r3
 8009d52:	0c12      	lsrs	r2, r2, #16
 8009d54:	fa13 f38c 	uxtah	r3, r3, ip
 8009d58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d66:	45c1      	cmp	r9, r8
 8009d68:	f841 3b04 	str.w	r3, [r1], #4
 8009d6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d70:	d2e9      	bcs.n	8009d46 <quorem+0xac>
 8009d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7a:	b922      	cbnz	r2, 8009d86 <quorem+0xec>
 8009d7c:	3b04      	subs	r3, #4
 8009d7e:	429d      	cmp	r5, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	d30a      	bcc.n	8009d9a <quorem+0x100>
 8009d84:	613c      	str	r4, [r7, #16]
 8009d86:	4630      	mov	r0, r6
 8009d88:	b003      	add	sp, #12
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	3b04      	subs	r3, #4
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	d1ce      	bne.n	8009d34 <quorem+0x9a>
 8009d96:	3c01      	subs	r4, #1
 8009d98:	e7c9      	b.n	8009d2e <quorem+0x94>
 8009d9a:	6812      	ldr	r2, [r2, #0]
 8009d9c:	3b04      	subs	r3, #4
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	d1f0      	bne.n	8009d84 <quorem+0xea>
 8009da2:	3c01      	subs	r4, #1
 8009da4:	e7eb      	b.n	8009d7e <quorem+0xe4>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e7ee      	b.n	8009d88 <quorem+0xee>
 8009daa:	0000      	movs	r0, r0
 8009dac:	0000      	movs	r0, r0
	...

08009db0 <_dtoa_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	ed2d 8b04 	vpush	{d8-d9}
 8009db8:	69c5      	ldr	r5, [r0, #28]
 8009dba:	b093      	sub	sp, #76	; 0x4c
 8009dbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009dc0:	ec57 6b10 	vmov	r6, r7, d0
 8009dc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dc8:	9107      	str	r1, [sp, #28]
 8009dca:	4604      	mov	r4, r0
 8009dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8009dce:	930d      	str	r3, [sp, #52]	; 0x34
 8009dd0:	b975      	cbnz	r5, 8009df0 <_dtoa_r+0x40>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f000 fe2a 	bl	800aa2c <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	61e0      	str	r0, [r4, #28]
 8009ddc:	b920      	cbnz	r0, 8009de8 <_dtoa_r+0x38>
 8009dde:	4bae      	ldr	r3, [pc, #696]	; (800a098 <_dtoa_r+0x2e8>)
 8009de0:	21ef      	movs	r1, #239	; 0xef
 8009de2:	48ae      	ldr	r0, [pc, #696]	; (800a09c <_dtoa_r+0x2ec>)
 8009de4:	f001 fc90 	bl	800b708 <__assert_func>
 8009de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dec:	6005      	str	r5, [r0, #0]
 8009dee:	60c5      	str	r5, [r0, #12]
 8009df0:	69e3      	ldr	r3, [r4, #28]
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	b151      	cbz	r1, 8009e0c <_dtoa_r+0x5c>
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	604a      	str	r2, [r1, #4]
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4093      	lsls	r3, r2
 8009dfe:	608b      	str	r3, [r1, #8]
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 ff07 	bl	800ac14 <_Bfree>
 8009e06:	69e3      	ldr	r3, [r4, #28]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	1e3b      	subs	r3, r7, #0
 8009e0e:	bfbb      	ittet	lt
 8009e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	9303      	strlt	r3, [sp, #12]
 8009e16:	2300      	movge	r3, #0
 8009e18:	2201      	movlt	r2, #1
 8009e1a:	bfac      	ite	ge
 8009e1c:	f8c8 3000 	strge.w	r3, [r8]
 8009e20:	f8c8 2000 	strlt.w	r2, [r8]
 8009e24:	4b9e      	ldr	r3, [pc, #632]	; (800a0a0 <_dtoa_r+0x2f0>)
 8009e26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009e2a:	ea33 0308 	bics.w	r3, r3, r8
 8009e2e:	d11b      	bne.n	8009e68 <_dtoa_r+0xb8>
 8009e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009e3c:	4333      	orrs	r3, r6
 8009e3e:	f000 8593 	beq.w	800a968 <_dtoa_r+0xbb8>
 8009e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e44:	b963      	cbnz	r3, 8009e60 <_dtoa_r+0xb0>
 8009e46:	4b97      	ldr	r3, [pc, #604]	; (800a0a4 <_dtoa_r+0x2f4>)
 8009e48:	e027      	b.n	8009e9a <_dtoa_r+0xea>
 8009e4a:	4b97      	ldr	r3, [pc, #604]	; (800a0a8 <_dtoa_r+0x2f8>)
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	9800      	ldr	r0, [sp, #0]
 8009e56:	b013      	add	sp, #76	; 0x4c
 8009e58:	ecbd 8b04 	vpop	{d8-d9}
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	4b90      	ldr	r3, [pc, #576]	; (800a0a4 <_dtoa_r+0x2f4>)
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	3303      	adds	r3, #3
 8009e66:	e7f3      	b.n	8009e50 <_dtoa_r+0xa0>
 8009e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	ec51 0b17 	vmov	r0, r1, d7
 8009e72:	eeb0 8a47 	vmov.f32	s16, s14
 8009e76:	eef0 8a67 	vmov.f32	s17, s15
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f7f6 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e80:	4681      	mov	r9, r0
 8009e82:	b160      	cbz	r0, 8009e9e <_dtoa_r+0xee>
 8009e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e86:	2301      	movs	r3, #1
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 8568 	beq.w	800a962 <_dtoa_r+0xbb2>
 8009e92:	4b86      	ldr	r3, [pc, #536]	; (800a0ac <_dtoa_r+0x2fc>)
 8009e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	e7da      	b.n	8009e54 <_dtoa_r+0xa4>
 8009e9e:	aa10      	add	r2, sp, #64	; 0x40
 8009ea0:	a911      	add	r1, sp, #68	; 0x44
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ea8:	eef0 0a68 	vmov.f32	s1, s17
 8009eac:	f001 f994 	bl	800b1d8 <__d2b>
 8009eb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	d07f      	beq.n	8009fba <_dtoa_r+0x20a>
 8009eba:	ee18 3a90 	vmov	r3, s17
 8009ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009ec6:	ec51 0b18 	vmov	r0, r1, d8
 8009eca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ed2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4b75      	ldr	r3, [pc, #468]	; (800a0b0 <_dtoa_r+0x300>)
 8009edc:	f7f6 f9d4 	bl	8000288 <__aeabi_dsub>
 8009ee0:	a367      	add	r3, pc, #412	; (adr r3, 800a080 <_dtoa_r+0x2d0>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 fb87 	bl	80005f8 <__aeabi_dmul>
 8009eea:	a367      	add	r3, pc, #412	; (adr r3, 800a088 <_dtoa_r+0x2d8>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 f9cc 	bl	800028c <__adddf3>
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	460f      	mov	r7, r1
 8009efa:	f7f6 fb13 	bl	8000524 <__aeabi_i2d>
 8009efe:	a364      	add	r3, pc, #400	; (adr r3, 800a090 <_dtoa_r+0x2e0>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7f6 f9bc 	bl	800028c <__adddf3>
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 fe1e 	bl	8000b58 <__aeabi_d2iz>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4683      	mov	fp, r0
 8009f20:	2300      	movs	r3, #0
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 fdd9 	bl	8000adc <__aeabi_dcmplt>
 8009f2a:	b148      	cbz	r0, 8009f40 <_dtoa_r+0x190>
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	f7f6 faf9 	bl	8000524 <__aeabi_i2d>
 8009f32:	4632      	mov	r2, r6
 8009f34:	463b      	mov	r3, r7
 8009f36:	f7f6 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f3a:	b908      	cbnz	r0, 8009f40 <_dtoa_r+0x190>
 8009f3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f40:	f1bb 0f16 	cmp.w	fp, #22
 8009f44:	d857      	bhi.n	8009ff6 <_dtoa_r+0x246>
 8009f46:	4b5b      	ldr	r3, [pc, #364]	; (800a0b4 <_dtoa_r+0x304>)
 8009f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	ec51 0b18 	vmov	r0, r1, d8
 8009f54:	f7f6 fdc2 	bl	8000adc <__aeabi_dcmplt>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d04e      	beq.n	8009ffa <_dtoa_r+0x24a>
 8009f5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f60:	2300      	movs	r3, #0
 8009f62:	930c      	str	r3, [sp, #48]	; 0x30
 8009f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f66:	1b5b      	subs	r3, r3, r5
 8009f68:	1e5a      	subs	r2, r3, #1
 8009f6a:	bf45      	ittet	mi
 8009f6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f70:	9305      	strmi	r3, [sp, #20]
 8009f72:	2300      	movpl	r3, #0
 8009f74:	2300      	movmi	r3, #0
 8009f76:	9206      	str	r2, [sp, #24]
 8009f78:	bf54      	ite	pl
 8009f7a:	9305      	strpl	r3, [sp, #20]
 8009f7c:	9306      	strmi	r3, [sp, #24]
 8009f7e:	f1bb 0f00 	cmp.w	fp, #0
 8009f82:	db3c      	blt.n	8009ffe <_dtoa_r+0x24e>
 8009f84:	9b06      	ldr	r3, [sp, #24]
 8009f86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009f8a:	445b      	add	r3, fp
 8009f8c:	9306      	str	r3, [sp, #24]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9308      	str	r3, [sp, #32]
 8009f92:	9b07      	ldr	r3, [sp, #28]
 8009f94:	2b09      	cmp	r3, #9
 8009f96:	d868      	bhi.n	800a06a <_dtoa_r+0x2ba>
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	bfc4      	itt	gt
 8009f9c:	3b04      	subgt	r3, #4
 8009f9e:	9307      	strgt	r3, [sp, #28]
 8009fa0:	9b07      	ldr	r3, [sp, #28]
 8009fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8009fa6:	bfcc      	ite	gt
 8009fa8:	2500      	movgt	r5, #0
 8009faa:	2501      	movle	r5, #1
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	f200 8085 	bhi.w	800a0bc <_dtoa_r+0x30c>
 8009fb2:	e8df f003 	tbb	[pc, r3]
 8009fb6:	3b2e      	.short	0x3b2e
 8009fb8:	5839      	.short	0x5839
 8009fba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009fbe:	441d      	add	r5, r3
 8009fc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fc4:	2b20      	cmp	r3, #32
 8009fc6:	bfc1      	itttt	gt
 8009fc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009fd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009fd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009fd8:	bfd6      	itet	le
 8009fda:	f1c3 0320 	rsble	r3, r3, #32
 8009fde:	ea48 0003 	orrgt.w	r0, r8, r3
 8009fe2:	fa06 f003 	lslle.w	r0, r6, r3
 8009fe6:	f7f6 fa8d 	bl	8000504 <__aeabi_ui2d>
 8009fea:	2201      	movs	r2, #1
 8009fec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ff0:	3d01      	subs	r5, #1
 8009ff2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ff4:	e76f      	b.n	8009ed6 <_dtoa_r+0x126>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e7b3      	b.n	8009f62 <_dtoa_r+0x1b2>
 8009ffa:	900c      	str	r0, [sp, #48]	; 0x30
 8009ffc:	e7b2      	b.n	8009f64 <_dtoa_r+0x1b4>
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	eba3 030b 	sub.w	r3, r3, fp
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	f1cb 0300 	rsb	r3, fp, #0
 800a00a:	9308      	str	r3, [sp, #32]
 800a00c:	2300      	movs	r3, #0
 800a00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a010:	e7bf      	b.n	8009f92 <_dtoa_r+0x1e2>
 800a012:	2300      	movs	r3, #0
 800a014:	9309      	str	r3, [sp, #36]	; 0x24
 800a016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a018:	2b00      	cmp	r3, #0
 800a01a:	dc52      	bgt.n	800a0c2 <_dtoa_r+0x312>
 800a01c:	2301      	movs	r3, #1
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	461a      	mov	r2, r3
 800a024:	920a      	str	r2, [sp, #40]	; 0x28
 800a026:	e00b      	b.n	800a040 <_dtoa_r+0x290>
 800a028:	2301      	movs	r3, #1
 800a02a:	e7f3      	b.n	800a014 <_dtoa_r+0x264>
 800a02c:	2300      	movs	r3, #0
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a032:	445b      	add	r3, fp
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	3301      	adds	r3, #1
 800a038:	2b01      	cmp	r3, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	bfb8      	it	lt
 800a03e:	2301      	movlt	r3, #1
 800a040:	69e0      	ldr	r0, [r4, #28]
 800a042:	2100      	movs	r1, #0
 800a044:	2204      	movs	r2, #4
 800a046:	f102 0614 	add.w	r6, r2, #20
 800a04a:	429e      	cmp	r6, r3
 800a04c:	d93d      	bls.n	800a0ca <_dtoa_r+0x31a>
 800a04e:	6041      	str	r1, [r0, #4]
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fd9f 	bl	800ab94 <_Balloc>
 800a056:	9000      	str	r0, [sp, #0]
 800a058:	2800      	cmp	r0, #0
 800a05a:	d139      	bne.n	800a0d0 <_dtoa_r+0x320>
 800a05c:	4b16      	ldr	r3, [pc, #88]	; (800a0b8 <_dtoa_r+0x308>)
 800a05e:	4602      	mov	r2, r0
 800a060:	f240 11af 	movw	r1, #431	; 0x1af
 800a064:	e6bd      	b.n	8009de2 <_dtoa_r+0x32>
 800a066:	2301      	movs	r3, #1
 800a068:	e7e1      	b.n	800a02e <_dtoa_r+0x27e>
 800a06a:	2501      	movs	r5, #1
 800a06c:	2300      	movs	r3, #0
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	9509      	str	r5, [sp, #36]	; 0x24
 800a072:	f04f 33ff 	mov.w	r3, #4294967295
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	2200      	movs	r2, #0
 800a07c:	2312      	movs	r3, #18
 800a07e:	e7d1      	b.n	800a024 <_dtoa_r+0x274>
 800a080:	636f4361 	.word	0x636f4361
 800a084:	3fd287a7 	.word	0x3fd287a7
 800a088:	8b60c8b3 	.word	0x8b60c8b3
 800a08c:	3fc68a28 	.word	0x3fc68a28
 800a090:	509f79fb 	.word	0x509f79fb
 800a094:	3fd34413 	.word	0x3fd34413
 800a098:	08039dc1 	.word	0x08039dc1
 800a09c:	08039dd8 	.word	0x08039dd8
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	08039dbd 	.word	0x08039dbd
 800a0a8:	08039db4 	.word	0x08039db4
 800a0ac:	08039d91 	.word	0x08039d91
 800a0b0:	3ff80000 	.word	0x3ff80000
 800a0b4:	08039ec8 	.word	0x08039ec8
 800a0b8:	08039e30 	.word	0x08039e30
 800a0bc:	2301      	movs	r3, #1
 800a0be:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c0:	e7d7      	b.n	800a072 <_dtoa_r+0x2c2>
 800a0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	e7ba      	b.n	800a040 <_dtoa_r+0x290>
 800a0ca:	3101      	adds	r1, #1
 800a0cc:	0052      	lsls	r2, r2, #1
 800a0ce:	e7ba      	b.n	800a046 <_dtoa_r+0x296>
 800a0d0:	69e3      	ldr	r3, [r4, #28]
 800a0d2:	9a00      	ldr	r2, [sp, #0]
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	2b0e      	cmp	r3, #14
 800a0da:	f200 80a8 	bhi.w	800a22e <_dtoa_r+0x47e>
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	f000 80a5 	beq.w	800a22e <_dtoa_r+0x47e>
 800a0e4:	f1bb 0f00 	cmp.w	fp, #0
 800a0e8:	dd38      	ble.n	800a15c <_dtoa_r+0x3ac>
 800a0ea:	4bc0      	ldr	r3, [pc, #768]	; (800a3ec <_dtoa_r+0x63c>)
 800a0ec:	f00b 020f 	and.w	r2, fp, #15
 800a0f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a0f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a0fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a100:	d019      	beq.n	800a136 <_dtoa_r+0x386>
 800a102:	4bbb      	ldr	r3, [pc, #748]	; (800a3f0 <_dtoa_r+0x640>)
 800a104:	ec51 0b18 	vmov	r0, r1, d8
 800a108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a10c:	f7f6 fb9e 	bl	800084c <__aeabi_ddiv>
 800a110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a114:	f008 080f 	and.w	r8, r8, #15
 800a118:	2503      	movs	r5, #3
 800a11a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a3f0 <_dtoa_r+0x640>
 800a11e:	f1b8 0f00 	cmp.w	r8, #0
 800a122:	d10a      	bne.n	800a13a <_dtoa_r+0x38a>
 800a124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a128:	4632      	mov	r2, r6
 800a12a:	463b      	mov	r3, r7
 800a12c:	f7f6 fb8e 	bl	800084c <__aeabi_ddiv>
 800a130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a134:	e02b      	b.n	800a18e <_dtoa_r+0x3de>
 800a136:	2502      	movs	r5, #2
 800a138:	e7ef      	b.n	800a11a <_dtoa_r+0x36a>
 800a13a:	f018 0f01 	tst.w	r8, #1
 800a13e:	d008      	beq.n	800a152 <_dtoa_r+0x3a2>
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	3501      	adds	r5, #1
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a156:	f109 0908 	add.w	r9, r9, #8
 800a15a:	e7e0      	b.n	800a11e <_dtoa_r+0x36e>
 800a15c:	f000 809f 	beq.w	800a29e <_dtoa_r+0x4ee>
 800a160:	f1cb 0600 	rsb	r6, fp, #0
 800a164:	4ba1      	ldr	r3, [pc, #644]	; (800a3ec <_dtoa_r+0x63c>)
 800a166:	4fa2      	ldr	r7, [pc, #648]	; (800a3f0 <_dtoa_r+0x640>)
 800a168:	f006 020f 	and.w	r2, r6, #15
 800a16c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	ec51 0b18 	vmov	r0, r1, d8
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a180:	1136      	asrs	r6, r6, #4
 800a182:	2300      	movs	r3, #0
 800a184:	2502      	movs	r5, #2
 800a186:	2e00      	cmp	r6, #0
 800a188:	d17e      	bne.n	800a288 <_dtoa_r+0x4d8>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1d0      	bne.n	800a130 <_dtoa_r+0x380>
 800a18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a190:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 8084 	beq.w	800a2a2 <_dtoa_r+0x4f2>
 800a19a:	4b96      	ldr	r3, [pc, #600]	; (800a3f4 <_dtoa_r+0x644>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	4640      	mov	r0, r8
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	f7f6 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d07b      	beq.n	800a2a2 <_dtoa_r+0x4f2>
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d078      	beq.n	800a2a2 <_dtoa_r+0x4f2>
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd39      	ble.n	800a22a <_dtoa_r+0x47a>
 800a1b6:	4b90      	ldr	r3, [pc, #576]	; (800a3f8 <_dtoa_r+0x648>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1c6:	9e01      	ldr	r6, [sp, #4]
 800a1c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f7f6 f9a6 	bl	8000524 <__aeabi_i2d>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	464b      	mov	r3, r9
 800a1dc:	f7f6 fa0c 	bl	80005f8 <__aeabi_dmul>
 800a1e0:	4b86      	ldr	r3, [pc, #536]	; (800a3fc <_dtoa_r+0x64c>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f7f6 f852 	bl	800028c <__adddf3>
 800a1e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f0:	9303      	str	r3, [sp, #12]
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	d158      	bne.n	800a2a8 <_dtoa_r+0x4f8>
 800a1f6:	4b82      	ldr	r3, [pc, #520]	; (800a400 <_dtoa_r+0x650>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	f7f6 f843 	bl	8000288 <__aeabi_dsub>
 800a202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a206:	4680      	mov	r8, r0
 800a208:	4689      	mov	r9, r1
 800a20a:	f7f6 fc85 	bl	8000b18 <__aeabi_dcmpgt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f040 8296 	bne.w	800a740 <_dtoa_r+0x990>
 800a214:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a218:	4640      	mov	r0, r8
 800a21a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f040 8289 	bne.w	800a73c <_dtoa_r+0x98c>
 800a22a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a22e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a230:	2b00      	cmp	r3, #0
 800a232:	f2c0 814e 	blt.w	800a4d2 <_dtoa_r+0x722>
 800a236:	f1bb 0f0e 	cmp.w	fp, #14
 800a23a:	f300 814a 	bgt.w	800a4d2 <_dtoa_r+0x722>
 800a23e:	4b6b      	ldr	r3, [pc, #428]	; (800a3ec <_dtoa_r+0x63c>)
 800a240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a244:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f280 80dc 	bge.w	800a408 <_dtoa_r+0x658>
 800a250:	9b04      	ldr	r3, [sp, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f300 80d8 	bgt.w	800a408 <_dtoa_r+0x658>
 800a258:	f040 826f 	bne.w	800a73a <_dtoa_r+0x98a>
 800a25c:	4b68      	ldr	r3, [pc, #416]	; (800a400 <_dtoa_r+0x650>)
 800a25e:	2200      	movs	r2, #0
 800a260:	4640      	mov	r0, r8
 800a262:	4649      	mov	r1, r9
 800a264:	f7f6 f9c8 	bl	80005f8 <__aeabi_dmul>
 800a268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a26c:	f7f6 fc4a 	bl	8000b04 <__aeabi_dcmpge>
 800a270:	9e04      	ldr	r6, [sp, #16]
 800a272:	4637      	mov	r7, r6
 800a274:	2800      	cmp	r0, #0
 800a276:	f040 8245 	bne.w	800a704 <_dtoa_r+0x954>
 800a27a:	9d00      	ldr	r5, [sp, #0]
 800a27c:	2331      	movs	r3, #49	; 0x31
 800a27e:	f805 3b01 	strb.w	r3, [r5], #1
 800a282:	f10b 0b01 	add.w	fp, fp, #1
 800a286:	e241      	b.n	800a70c <_dtoa_r+0x95c>
 800a288:	07f2      	lsls	r2, r6, #31
 800a28a:	d505      	bpl.n	800a298 <_dtoa_r+0x4e8>
 800a28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	3501      	adds	r5, #1
 800a296:	2301      	movs	r3, #1
 800a298:	1076      	asrs	r6, r6, #1
 800a29a:	3708      	adds	r7, #8
 800a29c:	e773      	b.n	800a186 <_dtoa_r+0x3d6>
 800a29e:	2502      	movs	r5, #2
 800a2a0:	e775      	b.n	800a18e <_dtoa_r+0x3de>
 800a2a2:	9e04      	ldr	r6, [sp, #16]
 800a2a4:	465f      	mov	r7, fp
 800a2a6:	e792      	b.n	800a1ce <_dtoa_r+0x41e>
 800a2a8:	9900      	ldr	r1, [sp, #0]
 800a2aa:	4b50      	ldr	r3, [pc, #320]	; (800a3ec <_dtoa_r+0x63c>)
 800a2ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2b0:	4431      	add	r1, r6
 800a2b2:	9102      	str	r1, [sp, #8]
 800a2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a2ba:	eef0 9a67 	vmov.f32	s19, s15
 800a2be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	d044      	beq.n	800a354 <_dtoa_r+0x5a4>
 800a2ca:	494e      	ldr	r1, [pc, #312]	; (800a404 <_dtoa_r+0x654>)
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7f6 fabd 	bl	800084c <__aeabi_ddiv>
 800a2d2:	ec53 2b19 	vmov	r2, r3, d9
 800a2d6:	f7f5 ffd7 	bl	8000288 <__aeabi_dsub>
 800a2da:	9d00      	ldr	r5, [sp, #0]
 800a2dc:	ec41 0b19 	vmov	d9, r0, r1
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7f6 fc38 	bl	8000b58 <__aeabi_d2iz>
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	f7f6 f91b 	bl	8000524 <__aeabi_i2d>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f5 ffc7 	bl	8000288 <__aeabi_dsub>
 800a2fa:	3630      	adds	r6, #48	; 0x30
 800a2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a300:	ec53 2b19 	vmov	r2, r3, d9
 800a304:	4680      	mov	r8, r0
 800a306:	4689      	mov	r9, r1
 800a308:	f7f6 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d164      	bne.n	800a3da <_dtoa_r+0x62a>
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	4937      	ldr	r1, [pc, #220]	; (800a3f4 <_dtoa_r+0x644>)
 800a316:	2000      	movs	r0, #0
 800a318:	f7f5 ffb6 	bl	8000288 <__aeabi_dsub>
 800a31c:	ec53 2b19 	vmov	r2, r3, d9
 800a320:	f7f6 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 80b6 	bne.w	800a496 <_dtoa_r+0x6e6>
 800a32a:	9b02      	ldr	r3, [sp, #8]
 800a32c:	429d      	cmp	r5, r3
 800a32e:	f43f af7c 	beq.w	800a22a <_dtoa_r+0x47a>
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <_dtoa_r+0x648>)
 800a334:	ec51 0b19 	vmov	r0, r1, d9
 800a338:	2200      	movs	r2, #0
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	4b2e      	ldr	r3, [pc, #184]	; (800a3f8 <_dtoa_r+0x648>)
 800a340:	ec41 0b19 	vmov	d9, r0, r1
 800a344:	2200      	movs	r2, #0
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	4680      	mov	r8, r0
 800a350:	4689      	mov	r9, r1
 800a352:	e7c5      	b.n	800a2e0 <_dtoa_r+0x530>
 800a354:	ec51 0b17 	vmov	r0, r1, d7
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	9b02      	ldr	r3, [sp, #8]
 800a35e:	9d00      	ldr	r5, [sp, #0]
 800a360:	930f      	str	r3, [sp, #60]	; 0x3c
 800a362:	ec41 0b19 	vmov	d9, r0, r1
 800a366:	4649      	mov	r1, r9
 800a368:	4640      	mov	r0, r8
 800a36a:	f7f6 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800a36e:	4606      	mov	r6, r0
 800a370:	f7f6 f8d8 	bl	8000524 <__aeabi_i2d>
 800a374:	3630      	adds	r6, #48	; 0x30
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4640      	mov	r0, r8
 800a37c:	4649      	mov	r1, r9
 800a37e:	f7f5 ff83 	bl	8000288 <__aeabi_dsub>
 800a382:	f805 6b01 	strb.w	r6, [r5], #1
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	429d      	cmp	r5, r3
 800a38a:	4680      	mov	r8, r0
 800a38c:	4689      	mov	r9, r1
 800a38e:	f04f 0200 	mov.w	r2, #0
 800a392:	d124      	bne.n	800a3de <_dtoa_r+0x62e>
 800a394:	4b1b      	ldr	r3, [pc, #108]	; (800a404 <_dtoa_r+0x654>)
 800a396:	ec51 0b19 	vmov	r0, r1, d9
 800a39a:	f7f5 ff77 	bl	800028c <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	f7f6 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d173      	bne.n	800a496 <_dtoa_r+0x6e6>
 800a3ae:	ec53 2b19 	vmov	r2, r3, d9
 800a3b2:	4914      	ldr	r1, [pc, #80]	; (800a404 <_dtoa_r+0x654>)
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f7f5 ff67 	bl	8000288 <__aeabi_dsub>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	f7f6 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f43f af2f 	beq.w	800a22a <_dtoa_r+0x47a>
 800a3cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3ce:	1e6b      	subs	r3, r5, #1
 800a3d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3d6:	2b30      	cmp	r3, #48	; 0x30
 800a3d8:	d0f8      	beq.n	800a3cc <_dtoa_r+0x61c>
 800a3da:	46bb      	mov	fp, r7
 800a3dc:	e04a      	b.n	800a474 <_dtoa_r+0x6c4>
 800a3de:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <_dtoa_r+0x648>)
 800a3e0:	f7f6 f90a 	bl	80005f8 <__aeabi_dmul>
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	4689      	mov	r9, r1
 800a3e8:	e7bd      	b.n	800a366 <_dtoa_r+0x5b6>
 800a3ea:	bf00      	nop
 800a3ec:	08039ec8 	.word	0x08039ec8
 800a3f0:	08039ea0 	.word	0x08039ea0
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	40240000 	.word	0x40240000
 800a3fc:	401c0000 	.word	0x401c0000
 800a400:	40140000 	.word	0x40140000
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a40c:	9d00      	ldr	r5, [sp, #0]
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 fa19 	bl	800084c <__aeabi_ddiv>
 800a41a:	f7f6 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800a41e:	9001      	str	r0, [sp, #4]
 800a420:	f7f6 f880 	bl	8000524 <__aeabi_i2d>
 800a424:	4642      	mov	r2, r8
 800a426:	464b      	mov	r3, r9
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4630      	mov	r0, r6
 800a432:	4639      	mov	r1, r7
 800a434:	f7f5 ff28 	bl	8000288 <__aeabi_dsub>
 800a438:	9e01      	ldr	r6, [sp, #4]
 800a43a:	9f04      	ldr	r7, [sp, #16]
 800a43c:	3630      	adds	r6, #48	; 0x30
 800a43e:	f805 6b01 	strb.w	r6, [r5], #1
 800a442:	9e00      	ldr	r6, [sp, #0]
 800a444:	1bae      	subs	r6, r5, r6
 800a446:	42b7      	cmp	r7, r6
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	d134      	bne.n	800a4b8 <_dtoa_r+0x708>
 800a44e:	f7f5 ff1d 	bl	800028c <__adddf3>
 800a452:	4642      	mov	r2, r8
 800a454:	464b      	mov	r3, r9
 800a456:	4606      	mov	r6, r0
 800a458:	460f      	mov	r7, r1
 800a45a:	f7f6 fb5d 	bl	8000b18 <__aeabi_dcmpgt>
 800a45e:	b9c8      	cbnz	r0, 800a494 <_dtoa_r+0x6e4>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f6 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a46c:	b110      	cbz	r0, 800a474 <_dtoa_r+0x6c4>
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	07db      	lsls	r3, r3, #31
 800a472:	d40f      	bmi.n	800a494 <_dtoa_r+0x6e4>
 800a474:	4651      	mov	r1, sl
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fbcc 	bl	800ac14 <_Bfree>
 800a47c:	2300      	movs	r3, #0
 800a47e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a480:	702b      	strb	r3, [r5, #0]
 800a482:	f10b 0301 	add.w	r3, fp, #1
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f43f ace2 	beq.w	8009e54 <_dtoa_r+0xa4>
 800a490:	601d      	str	r5, [r3, #0]
 800a492:	e4df      	b.n	8009e54 <_dtoa_r+0xa4>
 800a494:	465f      	mov	r7, fp
 800a496:	462b      	mov	r3, r5
 800a498:	461d      	mov	r5, r3
 800a49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a49e:	2a39      	cmp	r2, #57	; 0x39
 800a4a0:	d106      	bne.n	800a4b0 <_dtoa_r+0x700>
 800a4a2:	9a00      	ldr	r2, [sp, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d1f7      	bne.n	800a498 <_dtoa_r+0x6e8>
 800a4a8:	9900      	ldr	r1, [sp, #0]
 800a4aa:	2230      	movs	r2, #48	; 0x30
 800a4ac:	3701      	adds	r7, #1
 800a4ae:	700a      	strb	r2, [r1, #0]
 800a4b0:	781a      	ldrb	r2, [r3, #0]
 800a4b2:	3201      	adds	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	e790      	b.n	800a3da <_dtoa_r+0x62a>
 800a4b8:	4ba3      	ldr	r3, [pc, #652]	; (800a748 <_dtoa_r+0x998>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f7f6 f89c 	bl	80005f8 <__aeabi_dmul>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	f7f6 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d09e      	beq.n	800a40e <_dtoa_r+0x65e>
 800a4d0:	e7d0      	b.n	800a474 <_dtoa_r+0x6c4>
 800a4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	f000 80ca 	beq.w	800a66e <_dtoa_r+0x8be>
 800a4da:	9a07      	ldr	r2, [sp, #28]
 800a4dc:	2a01      	cmp	r2, #1
 800a4de:	f300 80ad 	bgt.w	800a63c <_dtoa_r+0x88c>
 800a4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	f000 80a5 	beq.w	800a634 <_dtoa_r+0x884>
 800a4ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4ee:	9e08      	ldr	r6, [sp, #32]
 800a4f0:	9d05      	ldr	r5, [sp, #20]
 800a4f2:	9a05      	ldr	r2, [sp, #20]
 800a4f4:	441a      	add	r2, r3
 800a4f6:	9205      	str	r2, [sp, #20]
 800a4f8:	9a06      	ldr	r2, [sp, #24]
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	441a      	add	r2, r3
 800a4fe:	4620      	mov	r0, r4
 800a500:	9206      	str	r2, [sp, #24]
 800a502:	f000 fc3d 	bl	800ad80 <__i2b>
 800a506:	4607      	mov	r7, r0
 800a508:	b165      	cbz	r5, 800a524 <_dtoa_r+0x774>
 800a50a:	9b06      	ldr	r3, [sp, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	dd09      	ble.n	800a524 <_dtoa_r+0x774>
 800a510:	42ab      	cmp	r3, r5
 800a512:	9a05      	ldr	r2, [sp, #20]
 800a514:	bfa8      	it	ge
 800a516:	462b      	movge	r3, r5
 800a518:	1ad2      	subs	r2, r2, r3
 800a51a:	9205      	str	r2, [sp, #20]
 800a51c:	9a06      	ldr	r2, [sp, #24]
 800a51e:	1aed      	subs	r5, r5, r3
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	9306      	str	r3, [sp, #24]
 800a524:	9b08      	ldr	r3, [sp, #32]
 800a526:	b1f3      	cbz	r3, 800a566 <_dtoa_r+0x7b6>
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 80a3 	beq.w	800a676 <_dtoa_r+0x8c6>
 800a530:	2e00      	cmp	r6, #0
 800a532:	dd10      	ble.n	800a556 <_dtoa_r+0x7a6>
 800a534:	4639      	mov	r1, r7
 800a536:	4632      	mov	r2, r6
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fce1 	bl	800af00 <__pow5mult>
 800a53e:	4652      	mov	r2, sl
 800a540:	4601      	mov	r1, r0
 800a542:	4607      	mov	r7, r0
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fc31 	bl	800adac <__multiply>
 800a54a:	4651      	mov	r1, sl
 800a54c:	4680      	mov	r8, r0
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 fb60 	bl	800ac14 <_Bfree>
 800a554:	46c2      	mov	sl, r8
 800a556:	9b08      	ldr	r3, [sp, #32]
 800a558:	1b9a      	subs	r2, r3, r6
 800a55a:	d004      	beq.n	800a566 <_dtoa_r+0x7b6>
 800a55c:	4651      	mov	r1, sl
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 fcce 	bl	800af00 <__pow5mult>
 800a564:	4682      	mov	sl, r0
 800a566:	2101      	movs	r1, #1
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fc09 	bl	800ad80 <__i2b>
 800a56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a570:	2b00      	cmp	r3, #0
 800a572:	4606      	mov	r6, r0
 800a574:	f340 8081 	ble.w	800a67a <_dtoa_r+0x8ca>
 800a578:	461a      	mov	r2, r3
 800a57a:	4601      	mov	r1, r0
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fcbf 	bl	800af00 <__pow5mult>
 800a582:	9b07      	ldr	r3, [sp, #28]
 800a584:	2b01      	cmp	r3, #1
 800a586:	4606      	mov	r6, r0
 800a588:	dd7a      	ble.n	800a680 <_dtoa_r+0x8d0>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	6933      	ldr	r3, [r6, #16]
 800a590:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a594:	6918      	ldr	r0, [r3, #16]
 800a596:	f000 fba5 	bl	800ace4 <__hi0bits>
 800a59a:	f1c0 0020 	rsb	r0, r0, #32
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	4418      	add	r0, r3
 800a5a2:	f010 001f 	ands.w	r0, r0, #31
 800a5a6:	f000 8094 	beq.w	800a6d2 <_dtoa_r+0x922>
 800a5aa:	f1c0 0320 	rsb	r3, r0, #32
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	f340 8085 	ble.w	800a6be <_dtoa_r+0x90e>
 800a5b4:	9b05      	ldr	r3, [sp, #20]
 800a5b6:	f1c0 001c 	rsb	r0, r0, #28
 800a5ba:	4403      	add	r3, r0
 800a5bc:	9305      	str	r3, [sp, #20]
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	4403      	add	r3, r0
 800a5c2:	4405      	add	r5, r0
 800a5c4:	9306      	str	r3, [sp, #24]
 800a5c6:	9b05      	ldr	r3, [sp, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	dd05      	ble.n	800a5d8 <_dtoa_r+0x828>
 800a5cc:	4651      	mov	r1, sl
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fcef 	bl	800afb4 <__lshift>
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	9b06      	ldr	r3, [sp, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd05      	ble.n	800a5ea <_dtoa_r+0x83a>
 800a5de:	4631      	mov	r1, r6
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fce6 	bl	800afb4 <__lshift>
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d072      	beq.n	800a6d6 <_dtoa_r+0x926>
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	f000 fd4a 	bl	800b08c <__mcmp>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	da6c      	bge.n	800a6d6 <_dtoa_r+0x926>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4651      	mov	r1, sl
 800a600:	220a      	movs	r2, #10
 800a602:	4620      	mov	r0, r4
 800a604:	f000 fb28 	bl	800ac58 <__multadd>
 800a608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a60e:	4682      	mov	sl, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 81b0 	beq.w	800a976 <_dtoa_r+0xbc6>
 800a616:	2300      	movs	r3, #0
 800a618:	4639      	mov	r1, r7
 800a61a:	220a      	movs	r2, #10
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fb1b 	bl	800ac58 <__multadd>
 800a622:	9b01      	ldr	r3, [sp, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	4607      	mov	r7, r0
 800a628:	f300 8096 	bgt.w	800a758 <_dtoa_r+0x9a8>
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	dc59      	bgt.n	800a6e6 <_dtoa_r+0x936>
 800a632:	e091      	b.n	800a758 <_dtoa_r+0x9a8>
 800a634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a63a:	e758      	b.n	800a4ee <_dtoa_r+0x73e>
 800a63c:	9b04      	ldr	r3, [sp, #16]
 800a63e:	1e5e      	subs	r6, r3, #1
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	42b3      	cmp	r3, r6
 800a644:	bfbf      	itttt	lt
 800a646:	9b08      	ldrlt	r3, [sp, #32]
 800a648:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a64a:	9608      	strlt	r6, [sp, #32]
 800a64c:	1af3      	sublt	r3, r6, r3
 800a64e:	bfb4      	ite	lt
 800a650:	18d2      	addlt	r2, r2, r3
 800a652:	1b9e      	subge	r6, r3, r6
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	bfbc      	itt	lt
 800a658:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a65a:	2600      	movlt	r6, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bfb7      	itett	lt
 800a660:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a664:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a668:	1a9d      	sublt	r5, r3, r2
 800a66a:	2300      	movlt	r3, #0
 800a66c:	e741      	b.n	800a4f2 <_dtoa_r+0x742>
 800a66e:	9e08      	ldr	r6, [sp, #32]
 800a670:	9d05      	ldr	r5, [sp, #20]
 800a672:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a674:	e748      	b.n	800a508 <_dtoa_r+0x758>
 800a676:	9a08      	ldr	r2, [sp, #32]
 800a678:	e770      	b.n	800a55c <_dtoa_r+0x7ac>
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	dc19      	bgt.n	800a6b4 <_dtoa_r+0x904>
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	b9bb      	cbnz	r3, 800a6b4 <_dtoa_r+0x904>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a68a:	b99b      	cbnz	r3, 800a6b4 <_dtoa_r+0x904>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a692:	0d1b      	lsrs	r3, r3, #20
 800a694:	051b      	lsls	r3, r3, #20
 800a696:	b183      	cbz	r3, 800a6ba <_dtoa_r+0x90a>
 800a698:	9b05      	ldr	r3, [sp, #20]
 800a69a:	3301      	adds	r3, #1
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	9306      	str	r3, [sp, #24]
 800a6a4:	f04f 0801 	mov.w	r8, #1
 800a6a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f47f af6f 	bne.w	800a58e <_dtoa_r+0x7de>
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	e774      	b.n	800a59e <_dtoa_r+0x7ee>
 800a6b4:	f04f 0800 	mov.w	r8, #0
 800a6b8:	e7f6      	b.n	800a6a8 <_dtoa_r+0x8f8>
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	e7f4      	b.n	800a6a8 <_dtoa_r+0x8f8>
 800a6be:	d082      	beq.n	800a5c6 <_dtoa_r+0x816>
 800a6c0:	9a05      	ldr	r2, [sp, #20]
 800a6c2:	331c      	adds	r3, #28
 800a6c4:	441a      	add	r2, r3
 800a6c6:	9205      	str	r2, [sp, #20]
 800a6c8:	9a06      	ldr	r2, [sp, #24]
 800a6ca:	441a      	add	r2, r3
 800a6cc:	441d      	add	r5, r3
 800a6ce:	9206      	str	r2, [sp, #24]
 800a6d0:	e779      	b.n	800a5c6 <_dtoa_r+0x816>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	e7f4      	b.n	800a6c0 <_dtoa_r+0x910>
 800a6d6:	9b04      	ldr	r3, [sp, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc37      	bgt.n	800a74c <_dtoa_r+0x99c>
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	dd34      	ble.n	800a74c <_dtoa_r+0x99c>
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	9b01      	ldr	r3, [sp, #4]
 800a6e8:	b963      	cbnz	r3, 800a704 <_dtoa_r+0x954>
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	2205      	movs	r2, #5
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fab2 	bl	800ac58 <__multadd>
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	f000 fcc7 	bl	800b08c <__mcmp>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f73f adbb 	bgt.w	800a27a <_dtoa_r+0x4ca>
 800a704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a706:	9d00      	ldr	r5, [sp, #0]
 800a708:	ea6f 0b03 	mvn.w	fp, r3
 800a70c:	f04f 0800 	mov.w	r8, #0
 800a710:	4631      	mov	r1, r6
 800a712:	4620      	mov	r0, r4
 800a714:	f000 fa7e 	bl	800ac14 <_Bfree>
 800a718:	2f00      	cmp	r7, #0
 800a71a:	f43f aeab 	beq.w	800a474 <_dtoa_r+0x6c4>
 800a71e:	f1b8 0f00 	cmp.w	r8, #0
 800a722:	d005      	beq.n	800a730 <_dtoa_r+0x980>
 800a724:	45b8      	cmp	r8, r7
 800a726:	d003      	beq.n	800a730 <_dtoa_r+0x980>
 800a728:	4641      	mov	r1, r8
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fa72 	bl	800ac14 <_Bfree>
 800a730:	4639      	mov	r1, r7
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fa6e 	bl	800ac14 <_Bfree>
 800a738:	e69c      	b.n	800a474 <_dtoa_r+0x6c4>
 800a73a:	2600      	movs	r6, #0
 800a73c:	4637      	mov	r7, r6
 800a73e:	e7e1      	b.n	800a704 <_dtoa_r+0x954>
 800a740:	46bb      	mov	fp, r7
 800a742:	4637      	mov	r7, r6
 800a744:	e599      	b.n	800a27a <_dtoa_r+0x4ca>
 800a746:	bf00      	nop
 800a748:	40240000 	.word	0x40240000
 800a74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80c8 	beq.w	800a8e4 <_dtoa_r+0xb34>
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	2d00      	cmp	r5, #0
 800a75a:	dd05      	ble.n	800a768 <_dtoa_r+0x9b8>
 800a75c:	4639      	mov	r1, r7
 800a75e:	462a      	mov	r2, r5
 800a760:	4620      	mov	r0, r4
 800a762:	f000 fc27 	bl	800afb4 <__lshift>
 800a766:	4607      	mov	r7, r0
 800a768:	f1b8 0f00 	cmp.w	r8, #0
 800a76c:	d05b      	beq.n	800a826 <_dtoa_r+0xa76>
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	4620      	mov	r0, r4
 800a772:	f000 fa0f 	bl	800ab94 <_Balloc>
 800a776:	4605      	mov	r5, r0
 800a778:	b928      	cbnz	r0, 800a786 <_dtoa_r+0x9d6>
 800a77a:	4b83      	ldr	r3, [pc, #524]	; (800a988 <_dtoa_r+0xbd8>)
 800a77c:	4602      	mov	r2, r0
 800a77e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a782:	f7ff bb2e 	b.w	8009de2 <_dtoa_r+0x32>
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	3202      	adds	r2, #2
 800a78a:	0092      	lsls	r2, r2, #2
 800a78c:	f107 010c 	add.w	r1, r7, #12
 800a790:	300c      	adds	r0, #12
 800a792:	f000 ffab 	bl	800b6ec <memcpy>
 800a796:	2201      	movs	r2, #1
 800a798:	4629      	mov	r1, r5
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fc0a 	bl	800afb4 <__lshift>
 800a7a0:	9b00      	ldr	r3, [sp, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	9308      	str	r3, [sp, #32]
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	46b8      	mov	r8, r7
 800a7b6:	9306      	str	r3, [sp, #24]
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f7ff fa69 	bl	8009c9a <quorem>
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	9002      	str	r0, [sp, #8]
 800a7cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f000 fc5b 	bl	800b08c <__mcmp>
 800a7d6:	463a      	mov	r2, r7
 800a7d8:	9005      	str	r0, [sp, #20]
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fc71 	bl	800b0c4 <__mdiff>
 800a7e2:	68c2      	ldr	r2, [r0, #12]
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	bb02      	cbnz	r2, 800a82a <_dtoa_r+0xa7a>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	f000 fc4e 	bl	800b08c <__mcmp>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f8:	f000 fa0c 	bl	800ac14 <_Bfree>
 800a7fc:	9b07      	ldr	r3, [sp, #28]
 800a7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a800:	9d04      	ldr	r5, [sp, #16]
 800a802:	ea43 0102 	orr.w	r1, r3, r2
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	4319      	orrs	r1, r3
 800a80a:	d110      	bne.n	800a82e <_dtoa_r+0xa7e>
 800a80c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a810:	d029      	beq.n	800a866 <_dtoa_r+0xab6>
 800a812:	9b05      	ldr	r3, [sp, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	dd02      	ble.n	800a81e <_dtoa_r+0xa6e>
 800a818:	9b02      	ldr	r3, [sp, #8]
 800a81a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	f883 9000 	strb.w	r9, [r3]
 800a824:	e774      	b.n	800a710 <_dtoa_r+0x960>
 800a826:	4638      	mov	r0, r7
 800a828:	e7ba      	b.n	800a7a0 <_dtoa_r+0x9f0>
 800a82a:	2201      	movs	r2, #1
 800a82c:	e7e1      	b.n	800a7f2 <_dtoa_r+0xa42>
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	db04      	blt.n	800a83e <_dtoa_r+0xa8e>
 800a834:	9907      	ldr	r1, [sp, #28]
 800a836:	430b      	orrs	r3, r1
 800a838:	9906      	ldr	r1, [sp, #24]
 800a83a:	430b      	orrs	r3, r1
 800a83c:	d120      	bne.n	800a880 <_dtoa_r+0xad0>
 800a83e:	2a00      	cmp	r2, #0
 800a840:	dded      	ble.n	800a81e <_dtoa_r+0xa6e>
 800a842:	4651      	mov	r1, sl
 800a844:	2201      	movs	r2, #1
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fbb4 	bl	800afb4 <__lshift>
 800a84c:	4631      	mov	r1, r6
 800a84e:	4682      	mov	sl, r0
 800a850:	f000 fc1c 	bl	800b08c <__mcmp>
 800a854:	2800      	cmp	r0, #0
 800a856:	dc03      	bgt.n	800a860 <_dtoa_r+0xab0>
 800a858:	d1e1      	bne.n	800a81e <_dtoa_r+0xa6e>
 800a85a:	f019 0f01 	tst.w	r9, #1
 800a85e:	d0de      	beq.n	800a81e <_dtoa_r+0xa6e>
 800a860:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a864:	d1d8      	bne.n	800a818 <_dtoa_r+0xa68>
 800a866:	9a01      	ldr	r2, [sp, #4]
 800a868:	2339      	movs	r3, #57	; 0x39
 800a86a:	7013      	strb	r3, [r2, #0]
 800a86c:	462b      	mov	r3, r5
 800a86e:	461d      	mov	r5, r3
 800a870:	3b01      	subs	r3, #1
 800a872:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a876:	2a39      	cmp	r2, #57	; 0x39
 800a878:	d06c      	beq.n	800a954 <_dtoa_r+0xba4>
 800a87a:	3201      	adds	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	e747      	b.n	800a710 <_dtoa_r+0x960>
 800a880:	2a00      	cmp	r2, #0
 800a882:	dd07      	ble.n	800a894 <_dtoa_r+0xae4>
 800a884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a888:	d0ed      	beq.n	800a866 <_dtoa_r+0xab6>
 800a88a:	9a01      	ldr	r2, [sp, #4]
 800a88c:	f109 0301 	add.w	r3, r9, #1
 800a890:	7013      	strb	r3, [r2, #0]
 800a892:	e73d      	b.n	800a710 <_dtoa_r+0x960>
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	9a08      	ldr	r2, [sp, #32]
 800a898:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d043      	beq.n	800a928 <_dtoa_r+0xb78>
 800a8a0:	4651      	mov	r1, sl
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 f9d6 	bl	800ac58 <__multadd>
 800a8ac:	45b8      	cmp	r8, r7
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	f04f 020a 	mov.w	r2, #10
 800a8b8:	4641      	mov	r1, r8
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	d107      	bne.n	800a8ce <_dtoa_r+0xb1e>
 800a8be:	f000 f9cb 	bl	800ac58 <__multadd>
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	e775      	b.n	800a7ba <_dtoa_r+0xa0a>
 800a8ce:	f000 f9c3 	bl	800ac58 <__multadd>
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f9bc 	bl	800ac58 <__multadd>
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	e7f0      	b.n	800a8c6 <_dtoa_r+0xb16>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	9d00      	ldr	r5, [sp, #0]
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	f7ff f9d4 	bl	8009c9a <quorem>
 800a8f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8f6:	9b00      	ldr	r3, [sp, #0]
 800a8f8:	f805 9b01 	strb.w	r9, [r5], #1
 800a8fc:	1aea      	subs	r2, r5, r3
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	4293      	cmp	r3, r2
 800a902:	dd07      	ble.n	800a914 <_dtoa_r+0xb64>
 800a904:	4651      	mov	r1, sl
 800a906:	2300      	movs	r3, #0
 800a908:	220a      	movs	r2, #10
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 f9a4 	bl	800ac58 <__multadd>
 800a910:	4682      	mov	sl, r0
 800a912:	e7ea      	b.n	800a8ea <_dtoa_r+0xb3a>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfc8      	it	gt
 800a91a:	461d      	movgt	r5, r3
 800a91c:	9b00      	ldr	r3, [sp, #0]
 800a91e:	bfd8      	it	le
 800a920:	2501      	movle	r5, #1
 800a922:	441d      	add	r5, r3
 800a924:	f04f 0800 	mov.w	r8, #0
 800a928:	4651      	mov	r1, sl
 800a92a:	2201      	movs	r2, #1
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 fb41 	bl	800afb4 <__lshift>
 800a932:	4631      	mov	r1, r6
 800a934:	4682      	mov	sl, r0
 800a936:	f000 fba9 	bl	800b08c <__mcmp>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	dc96      	bgt.n	800a86c <_dtoa_r+0xabc>
 800a93e:	d102      	bne.n	800a946 <_dtoa_r+0xb96>
 800a940:	f019 0f01 	tst.w	r9, #1
 800a944:	d192      	bne.n	800a86c <_dtoa_r+0xabc>
 800a946:	462b      	mov	r3, r5
 800a948:	461d      	mov	r5, r3
 800a94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94e:	2a30      	cmp	r2, #48	; 0x30
 800a950:	d0fa      	beq.n	800a948 <_dtoa_r+0xb98>
 800a952:	e6dd      	b.n	800a710 <_dtoa_r+0x960>
 800a954:	9a00      	ldr	r2, [sp, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d189      	bne.n	800a86e <_dtoa_r+0xabe>
 800a95a:	f10b 0b01 	add.w	fp, fp, #1
 800a95e:	2331      	movs	r3, #49	; 0x31
 800a960:	e796      	b.n	800a890 <_dtoa_r+0xae0>
 800a962:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <_dtoa_r+0xbdc>)
 800a964:	f7ff ba99 	b.w	8009e9a <_dtoa_r+0xea>
 800a968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f47f aa6d 	bne.w	8009e4a <_dtoa_r+0x9a>
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <_dtoa_r+0xbe0>)
 800a972:	f7ff ba92 	b.w	8009e9a <_dtoa_r+0xea>
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	dcb5      	bgt.n	800a8e8 <_dtoa_r+0xb38>
 800a97c:	9b07      	ldr	r3, [sp, #28]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	f73f aeb1 	bgt.w	800a6e6 <_dtoa_r+0x936>
 800a984:	e7b0      	b.n	800a8e8 <_dtoa_r+0xb38>
 800a986:	bf00      	nop
 800a988:	08039e30 	.word	0x08039e30
 800a98c:	08039d90 	.word	0x08039d90
 800a990:	08039db4 	.word	0x08039db4

0800a994 <_free_r>:
 800a994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a996:	2900      	cmp	r1, #0
 800a998:	d044      	beq.n	800aa24 <_free_r+0x90>
 800a99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99e:	9001      	str	r0, [sp, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a9a6:	bfb8      	it	lt
 800a9a8:	18e4      	addlt	r4, r4, r3
 800a9aa:	f000 f8e7 	bl	800ab7c <__malloc_lock>
 800a9ae:	4a1e      	ldr	r2, [pc, #120]	; (800aa28 <_free_r+0x94>)
 800a9b0:	9801      	ldr	r0, [sp, #4]
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	b933      	cbnz	r3, 800a9c4 <_free_r+0x30>
 800a9b6:	6063      	str	r3, [r4, #4]
 800a9b8:	6014      	str	r4, [r2, #0]
 800a9ba:	b003      	add	sp, #12
 800a9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9c0:	f000 b8e2 	b.w	800ab88 <__malloc_unlock>
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d908      	bls.n	800a9da <_free_r+0x46>
 800a9c8:	6825      	ldr	r5, [r4, #0]
 800a9ca:	1961      	adds	r1, r4, r5
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	bf01      	itttt	eq
 800a9d0:	6819      	ldreq	r1, [r3, #0]
 800a9d2:	685b      	ldreq	r3, [r3, #4]
 800a9d4:	1949      	addeq	r1, r1, r5
 800a9d6:	6021      	streq	r1, [r4, #0]
 800a9d8:	e7ed      	b.n	800a9b6 <_free_r+0x22>
 800a9da:	461a      	mov	r2, r3
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	b10b      	cbz	r3, 800a9e4 <_free_r+0x50>
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	d9fa      	bls.n	800a9da <_free_r+0x46>
 800a9e4:	6811      	ldr	r1, [r2, #0]
 800a9e6:	1855      	adds	r5, r2, r1
 800a9e8:	42a5      	cmp	r5, r4
 800a9ea:	d10b      	bne.n	800aa04 <_free_r+0x70>
 800a9ec:	6824      	ldr	r4, [r4, #0]
 800a9ee:	4421      	add	r1, r4
 800a9f0:	1854      	adds	r4, r2, r1
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	6011      	str	r1, [r2, #0]
 800a9f6:	d1e0      	bne.n	800a9ba <_free_r+0x26>
 800a9f8:	681c      	ldr	r4, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	6053      	str	r3, [r2, #4]
 800a9fe:	440c      	add	r4, r1
 800aa00:	6014      	str	r4, [r2, #0]
 800aa02:	e7da      	b.n	800a9ba <_free_r+0x26>
 800aa04:	d902      	bls.n	800aa0c <_free_r+0x78>
 800aa06:	230c      	movs	r3, #12
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	e7d6      	b.n	800a9ba <_free_r+0x26>
 800aa0c:	6825      	ldr	r5, [r4, #0]
 800aa0e:	1961      	adds	r1, r4, r5
 800aa10:	428b      	cmp	r3, r1
 800aa12:	bf04      	itt	eq
 800aa14:	6819      	ldreq	r1, [r3, #0]
 800aa16:	685b      	ldreq	r3, [r3, #4]
 800aa18:	6063      	str	r3, [r4, #4]
 800aa1a:	bf04      	itt	eq
 800aa1c:	1949      	addeq	r1, r1, r5
 800aa1e:	6021      	streq	r1, [r4, #0]
 800aa20:	6054      	str	r4, [r2, #4]
 800aa22:	e7ca      	b.n	800a9ba <_free_r+0x26>
 800aa24:	b003      	add	sp, #12
 800aa26:	bd30      	pop	{r4, r5, pc}
 800aa28:	200006e4 	.word	0x200006e4

0800aa2c <malloc>:
 800aa2c:	4b02      	ldr	r3, [pc, #8]	; (800aa38 <malloc+0xc>)
 800aa2e:	4601      	mov	r1, r0
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	f000 b823 	b.w	800aa7c <_malloc_r>
 800aa36:	bf00      	nop
 800aa38:	20000064 	.word	0x20000064

0800aa3c <sbrk_aligned>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4e0e      	ldr	r6, [pc, #56]	; (800aa78 <sbrk_aligned+0x3c>)
 800aa40:	460c      	mov	r4, r1
 800aa42:	6831      	ldr	r1, [r6, #0]
 800aa44:	4605      	mov	r5, r0
 800aa46:	b911      	cbnz	r1, 800aa4e <sbrk_aligned+0x12>
 800aa48:	f000 fe40 	bl	800b6cc <_sbrk_r>
 800aa4c:	6030      	str	r0, [r6, #0]
 800aa4e:	4621      	mov	r1, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	f000 fe3b 	bl	800b6cc <_sbrk_r>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d00a      	beq.n	800aa70 <sbrk_aligned+0x34>
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d007      	beq.n	800aa74 <sbrk_aligned+0x38>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 fe30 	bl	800b6cc <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d101      	bne.n	800aa74 <sbrk_aligned+0x38>
 800aa70:	f04f 34ff 	mov.w	r4, #4294967295
 800aa74:	4620      	mov	r0, r4
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	200006e8 	.word	0x200006e8

0800aa7c <_malloc_r>:
 800aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa80:	1ccd      	adds	r5, r1, #3
 800aa82:	f025 0503 	bic.w	r5, r5, #3
 800aa86:	3508      	adds	r5, #8
 800aa88:	2d0c      	cmp	r5, #12
 800aa8a:	bf38      	it	cc
 800aa8c:	250c      	movcc	r5, #12
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	4607      	mov	r7, r0
 800aa92:	db01      	blt.n	800aa98 <_malloc_r+0x1c>
 800aa94:	42a9      	cmp	r1, r5
 800aa96:	d905      	bls.n	800aaa4 <_malloc_r+0x28>
 800aa98:	230c      	movs	r3, #12
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab78 <_malloc_r+0xfc>
 800aaa8:	f000 f868 	bl	800ab7c <__malloc_lock>
 800aaac:	f8d8 3000 	ldr.w	r3, [r8]
 800aab0:	461c      	mov	r4, r3
 800aab2:	bb5c      	cbnz	r4, 800ab0c <_malloc_r+0x90>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4638      	mov	r0, r7
 800aab8:	f7ff ffc0 	bl	800aa3c <sbrk_aligned>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	4604      	mov	r4, r0
 800aac0:	d155      	bne.n	800ab6e <_malloc_r+0xf2>
 800aac2:	f8d8 4000 	ldr.w	r4, [r8]
 800aac6:	4626      	mov	r6, r4
 800aac8:	2e00      	cmp	r6, #0
 800aaca:	d145      	bne.n	800ab58 <_malloc_r+0xdc>
 800aacc:	2c00      	cmp	r4, #0
 800aace:	d048      	beq.n	800ab62 <_malloc_r+0xe6>
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	4631      	mov	r1, r6
 800aad4:	4638      	mov	r0, r7
 800aad6:	eb04 0903 	add.w	r9, r4, r3
 800aada:	f000 fdf7 	bl	800b6cc <_sbrk_r>
 800aade:	4581      	cmp	r9, r0
 800aae0:	d13f      	bne.n	800ab62 <_malloc_r+0xe6>
 800aae2:	6821      	ldr	r1, [r4, #0]
 800aae4:	1a6d      	subs	r5, r5, r1
 800aae6:	4629      	mov	r1, r5
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff ffa7 	bl	800aa3c <sbrk_aligned>
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d037      	beq.n	800ab62 <_malloc_r+0xe6>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	442b      	add	r3, r5
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f8d8 3000 	ldr.w	r3, [r8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d038      	beq.n	800ab72 <_malloc_r+0xf6>
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	42a2      	cmp	r2, r4
 800ab04:	d12b      	bne.n	800ab5e <_malloc_r+0xe2>
 800ab06:	2200      	movs	r2, #0
 800ab08:	605a      	str	r2, [r3, #4]
 800ab0a:	e00f      	b.n	800ab2c <_malloc_r+0xb0>
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	1b52      	subs	r2, r2, r5
 800ab10:	d41f      	bmi.n	800ab52 <_malloc_r+0xd6>
 800ab12:	2a0b      	cmp	r2, #11
 800ab14:	d917      	bls.n	800ab46 <_malloc_r+0xca>
 800ab16:	1961      	adds	r1, r4, r5
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	6025      	str	r5, [r4, #0]
 800ab1c:	bf18      	it	ne
 800ab1e:	6059      	strne	r1, [r3, #4]
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	bf08      	it	eq
 800ab24:	f8c8 1000 	streq.w	r1, [r8]
 800ab28:	5162      	str	r2, [r4, r5]
 800ab2a:	604b      	str	r3, [r1, #4]
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f104 060b 	add.w	r6, r4, #11
 800ab32:	f000 f829 	bl	800ab88 <__malloc_unlock>
 800ab36:	f026 0607 	bic.w	r6, r6, #7
 800ab3a:	1d23      	adds	r3, r4, #4
 800ab3c:	1af2      	subs	r2, r6, r3
 800ab3e:	d0ae      	beq.n	800aa9e <_malloc_r+0x22>
 800ab40:	1b9b      	subs	r3, r3, r6
 800ab42:	50a3      	str	r3, [r4, r2]
 800ab44:	e7ab      	b.n	800aa9e <_malloc_r+0x22>
 800ab46:	42a3      	cmp	r3, r4
 800ab48:	6862      	ldr	r2, [r4, #4]
 800ab4a:	d1dd      	bne.n	800ab08 <_malloc_r+0x8c>
 800ab4c:	f8c8 2000 	str.w	r2, [r8]
 800ab50:	e7ec      	b.n	800ab2c <_malloc_r+0xb0>
 800ab52:	4623      	mov	r3, r4
 800ab54:	6864      	ldr	r4, [r4, #4]
 800ab56:	e7ac      	b.n	800aab2 <_malloc_r+0x36>
 800ab58:	4634      	mov	r4, r6
 800ab5a:	6876      	ldr	r6, [r6, #4]
 800ab5c:	e7b4      	b.n	800aac8 <_malloc_r+0x4c>
 800ab5e:	4613      	mov	r3, r2
 800ab60:	e7cc      	b.n	800aafc <_malloc_r+0x80>
 800ab62:	230c      	movs	r3, #12
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4638      	mov	r0, r7
 800ab68:	f000 f80e 	bl	800ab88 <__malloc_unlock>
 800ab6c:	e797      	b.n	800aa9e <_malloc_r+0x22>
 800ab6e:	6025      	str	r5, [r4, #0]
 800ab70:	e7dc      	b.n	800ab2c <_malloc_r+0xb0>
 800ab72:	605b      	str	r3, [r3, #4]
 800ab74:	deff      	udf	#255	; 0xff
 800ab76:	bf00      	nop
 800ab78:	200006e4 	.word	0x200006e4

0800ab7c <__malloc_lock>:
 800ab7c:	4801      	ldr	r0, [pc, #4]	; (800ab84 <__malloc_lock+0x8>)
 800ab7e:	f7ff b88a 	b.w	8009c96 <__retarget_lock_acquire_recursive>
 800ab82:	bf00      	nop
 800ab84:	200006e0 	.word	0x200006e0

0800ab88 <__malloc_unlock>:
 800ab88:	4801      	ldr	r0, [pc, #4]	; (800ab90 <__malloc_unlock+0x8>)
 800ab8a:	f7ff b885 	b.w	8009c98 <__retarget_lock_release_recursive>
 800ab8e:	bf00      	nop
 800ab90:	200006e0 	.word	0x200006e0

0800ab94 <_Balloc>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	69c6      	ldr	r6, [r0, #28]
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	b976      	cbnz	r6, 800abbc <_Balloc+0x28>
 800ab9e:	2010      	movs	r0, #16
 800aba0:	f7ff ff44 	bl	800aa2c <malloc>
 800aba4:	4602      	mov	r2, r0
 800aba6:	61e0      	str	r0, [r4, #28]
 800aba8:	b920      	cbnz	r0, 800abb4 <_Balloc+0x20>
 800abaa:	4b18      	ldr	r3, [pc, #96]	; (800ac0c <_Balloc+0x78>)
 800abac:	4818      	ldr	r0, [pc, #96]	; (800ac10 <_Balloc+0x7c>)
 800abae:	216b      	movs	r1, #107	; 0x6b
 800abb0:	f000 fdaa 	bl	800b708 <__assert_func>
 800abb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb8:	6006      	str	r6, [r0, #0]
 800abba:	60c6      	str	r6, [r0, #12]
 800abbc:	69e6      	ldr	r6, [r4, #28]
 800abbe:	68f3      	ldr	r3, [r6, #12]
 800abc0:	b183      	cbz	r3, 800abe4 <_Balloc+0x50>
 800abc2:	69e3      	ldr	r3, [r4, #28]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abca:	b9b8      	cbnz	r0, 800abfc <_Balloc+0x68>
 800abcc:	2101      	movs	r1, #1
 800abce:	fa01 f605 	lsl.w	r6, r1, r5
 800abd2:	1d72      	adds	r2, r6, #5
 800abd4:	0092      	lsls	r2, r2, #2
 800abd6:	4620      	mov	r0, r4
 800abd8:	f000 fdb4 	bl	800b744 <_calloc_r>
 800abdc:	b160      	cbz	r0, 800abf8 <_Balloc+0x64>
 800abde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abe2:	e00e      	b.n	800ac02 <_Balloc+0x6e>
 800abe4:	2221      	movs	r2, #33	; 0x21
 800abe6:	2104      	movs	r1, #4
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fdab 	bl	800b744 <_calloc_r>
 800abee:	69e3      	ldr	r3, [r4, #28]
 800abf0:	60f0      	str	r0, [r6, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e4      	bne.n	800abc2 <_Balloc+0x2e>
 800abf8:	2000      	movs	r0, #0
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	6802      	ldr	r2, [r0, #0]
 800abfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac02:	2300      	movs	r3, #0
 800ac04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac08:	e7f7      	b.n	800abfa <_Balloc+0x66>
 800ac0a:	bf00      	nop
 800ac0c:	08039dc1 	.word	0x08039dc1
 800ac10:	08039e41 	.word	0x08039e41

0800ac14 <_Bfree>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	69c6      	ldr	r6, [r0, #28]
 800ac18:	4605      	mov	r5, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	b976      	cbnz	r6, 800ac3c <_Bfree+0x28>
 800ac1e:	2010      	movs	r0, #16
 800ac20:	f7ff ff04 	bl	800aa2c <malloc>
 800ac24:	4602      	mov	r2, r0
 800ac26:	61e8      	str	r0, [r5, #28]
 800ac28:	b920      	cbnz	r0, 800ac34 <_Bfree+0x20>
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <_Bfree+0x3c>)
 800ac2c:	4809      	ldr	r0, [pc, #36]	; (800ac54 <_Bfree+0x40>)
 800ac2e:	218f      	movs	r1, #143	; 0x8f
 800ac30:	f000 fd6a 	bl	800b708 <__assert_func>
 800ac34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac38:	6006      	str	r6, [r0, #0]
 800ac3a:	60c6      	str	r6, [r0, #12]
 800ac3c:	b13c      	cbz	r4, 800ac4e <_Bfree+0x3a>
 800ac3e:	69eb      	ldr	r3, [r5, #28]
 800ac40:	6862      	ldr	r2, [r4, #4]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac48:	6021      	str	r1, [r4, #0]
 800ac4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	08039dc1 	.word	0x08039dc1
 800ac54:	08039e41 	.word	0x08039e41

0800ac58 <__multadd>:
 800ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5c:	690d      	ldr	r5, [r1, #16]
 800ac5e:	4607      	mov	r7, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	461e      	mov	r6, r3
 800ac64:	f101 0c14 	add.w	ip, r1, #20
 800ac68:	2000      	movs	r0, #0
 800ac6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac6e:	b299      	uxth	r1, r3
 800ac70:	fb02 6101 	mla	r1, r2, r1, r6
 800ac74:	0c1e      	lsrs	r6, r3, #16
 800ac76:	0c0b      	lsrs	r3, r1, #16
 800ac78:	fb02 3306 	mla	r3, r2, r6, r3
 800ac7c:	b289      	uxth	r1, r1
 800ac7e:	3001      	adds	r0, #1
 800ac80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac84:	4285      	cmp	r5, r0
 800ac86:	f84c 1b04 	str.w	r1, [ip], #4
 800ac8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac8e:	dcec      	bgt.n	800ac6a <__multadd+0x12>
 800ac90:	b30e      	cbz	r6, 800acd6 <__multadd+0x7e>
 800ac92:	68a3      	ldr	r3, [r4, #8]
 800ac94:	42ab      	cmp	r3, r5
 800ac96:	dc19      	bgt.n	800accc <__multadd+0x74>
 800ac98:	6861      	ldr	r1, [r4, #4]
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	3101      	adds	r1, #1
 800ac9e:	f7ff ff79 	bl	800ab94 <_Balloc>
 800aca2:	4680      	mov	r8, r0
 800aca4:	b928      	cbnz	r0, 800acb2 <__multadd+0x5a>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <__multadd+0x84>)
 800acaa:	480d      	ldr	r0, [pc, #52]	; (800ace0 <__multadd+0x88>)
 800acac:	21ba      	movs	r1, #186	; 0xba
 800acae:	f000 fd2b 	bl	800b708 <__assert_func>
 800acb2:	6922      	ldr	r2, [r4, #16]
 800acb4:	3202      	adds	r2, #2
 800acb6:	f104 010c 	add.w	r1, r4, #12
 800acba:	0092      	lsls	r2, r2, #2
 800acbc:	300c      	adds	r0, #12
 800acbe:	f000 fd15 	bl	800b6ec <memcpy>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4638      	mov	r0, r7
 800acc6:	f7ff ffa5 	bl	800ac14 <_Bfree>
 800acca:	4644      	mov	r4, r8
 800accc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acd0:	3501      	adds	r5, #1
 800acd2:	615e      	str	r6, [r3, #20]
 800acd4:	6125      	str	r5, [r4, #16]
 800acd6:	4620      	mov	r0, r4
 800acd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acdc:	08039e30 	.word	0x08039e30
 800ace0:	08039e41 	.word	0x08039e41

0800ace4 <__hi0bits>:
 800ace4:	0c03      	lsrs	r3, r0, #16
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	b9d3      	cbnz	r3, 800ad20 <__hi0bits+0x3c>
 800acea:	0400      	lsls	r0, r0, #16
 800acec:	2310      	movs	r3, #16
 800acee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acf2:	bf04      	itt	eq
 800acf4:	0200      	lsleq	r0, r0, #8
 800acf6:	3308      	addeq	r3, #8
 800acf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acfc:	bf04      	itt	eq
 800acfe:	0100      	lsleq	r0, r0, #4
 800ad00:	3304      	addeq	r3, #4
 800ad02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad06:	bf04      	itt	eq
 800ad08:	0080      	lsleq	r0, r0, #2
 800ad0a:	3302      	addeq	r3, #2
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	db05      	blt.n	800ad1c <__hi0bits+0x38>
 800ad10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad14:	f103 0301 	add.w	r3, r3, #1
 800ad18:	bf08      	it	eq
 800ad1a:	2320      	moveq	r3, #32
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	4770      	bx	lr
 800ad20:	2300      	movs	r3, #0
 800ad22:	e7e4      	b.n	800acee <__hi0bits+0xa>

0800ad24 <__lo0bits>:
 800ad24:	6803      	ldr	r3, [r0, #0]
 800ad26:	f013 0207 	ands.w	r2, r3, #7
 800ad2a:	d00c      	beq.n	800ad46 <__lo0bits+0x22>
 800ad2c:	07d9      	lsls	r1, r3, #31
 800ad2e:	d422      	bmi.n	800ad76 <__lo0bits+0x52>
 800ad30:	079a      	lsls	r2, r3, #30
 800ad32:	bf49      	itett	mi
 800ad34:	085b      	lsrmi	r3, r3, #1
 800ad36:	089b      	lsrpl	r3, r3, #2
 800ad38:	6003      	strmi	r3, [r0, #0]
 800ad3a:	2201      	movmi	r2, #1
 800ad3c:	bf5c      	itt	pl
 800ad3e:	6003      	strpl	r3, [r0, #0]
 800ad40:	2202      	movpl	r2, #2
 800ad42:	4610      	mov	r0, r2
 800ad44:	4770      	bx	lr
 800ad46:	b299      	uxth	r1, r3
 800ad48:	b909      	cbnz	r1, 800ad4e <__lo0bits+0x2a>
 800ad4a:	0c1b      	lsrs	r3, r3, #16
 800ad4c:	2210      	movs	r2, #16
 800ad4e:	b2d9      	uxtb	r1, r3
 800ad50:	b909      	cbnz	r1, 800ad56 <__lo0bits+0x32>
 800ad52:	3208      	adds	r2, #8
 800ad54:	0a1b      	lsrs	r3, r3, #8
 800ad56:	0719      	lsls	r1, r3, #28
 800ad58:	bf04      	itt	eq
 800ad5a:	091b      	lsreq	r3, r3, #4
 800ad5c:	3204      	addeq	r2, #4
 800ad5e:	0799      	lsls	r1, r3, #30
 800ad60:	bf04      	itt	eq
 800ad62:	089b      	lsreq	r3, r3, #2
 800ad64:	3202      	addeq	r2, #2
 800ad66:	07d9      	lsls	r1, r3, #31
 800ad68:	d403      	bmi.n	800ad72 <__lo0bits+0x4e>
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	f102 0201 	add.w	r2, r2, #1
 800ad70:	d003      	beq.n	800ad7a <__lo0bits+0x56>
 800ad72:	6003      	str	r3, [r0, #0]
 800ad74:	e7e5      	b.n	800ad42 <__lo0bits+0x1e>
 800ad76:	2200      	movs	r2, #0
 800ad78:	e7e3      	b.n	800ad42 <__lo0bits+0x1e>
 800ad7a:	2220      	movs	r2, #32
 800ad7c:	e7e1      	b.n	800ad42 <__lo0bits+0x1e>
	...

0800ad80 <__i2b>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	460c      	mov	r4, r1
 800ad84:	2101      	movs	r1, #1
 800ad86:	f7ff ff05 	bl	800ab94 <_Balloc>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	b928      	cbnz	r0, 800ad9a <__i2b+0x1a>
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <__i2b+0x24>)
 800ad90:	4805      	ldr	r0, [pc, #20]	; (800ada8 <__i2b+0x28>)
 800ad92:	f240 1145 	movw	r1, #325	; 0x145
 800ad96:	f000 fcb7 	bl	800b708 <__assert_func>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	6144      	str	r4, [r0, #20]
 800ad9e:	6103      	str	r3, [r0, #16]
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	08039e30 	.word	0x08039e30
 800ada8:	08039e41 	.word	0x08039e41

0800adac <__multiply>:
 800adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	4691      	mov	r9, r2
 800adb2:	690a      	ldr	r2, [r1, #16]
 800adb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adb8:	429a      	cmp	r2, r3
 800adba:	bfb8      	it	lt
 800adbc:	460b      	movlt	r3, r1
 800adbe:	460c      	mov	r4, r1
 800adc0:	bfbc      	itt	lt
 800adc2:	464c      	movlt	r4, r9
 800adc4:	4699      	movlt	r9, r3
 800adc6:	6927      	ldr	r7, [r4, #16]
 800adc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adcc:	68a3      	ldr	r3, [r4, #8]
 800adce:	6861      	ldr	r1, [r4, #4]
 800add0:	eb07 060a 	add.w	r6, r7, sl
 800add4:	42b3      	cmp	r3, r6
 800add6:	b085      	sub	sp, #20
 800add8:	bfb8      	it	lt
 800adda:	3101      	addlt	r1, #1
 800addc:	f7ff feda 	bl	800ab94 <_Balloc>
 800ade0:	b930      	cbnz	r0, 800adf0 <__multiply+0x44>
 800ade2:	4602      	mov	r2, r0
 800ade4:	4b44      	ldr	r3, [pc, #272]	; (800aef8 <__multiply+0x14c>)
 800ade6:	4845      	ldr	r0, [pc, #276]	; (800aefc <__multiply+0x150>)
 800ade8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800adec:	f000 fc8c 	bl	800b708 <__assert_func>
 800adf0:	f100 0514 	add.w	r5, r0, #20
 800adf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adf8:	462b      	mov	r3, r5
 800adfa:	2200      	movs	r2, #0
 800adfc:	4543      	cmp	r3, r8
 800adfe:	d321      	bcc.n	800ae44 <__multiply+0x98>
 800ae00:	f104 0314 	add.w	r3, r4, #20
 800ae04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae08:	f109 0314 	add.w	r3, r9, #20
 800ae0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae10:	9202      	str	r2, [sp, #8]
 800ae12:	1b3a      	subs	r2, r7, r4
 800ae14:	3a15      	subs	r2, #21
 800ae16:	f022 0203 	bic.w	r2, r2, #3
 800ae1a:	3204      	adds	r2, #4
 800ae1c:	f104 0115 	add.w	r1, r4, #21
 800ae20:	428f      	cmp	r7, r1
 800ae22:	bf38      	it	cc
 800ae24:	2204      	movcc	r2, #4
 800ae26:	9201      	str	r2, [sp, #4]
 800ae28:	9a02      	ldr	r2, [sp, #8]
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d80c      	bhi.n	800ae4a <__multiply+0x9e>
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	dd03      	ble.n	800ae3c <__multiply+0x90>
 800ae34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d05b      	beq.n	800aef4 <__multiply+0x148>
 800ae3c:	6106      	str	r6, [r0, #16]
 800ae3e:	b005      	add	sp, #20
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae44:	f843 2b04 	str.w	r2, [r3], #4
 800ae48:	e7d8      	b.n	800adfc <__multiply+0x50>
 800ae4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae4e:	f1ba 0f00 	cmp.w	sl, #0
 800ae52:	d024      	beq.n	800ae9e <__multiply+0xf2>
 800ae54:	f104 0e14 	add.w	lr, r4, #20
 800ae58:	46a9      	mov	r9, r5
 800ae5a:	f04f 0c00 	mov.w	ip, #0
 800ae5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae62:	f8d9 1000 	ldr.w	r1, [r9]
 800ae66:	fa1f fb82 	uxth.w	fp, r2
 800ae6a:	b289      	uxth	r1, r1
 800ae6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae74:	f8d9 2000 	ldr.w	r2, [r9]
 800ae78:	4461      	add	r1, ip
 800ae7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae86:	b289      	uxth	r1, r1
 800ae88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae8c:	4577      	cmp	r7, lr
 800ae8e:	f849 1b04 	str.w	r1, [r9], #4
 800ae92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae96:	d8e2      	bhi.n	800ae5e <__multiply+0xb2>
 800ae98:	9a01      	ldr	r2, [sp, #4]
 800ae9a:	f845 c002 	str.w	ip, [r5, r2]
 800ae9e:	9a03      	ldr	r2, [sp, #12]
 800aea0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aea4:	3304      	adds	r3, #4
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d021      	beq.n	800aef0 <__multiply+0x144>
 800aeac:	6829      	ldr	r1, [r5, #0]
 800aeae:	f104 0c14 	add.w	ip, r4, #20
 800aeb2:	46ae      	mov	lr, r5
 800aeb4:	f04f 0a00 	mov.w	sl, #0
 800aeb8:	f8bc b000 	ldrh.w	fp, [ip]
 800aebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aec0:	fb09 220b 	mla	r2, r9, fp, r2
 800aec4:	4452      	add	r2, sl
 800aec6:	b289      	uxth	r1, r1
 800aec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aecc:	f84e 1b04 	str.w	r1, [lr], #4
 800aed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aed8:	f8be 1000 	ldrh.w	r1, [lr]
 800aedc:	fb09 110a 	mla	r1, r9, sl, r1
 800aee0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aee4:	4567      	cmp	r7, ip
 800aee6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aeea:	d8e5      	bhi.n	800aeb8 <__multiply+0x10c>
 800aeec:	9a01      	ldr	r2, [sp, #4]
 800aeee:	50a9      	str	r1, [r5, r2]
 800aef0:	3504      	adds	r5, #4
 800aef2:	e799      	b.n	800ae28 <__multiply+0x7c>
 800aef4:	3e01      	subs	r6, #1
 800aef6:	e79b      	b.n	800ae30 <__multiply+0x84>
 800aef8:	08039e30 	.word	0x08039e30
 800aefc:	08039e41 	.word	0x08039e41

0800af00 <__pow5mult>:
 800af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af04:	4615      	mov	r5, r2
 800af06:	f012 0203 	ands.w	r2, r2, #3
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	d007      	beq.n	800af20 <__pow5mult+0x20>
 800af10:	4c25      	ldr	r4, [pc, #148]	; (800afa8 <__pow5mult+0xa8>)
 800af12:	3a01      	subs	r2, #1
 800af14:	2300      	movs	r3, #0
 800af16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af1a:	f7ff fe9d 	bl	800ac58 <__multadd>
 800af1e:	4607      	mov	r7, r0
 800af20:	10ad      	asrs	r5, r5, #2
 800af22:	d03d      	beq.n	800afa0 <__pow5mult+0xa0>
 800af24:	69f4      	ldr	r4, [r6, #28]
 800af26:	b97c      	cbnz	r4, 800af48 <__pow5mult+0x48>
 800af28:	2010      	movs	r0, #16
 800af2a:	f7ff fd7f 	bl	800aa2c <malloc>
 800af2e:	4602      	mov	r2, r0
 800af30:	61f0      	str	r0, [r6, #28]
 800af32:	b928      	cbnz	r0, 800af40 <__pow5mult+0x40>
 800af34:	4b1d      	ldr	r3, [pc, #116]	; (800afac <__pow5mult+0xac>)
 800af36:	481e      	ldr	r0, [pc, #120]	; (800afb0 <__pow5mult+0xb0>)
 800af38:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af3c:	f000 fbe4 	bl	800b708 <__assert_func>
 800af40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af44:	6004      	str	r4, [r0, #0]
 800af46:	60c4      	str	r4, [r0, #12]
 800af48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af50:	b94c      	cbnz	r4, 800af66 <__pow5mult+0x66>
 800af52:	f240 2171 	movw	r1, #625	; 0x271
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ff12 	bl	800ad80 <__i2b>
 800af5c:	2300      	movs	r3, #0
 800af5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af62:	4604      	mov	r4, r0
 800af64:	6003      	str	r3, [r0, #0]
 800af66:	f04f 0900 	mov.w	r9, #0
 800af6a:	07eb      	lsls	r3, r5, #31
 800af6c:	d50a      	bpl.n	800af84 <__pow5mult+0x84>
 800af6e:	4639      	mov	r1, r7
 800af70:	4622      	mov	r2, r4
 800af72:	4630      	mov	r0, r6
 800af74:	f7ff ff1a 	bl	800adac <__multiply>
 800af78:	4639      	mov	r1, r7
 800af7a:	4680      	mov	r8, r0
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff fe49 	bl	800ac14 <_Bfree>
 800af82:	4647      	mov	r7, r8
 800af84:	106d      	asrs	r5, r5, #1
 800af86:	d00b      	beq.n	800afa0 <__pow5mult+0xa0>
 800af88:	6820      	ldr	r0, [r4, #0]
 800af8a:	b938      	cbnz	r0, 800af9c <__pow5mult+0x9c>
 800af8c:	4622      	mov	r2, r4
 800af8e:	4621      	mov	r1, r4
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff ff0b 	bl	800adac <__multiply>
 800af96:	6020      	str	r0, [r4, #0]
 800af98:	f8c0 9000 	str.w	r9, [r0]
 800af9c:	4604      	mov	r4, r0
 800af9e:	e7e4      	b.n	800af6a <__pow5mult+0x6a>
 800afa0:	4638      	mov	r0, r7
 800afa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afa6:	bf00      	nop
 800afa8:	08039f90 	.word	0x08039f90
 800afac:	08039dc1 	.word	0x08039dc1
 800afb0:	08039e41 	.word	0x08039e41

0800afb4 <__lshift>:
 800afb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb8:	460c      	mov	r4, r1
 800afba:	6849      	ldr	r1, [r1, #4]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	4607      	mov	r7, r0
 800afc6:	4691      	mov	r9, r2
 800afc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afcc:	f108 0601 	add.w	r6, r8, #1
 800afd0:	42b3      	cmp	r3, r6
 800afd2:	db0b      	blt.n	800afec <__lshift+0x38>
 800afd4:	4638      	mov	r0, r7
 800afd6:	f7ff fddd 	bl	800ab94 <_Balloc>
 800afda:	4605      	mov	r5, r0
 800afdc:	b948      	cbnz	r0, 800aff2 <__lshift+0x3e>
 800afde:	4602      	mov	r2, r0
 800afe0:	4b28      	ldr	r3, [pc, #160]	; (800b084 <__lshift+0xd0>)
 800afe2:	4829      	ldr	r0, [pc, #164]	; (800b088 <__lshift+0xd4>)
 800afe4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800afe8:	f000 fb8e 	bl	800b708 <__assert_func>
 800afec:	3101      	adds	r1, #1
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	e7ee      	b.n	800afd0 <__lshift+0x1c>
 800aff2:	2300      	movs	r3, #0
 800aff4:	f100 0114 	add.w	r1, r0, #20
 800aff8:	f100 0210 	add.w	r2, r0, #16
 800affc:	4618      	mov	r0, r3
 800affe:	4553      	cmp	r3, sl
 800b000:	db33      	blt.n	800b06a <__lshift+0xb6>
 800b002:	6920      	ldr	r0, [r4, #16]
 800b004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b008:	f104 0314 	add.w	r3, r4, #20
 800b00c:	f019 091f 	ands.w	r9, r9, #31
 800b010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b018:	d02b      	beq.n	800b072 <__lshift+0xbe>
 800b01a:	f1c9 0e20 	rsb	lr, r9, #32
 800b01e:	468a      	mov	sl, r1
 800b020:	2200      	movs	r2, #0
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	fa00 f009 	lsl.w	r0, r0, r9
 800b028:	4310      	orrs	r0, r2
 800b02a:	f84a 0b04 	str.w	r0, [sl], #4
 800b02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b032:	459c      	cmp	ip, r3
 800b034:	fa22 f20e 	lsr.w	r2, r2, lr
 800b038:	d8f3      	bhi.n	800b022 <__lshift+0x6e>
 800b03a:	ebac 0304 	sub.w	r3, ip, r4
 800b03e:	3b15      	subs	r3, #21
 800b040:	f023 0303 	bic.w	r3, r3, #3
 800b044:	3304      	adds	r3, #4
 800b046:	f104 0015 	add.w	r0, r4, #21
 800b04a:	4584      	cmp	ip, r0
 800b04c:	bf38      	it	cc
 800b04e:	2304      	movcc	r3, #4
 800b050:	50ca      	str	r2, [r1, r3]
 800b052:	b10a      	cbz	r2, 800b058 <__lshift+0xa4>
 800b054:	f108 0602 	add.w	r6, r8, #2
 800b058:	3e01      	subs	r6, #1
 800b05a:	4638      	mov	r0, r7
 800b05c:	612e      	str	r6, [r5, #16]
 800b05e:	4621      	mov	r1, r4
 800b060:	f7ff fdd8 	bl	800ac14 <_Bfree>
 800b064:	4628      	mov	r0, r5
 800b066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b06e:	3301      	adds	r3, #1
 800b070:	e7c5      	b.n	800affe <__lshift+0x4a>
 800b072:	3904      	subs	r1, #4
 800b074:	f853 2b04 	ldr.w	r2, [r3], #4
 800b078:	f841 2f04 	str.w	r2, [r1, #4]!
 800b07c:	459c      	cmp	ip, r3
 800b07e:	d8f9      	bhi.n	800b074 <__lshift+0xc0>
 800b080:	e7ea      	b.n	800b058 <__lshift+0xa4>
 800b082:	bf00      	nop
 800b084:	08039e30 	.word	0x08039e30
 800b088:	08039e41 	.word	0x08039e41

0800b08c <__mcmp>:
 800b08c:	b530      	push	{r4, r5, lr}
 800b08e:	6902      	ldr	r2, [r0, #16]
 800b090:	690c      	ldr	r4, [r1, #16]
 800b092:	1b12      	subs	r2, r2, r4
 800b094:	d10e      	bne.n	800b0b4 <__mcmp+0x28>
 800b096:	f100 0314 	add.w	r3, r0, #20
 800b09a:	3114      	adds	r1, #20
 800b09c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0ac:	42a5      	cmp	r5, r4
 800b0ae:	d003      	beq.n	800b0b8 <__mcmp+0x2c>
 800b0b0:	d305      	bcc.n	800b0be <__mcmp+0x32>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	bd30      	pop	{r4, r5, pc}
 800b0b8:	4283      	cmp	r3, r0
 800b0ba:	d3f3      	bcc.n	800b0a4 <__mcmp+0x18>
 800b0bc:	e7fa      	b.n	800b0b4 <__mcmp+0x28>
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c2:	e7f7      	b.n	800b0b4 <__mcmp+0x28>

0800b0c4 <__mdiff>:
 800b0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4690      	mov	r8, r2
 800b0d2:	f7ff ffdb 	bl	800b08c <__mcmp>
 800b0d6:	1e05      	subs	r5, r0, #0
 800b0d8:	d110      	bne.n	800b0fc <__mdiff+0x38>
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f7ff fd59 	bl	800ab94 <_Balloc>
 800b0e2:	b930      	cbnz	r0, 800b0f2 <__mdiff+0x2e>
 800b0e4:	4b3a      	ldr	r3, [pc, #232]	; (800b1d0 <__mdiff+0x10c>)
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	f240 2137 	movw	r1, #567	; 0x237
 800b0ec:	4839      	ldr	r0, [pc, #228]	; (800b1d4 <__mdiff+0x110>)
 800b0ee:	f000 fb0b 	bl	800b708 <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	bfa4      	itt	ge
 800b0fe:	4643      	movge	r3, r8
 800b100:	46a0      	movge	r8, r4
 800b102:	4630      	mov	r0, r6
 800b104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b108:	bfa6      	itte	ge
 800b10a:	461c      	movge	r4, r3
 800b10c:	2500      	movge	r5, #0
 800b10e:	2501      	movlt	r5, #1
 800b110:	f7ff fd40 	bl	800ab94 <_Balloc>
 800b114:	b920      	cbnz	r0, 800b120 <__mdiff+0x5c>
 800b116:	4b2e      	ldr	r3, [pc, #184]	; (800b1d0 <__mdiff+0x10c>)
 800b118:	4602      	mov	r2, r0
 800b11a:	f240 2145 	movw	r1, #581	; 0x245
 800b11e:	e7e5      	b.n	800b0ec <__mdiff+0x28>
 800b120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b124:	6926      	ldr	r6, [r4, #16]
 800b126:	60c5      	str	r5, [r0, #12]
 800b128:	f104 0914 	add.w	r9, r4, #20
 800b12c:	f108 0514 	add.w	r5, r8, #20
 800b130:	f100 0e14 	add.w	lr, r0, #20
 800b134:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b13c:	f108 0210 	add.w	r2, r8, #16
 800b140:	46f2      	mov	sl, lr
 800b142:	2100      	movs	r1, #0
 800b144:	f859 3b04 	ldr.w	r3, [r9], #4
 800b148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b14c:	fa11 f88b 	uxtah	r8, r1, fp
 800b150:	b299      	uxth	r1, r3
 800b152:	0c1b      	lsrs	r3, r3, #16
 800b154:	eba8 0801 	sub.w	r8, r8, r1
 800b158:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b15c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b160:	fa1f f888 	uxth.w	r8, r8
 800b164:	1419      	asrs	r1, r3, #16
 800b166:	454e      	cmp	r6, r9
 800b168:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b16c:	f84a 3b04 	str.w	r3, [sl], #4
 800b170:	d8e8      	bhi.n	800b144 <__mdiff+0x80>
 800b172:	1b33      	subs	r3, r6, r4
 800b174:	3b15      	subs	r3, #21
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	3304      	adds	r3, #4
 800b17c:	3415      	adds	r4, #21
 800b17e:	42a6      	cmp	r6, r4
 800b180:	bf38      	it	cc
 800b182:	2304      	movcc	r3, #4
 800b184:	441d      	add	r5, r3
 800b186:	4473      	add	r3, lr
 800b188:	469e      	mov	lr, r3
 800b18a:	462e      	mov	r6, r5
 800b18c:	4566      	cmp	r6, ip
 800b18e:	d30e      	bcc.n	800b1ae <__mdiff+0xea>
 800b190:	f10c 0203 	add.w	r2, ip, #3
 800b194:	1b52      	subs	r2, r2, r5
 800b196:	f022 0203 	bic.w	r2, r2, #3
 800b19a:	3d03      	subs	r5, #3
 800b19c:	45ac      	cmp	ip, r5
 800b19e:	bf38      	it	cc
 800b1a0:	2200      	movcc	r2, #0
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1a8:	b17a      	cbz	r2, 800b1ca <__mdiff+0x106>
 800b1aa:	6107      	str	r7, [r0, #16]
 800b1ac:	e7a4      	b.n	800b0f8 <__mdiff+0x34>
 800b1ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1b2:	fa11 f288 	uxtah	r2, r1, r8
 800b1b6:	1414      	asrs	r4, r2, #16
 800b1b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1bc:	b292      	uxth	r2, r2
 800b1be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1c2:	f84e 2b04 	str.w	r2, [lr], #4
 800b1c6:	1421      	asrs	r1, r4, #16
 800b1c8:	e7e0      	b.n	800b18c <__mdiff+0xc8>
 800b1ca:	3f01      	subs	r7, #1
 800b1cc:	e7ea      	b.n	800b1a4 <__mdiff+0xe0>
 800b1ce:	bf00      	nop
 800b1d0:	08039e30 	.word	0x08039e30
 800b1d4:	08039e41 	.word	0x08039e41

0800b1d8 <__d2b>:
 800b1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	460f      	mov	r7, r1
 800b1de:	2101      	movs	r1, #1
 800b1e0:	ec59 8b10 	vmov	r8, r9, d0
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	f7ff fcd5 	bl	800ab94 <_Balloc>
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	b930      	cbnz	r0, 800b1fc <__d2b+0x24>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4b24      	ldr	r3, [pc, #144]	; (800b284 <__d2b+0xac>)
 800b1f2:	4825      	ldr	r0, [pc, #148]	; (800b288 <__d2b+0xb0>)
 800b1f4:	f240 310f 	movw	r1, #783	; 0x30f
 800b1f8:	f000 fa86 	bl	800b708 <__assert_func>
 800b1fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b204:	bb2d      	cbnz	r5, 800b252 <__d2b+0x7a>
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	f1b8 0300 	subs.w	r3, r8, #0
 800b20c:	d026      	beq.n	800b25c <__d2b+0x84>
 800b20e:	4668      	mov	r0, sp
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	f7ff fd87 	bl	800ad24 <__lo0bits>
 800b216:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b21a:	b1e8      	cbz	r0, 800b258 <__d2b+0x80>
 800b21c:	f1c0 0320 	rsb	r3, r0, #32
 800b220:	fa02 f303 	lsl.w	r3, r2, r3
 800b224:	430b      	orrs	r3, r1
 800b226:	40c2      	lsrs	r2, r0
 800b228:	6163      	str	r3, [r4, #20]
 800b22a:	9201      	str	r2, [sp, #4]
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	61a3      	str	r3, [r4, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	bf14      	ite	ne
 800b234:	2202      	movne	r2, #2
 800b236:	2201      	moveq	r2, #1
 800b238:	6122      	str	r2, [r4, #16]
 800b23a:	b1bd      	cbz	r5, 800b26c <__d2b+0x94>
 800b23c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b240:	4405      	add	r5, r0
 800b242:	603d      	str	r5, [r7, #0]
 800b244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b248:	6030      	str	r0, [r6, #0]
 800b24a:	4620      	mov	r0, r4
 800b24c:	b003      	add	sp, #12
 800b24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b256:	e7d6      	b.n	800b206 <__d2b+0x2e>
 800b258:	6161      	str	r1, [r4, #20]
 800b25a:	e7e7      	b.n	800b22c <__d2b+0x54>
 800b25c:	a801      	add	r0, sp, #4
 800b25e:	f7ff fd61 	bl	800ad24 <__lo0bits>
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	6163      	str	r3, [r4, #20]
 800b266:	3020      	adds	r0, #32
 800b268:	2201      	movs	r2, #1
 800b26a:	e7e5      	b.n	800b238 <__d2b+0x60>
 800b26c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b274:	6038      	str	r0, [r7, #0]
 800b276:	6918      	ldr	r0, [r3, #16]
 800b278:	f7ff fd34 	bl	800ace4 <__hi0bits>
 800b27c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b280:	e7e2      	b.n	800b248 <__d2b+0x70>
 800b282:	bf00      	nop
 800b284:	08039e30 	.word	0x08039e30
 800b288:	08039e41 	.word	0x08039e41

0800b28c <__ssputs_r>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	688e      	ldr	r6, [r1, #8]
 800b292:	461f      	mov	r7, r3
 800b294:	42be      	cmp	r6, r7
 800b296:	680b      	ldr	r3, [r1, #0]
 800b298:	4682      	mov	sl, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	4690      	mov	r8, r2
 800b29e:	d82c      	bhi.n	800b2fa <__ssputs_r+0x6e>
 800b2a0:	898a      	ldrh	r2, [r1, #12]
 800b2a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2a6:	d026      	beq.n	800b2f6 <__ssputs_r+0x6a>
 800b2a8:	6965      	ldr	r5, [r4, #20]
 800b2aa:	6909      	ldr	r1, [r1, #16]
 800b2ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2b0:	eba3 0901 	sub.w	r9, r3, r1
 800b2b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2b8:	1c7b      	adds	r3, r7, #1
 800b2ba:	444b      	add	r3, r9
 800b2bc:	106d      	asrs	r5, r5, #1
 800b2be:	429d      	cmp	r5, r3
 800b2c0:	bf38      	it	cc
 800b2c2:	461d      	movcc	r5, r3
 800b2c4:	0553      	lsls	r3, r2, #21
 800b2c6:	d527      	bpl.n	800b318 <__ssputs_r+0x8c>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7ff fbd7 	bl	800aa7c <_malloc_r>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	b360      	cbz	r0, 800b32c <__ssputs_r+0xa0>
 800b2d2:	6921      	ldr	r1, [r4, #16]
 800b2d4:	464a      	mov	r2, r9
 800b2d6:	f000 fa09 	bl	800b6ec <memcpy>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	6126      	str	r6, [r4, #16]
 800b2e8:	6165      	str	r5, [r4, #20]
 800b2ea:	444e      	add	r6, r9
 800b2ec:	eba5 0509 	sub.w	r5, r5, r9
 800b2f0:	6026      	str	r6, [r4, #0]
 800b2f2:	60a5      	str	r5, [r4, #8]
 800b2f4:	463e      	mov	r6, r7
 800b2f6:	42be      	cmp	r6, r7
 800b2f8:	d900      	bls.n	800b2fc <__ssputs_r+0x70>
 800b2fa:	463e      	mov	r6, r7
 800b2fc:	6820      	ldr	r0, [r4, #0]
 800b2fe:	4632      	mov	r2, r6
 800b300:	4641      	mov	r1, r8
 800b302:	f000 f9c9 	bl	800b698 <memmove>
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	1b9b      	subs	r3, r3, r6
 800b30a:	60a3      	str	r3, [r4, #8]
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	4433      	add	r3, r6
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	2000      	movs	r0, #0
 800b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b318:	462a      	mov	r2, r5
 800b31a:	f000 fa3b 	bl	800b794 <_realloc_r>
 800b31e:	4606      	mov	r6, r0
 800b320:	2800      	cmp	r0, #0
 800b322:	d1e0      	bne.n	800b2e6 <__ssputs_r+0x5a>
 800b324:	6921      	ldr	r1, [r4, #16]
 800b326:	4650      	mov	r0, sl
 800b328:	f7ff fb34 	bl	800a994 <_free_r>
 800b32c:	230c      	movs	r3, #12
 800b32e:	f8ca 3000 	str.w	r3, [sl]
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	e7e9      	b.n	800b314 <__ssputs_r+0x88>

0800b340 <_svfiprintf_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	4698      	mov	r8, r3
 800b346:	898b      	ldrh	r3, [r1, #12]
 800b348:	061b      	lsls	r3, r3, #24
 800b34a:	b09d      	sub	sp, #116	; 0x74
 800b34c:	4607      	mov	r7, r0
 800b34e:	460d      	mov	r5, r1
 800b350:	4614      	mov	r4, r2
 800b352:	d50e      	bpl.n	800b372 <_svfiprintf_r+0x32>
 800b354:	690b      	ldr	r3, [r1, #16]
 800b356:	b963      	cbnz	r3, 800b372 <_svfiprintf_r+0x32>
 800b358:	2140      	movs	r1, #64	; 0x40
 800b35a:	f7ff fb8f 	bl	800aa7c <_malloc_r>
 800b35e:	6028      	str	r0, [r5, #0]
 800b360:	6128      	str	r0, [r5, #16]
 800b362:	b920      	cbnz	r0, 800b36e <_svfiprintf_r+0x2e>
 800b364:	230c      	movs	r3, #12
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	e0d0      	b.n	800b510 <_svfiprintf_r+0x1d0>
 800b36e:	2340      	movs	r3, #64	; 0x40
 800b370:	616b      	str	r3, [r5, #20]
 800b372:	2300      	movs	r3, #0
 800b374:	9309      	str	r3, [sp, #36]	; 0x24
 800b376:	2320      	movs	r3, #32
 800b378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b37c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b380:	2330      	movs	r3, #48	; 0x30
 800b382:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b528 <_svfiprintf_r+0x1e8>
 800b386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b38a:	f04f 0901 	mov.w	r9, #1
 800b38e:	4623      	mov	r3, r4
 800b390:	469a      	mov	sl, r3
 800b392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b396:	b10a      	cbz	r2, 800b39c <_svfiprintf_r+0x5c>
 800b398:	2a25      	cmp	r2, #37	; 0x25
 800b39a:	d1f9      	bne.n	800b390 <_svfiprintf_r+0x50>
 800b39c:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a0:	d00b      	beq.n	800b3ba <_svfiprintf_r+0x7a>
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff ff6f 	bl	800b28c <__ssputs_r>
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f000 80a9 	beq.w	800b506 <_svfiprintf_r+0x1c6>
 800b3b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b6:	445a      	add	r2, fp
 800b3b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f000 80a1 	beq.w	800b506 <_svfiprintf_r+0x1c6>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ce:	f10a 0a01 	add.w	sl, sl, #1
 800b3d2:	9304      	str	r3, [sp, #16]
 800b3d4:	9307      	str	r3, [sp, #28]
 800b3d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3da:	931a      	str	r3, [sp, #104]	; 0x68
 800b3dc:	4654      	mov	r4, sl
 800b3de:	2205      	movs	r2, #5
 800b3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e4:	4850      	ldr	r0, [pc, #320]	; (800b528 <_svfiprintf_r+0x1e8>)
 800b3e6:	f7f4 fef3 	bl	80001d0 <memchr>
 800b3ea:	9a04      	ldr	r2, [sp, #16]
 800b3ec:	b9d8      	cbnz	r0, 800b426 <_svfiprintf_r+0xe6>
 800b3ee:	06d0      	lsls	r0, r2, #27
 800b3f0:	bf44      	itt	mi
 800b3f2:	2320      	movmi	r3, #32
 800b3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3f8:	0711      	lsls	r1, r2, #28
 800b3fa:	bf44      	itt	mi
 800b3fc:	232b      	movmi	r3, #43	; 0x2b
 800b3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b402:	f89a 3000 	ldrb.w	r3, [sl]
 800b406:	2b2a      	cmp	r3, #42	; 0x2a
 800b408:	d015      	beq.n	800b436 <_svfiprintf_r+0xf6>
 800b40a:	9a07      	ldr	r2, [sp, #28]
 800b40c:	4654      	mov	r4, sl
 800b40e:	2000      	movs	r0, #0
 800b410:	f04f 0c0a 	mov.w	ip, #10
 800b414:	4621      	mov	r1, r4
 800b416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b41a:	3b30      	subs	r3, #48	; 0x30
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d94d      	bls.n	800b4bc <_svfiprintf_r+0x17c>
 800b420:	b1b0      	cbz	r0, 800b450 <_svfiprintf_r+0x110>
 800b422:	9207      	str	r2, [sp, #28]
 800b424:	e014      	b.n	800b450 <_svfiprintf_r+0x110>
 800b426:	eba0 0308 	sub.w	r3, r0, r8
 800b42a:	fa09 f303 	lsl.w	r3, r9, r3
 800b42e:	4313      	orrs	r3, r2
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	46a2      	mov	sl, r4
 800b434:	e7d2      	b.n	800b3dc <_svfiprintf_r+0x9c>
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	1d19      	adds	r1, r3, #4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	9103      	str	r1, [sp, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	bfbb      	ittet	lt
 800b442:	425b      	neglt	r3, r3
 800b444:	f042 0202 	orrlt.w	r2, r2, #2
 800b448:	9307      	strge	r3, [sp, #28]
 800b44a:	9307      	strlt	r3, [sp, #28]
 800b44c:	bfb8      	it	lt
 800b44e:	9204      	strlt	r2, [sp, #16]
 800b450:	7823      	ldrb	r3, [r4, #0]
 800b452:	2b2e      	cmp	r3, #46	; 0x2e
 800b454:	d10c      	bne.n	800b470 <_svfiprintf_r+0x130>
 800b456:	7863      	ldrb	r3, [r4, #1]
 800b458:	2b2a      	cmp	r3, #42	; 0x2a
 800b45a:	d134      	bne.n	800b4c6 <_svfiprintf_r+0x186>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1d1a      	adds	r2, r3, #4
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	9203      	str	r2, [sp, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	bfb8      	it	lt
 800b468:	f04f 33ff 	movlt.w	r3, #4294967295
 800b46c:	3402      	adds	r4, #2
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b538 <_svfiprintf_r+0x1f8>
 800b474:	7821      	ldrb	r1, [r4, #0]
 800b476:	2203      	movs	r2, #3
 800b478:	4650      	mov	r0, sl
 800b47a:	f7f4 fea9 	bl	80001d0 <memchr>
 800b47e:	b138      	cbz	r0, 800b490 <_svfiprintf_r+0x150>
 800b480:	9b04      	ldr	r3, [sp, #16]
 800b482:	eba0 000a 	sub.w	r0, r0, sl
 800b486:	2240      	movs	r2, #64	; 0x40
 800b488:	4082      	lsls	r2, r0
 800b48a:	4313      	orrs	r3, r2
 800b48c:	3401      	adds	r4, #1
 800b48e:	9304      	str	r3, [sp, #16]
 800b490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b494:	4825      	ldr	r0, [pc, #148]	; (800b52c <_svfiprintf_r+0x1ec>)
 800b496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b49a:	2206      	movs	r2, #6
 800b49c:	f7f4 fe98 	bl	80001d0 <memchr>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d038      	beq.n	800b516 <_svfiprintf_r+0x1d6>
 800b4a4:	4b22      	ldr	r3, [pc, #136]	; (800b530 <_svfiprintf_r+0x1f0>)
 800b4a6:	bb1b      	cbnz	r3, 800b4f0 <_svfiprintf_r+0x1b0>
 800b4a8:	9b03      	ldr	r3, [sp, #12]
 800b4aa:	3307      	adds	r3, #7
 800b4ac:	f023 0307 	bic.w	r3, r3, #7
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	9303      	str	r3, [sp, #12]
 800b4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b6:	4433      	add	r3, r6
 800b4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ba:	e768      	b.n	800b38e <_svfiprintf_r+0x4e>
 800b4bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	e7a6      	b.n	800b414 <_svfiprintf_r+0xd4>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	3401      	adds	r4, #1
 800b4ca:	9305      	str	r3, [sp, #20]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	f04f 0c0a 	mov.w	ip, #10
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4d8:	3a30      	subs	r2, #48	; 0x30
 800b4da:	2a09      	cmp	r2, #9
 800b4dc:	d903      	bls.n	800b4e6 <_svfiprintf_r+0x1a6>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0c6      	beq.n	800b470 <_svfiprintf_r+0x130>
 800b4e2:	9105      	str	r1, [sp, #20]
 800b4e4:	e7c4      	b.n	800b470 <_svfiprintf_r+0x130>
 800b4e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e7f0      	b.n	800b4d2 <_svfiprintf_r+0x192>
 800b4f0:	ab03      	add	r3, sp, #12
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	462a      	mov	r2, r5
 800b4f6:	4b0f      	ldr	r3, [pc, #60]	; (800b534 <_svfiprintf_r+0x1f4>)
 800b4f8:	a904      	add	r1, sp, #16
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f7fd fe62 	bl	80091c4 <_printf_float>
 800b500:	1c42      	adds	r2, r0, #1
 800b502:	4606      	mov	r6, r0
 800b504:	d1d6      	bne.n	800b4b4 <_svfiprintf_r+0x174>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	065b      	lsls	r3, r3, #25
 800b50a:	f53f af2d 	bmi.w	800b368 <_svfiprintf_r+0x28>
 800b50e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b510:	b01d      	add	sp, #116	; 0x74
 800b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b516:	ab03      	add	r3, sp, #12
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	462a      	mov	r2, r5
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <_svfiprintf_r+0x1f4>)
 800b51e:	a904      	add	r1, sp, #16
 800b520:	4638      	mov	r0, r7
 800b522:	f7fe f8f3 	bl	800970c <_printf_i>
 800b526:	e7eb      	b.n	800b500 <_svfiprintf_r+0x1c0>
 800b528:	08039f9c 	.word	0x08039f9c
 800b52c:	08039fa6 	.word	0x08039fa6
 800b530:	080091c5 	.word	0x080091c5
 800b534:	0800b28d 	.word	0x0800b28d
 800b538:	08039fa2 	.word	0x08039fa2

0800b53c <__sflush_r>:
 800b53c:	898a      	ldrh	r2, [r1, #12]
 800b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b542:	4605      	mov	r5, r0
 800b544:	0710      	lsls	r0, r2, #28
 800b546:	460c      	mov	r4, r1
 800b548:	d458      	bmi.n	800b5fc <__sflush_r+0xc0>
 800b54a:	684b      	ldr	r3, [r1, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dc05      	bgt.n	800b55c <__sflush_r+0x20>
 800b550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	dc02      	bgt.n	800b55c <__sflush_r+0x20>
 800b556:	2000      	movs	r0, #0
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d0f9      	beq.n	800b556 <__sflush_r+0x1a>
 800b562:	2300      	movs	r3, #0
 800b564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b568:	682f      	ldr	r7, [r5, #0]
 800b56a:	6a21      	ldr	r1, [r4, #32]
 800b56c:	602b      	str	r3, [r5, #0]
 800b56e:	d032      	beq.n	800b5d6 <__sflush_r+0x9a>
 800b570:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	075a      	lsls	r2, r3, #29
 800b576:	d505      	bpl.n	800b584 <__sflush_r+0x48>
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	1ac0      	subs	r0, r0, r3
 800b57c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b57e:	b10b      	cbz	r3, 800b584 <__sflush_r+0x48>
 800b580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b582:	1ac0      	subs	r0, r0, r3
 800b584:	2300      	movs	r3, #0
 800b586:	4602      	mov	r2, r0
 800b588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b58a:	6a21      	ldr	r1, [r4, #32]
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b0      	blx	r6
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	d106      	bne.n	800b5a4 <__sflush_r+0x68>
 800b596:	6829      	ldr	r1, [r5, #0]
 800b598:	291d      	cmp	r1, #29
 800b59a:	d82b      	bhi.n	800b5f4 <__sflush_r+0xb8>
 800b59c:	4a29      	ldr	r2, [pc, #164]	; (800b644 <__sflush_r+0x108>)
 800b59e:	410a      	asrs	r2, r1
 800b5a0:	07d6      	lsls	r6, r2, #31
 800b5a2:	d427      	bmi.n	800b5f4 <__sflush_r+0xb8>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	6062      	str	r2, [r4, #4]
 800b5a8:	04d9      	lsls	r1, r3, #19
 800b5aa:	6922      	ldr	r2, [r4, #16]
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	d504      	bpl.n	800b5ba <__sflush_r+0x7e>
 800b5b0:	1c42      	adds	r2, r0, #1
 800b5b2:	d101      	bne.n	800b5b8 <__sflush_r+0x7c>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b903      	cbnz	r3, 800b5ba <__sflush_r+0x7e>
 800b5b8:	6560      	str	r0, [r4, #84]	; 0x54
 800b5ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5bc:	602f      	str	r7, [r5, #0]
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d0c9      	beq.n	800b556 <__sflush_r+0x1a>
 800b5c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	d002      	beq.n	800b5d0 <__sflush_r+0x94>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7ff f9e2 	bl	800a994 <_free_r>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5d4:	e7c0      	b.n	800b558 <__sflush_r+0x1c>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	1c41      	adds	r1, r0, #1
 800b5de:	d1c8      	bne.n	800b572 <__sflush_r+0x36>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0c5      	beq.n	800b572 <__sflush_r+0x36>
 800b5e6:	2b1d      	cmp	r3, #29
 800b5e8:	d001      	beq.n	800b5ee <__sflush_r+0xb2>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	d101      	bne.n	800b5f2 <__sflush_r+0xb6>
 800b5ee:	602f      	str	r7, [r5, #0]
 800b5f0:	e7b1      	b.n	800b556 <__sflush_r+0x1a>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	e7ad      	b.n	800b558 <__sflush_r+0x1c>
 800b5fc:	690f      	ldr	r7, [r1, #16]
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d0a9      	beq.n	800b556 <__sflush_r+0x1a>
 800b602:	0793      	lsls	r3, r2, #30
 800b604:	680e      	ldr	r6, [r1, #0]
 800b606:	bf08      	it	eq
 800b608:	694b      	ldreq	r3, [r1, #20]
 800b60a:	600f      	str	r7, [r1, #0]
 800b60c:	bf18      	it	ne
 800b60e:	2300      	movne	r3, #0
 800b610:	eba6 0807 	sub.w	r8, r6, r7
 800b614:	608b      	str	r3, [r1, #8]
 800b616:	f1b8 0f00 	cmp.w	r8, #0
 800b61a:	dd9c      	ble.n	800b556 <__sflush_r+0x1a>
 800b61c:	6a21      	ldr	r1, [r4, #32]
 800b61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b620:	4643      	mov	r3, r8
 800b622:	463a      	mov	r2, r7
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	2800      	cmp	r0, #0
 800b62a:	dc06      	bgt.n	800b63a <__sflush_r+0xfe>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	e78e      	b.n	800b558 <__sflush_r+0x1c>
 800b63a:	4407      	add	r7, r0
 800b63c:	eba8 0800 	sub.w	r8, r8, r0
 800b640:	e7e9      	b.n	800b616 <__sflush_r+0xda>
 800b642:	bf00      	nop
 800b644:	dfbffffe 	.word	0xdfbffffe

0800b648 <_fflush_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b913      	cbnz	r3, 800b658 <_fflush_r+0x10>
 800b652:	2500      	movs	r5, #0
 800b654:	4628      	mov	r0, r5
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	b118      	cbz	r0, 800b662 <_fflush_r+0x1a>
 800b65a:	6a03      	ldr	r3, [r0, #32]
 800b65c:	b90b      	cbnz	r3, 800b662 <_fflush_r+0x1a>
 800b65e:	f7fe fa03 	bl	8009a68 <__sinit>
 800b662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0f3      	beq.n	800b652 <_fflush_r+0xa>
 800b66a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b66c:	07d0      	lsls	r0, r2, #31
 800b66e:	d404      	bmi.n	800b67a <_fflush_r+0x32>
 800b670:	0599      	lsls	r1, r3, #22
 800b672:	d402      	bmi.n	800b67a <_fflush_r+0x32>
 800b674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b676:	f7fe fb0e 	bl	8009c96 <__retarget_lock_acquire_recursive>
 800b67a:	4628      	mov	r0, r5
 800b67c:	4621      	mov	r1, r4
 800b67e:	f7ff ff5d 	bl	800b53c <__sflush_r>
 800b682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b684:	07da      	lsls	r2, r3, #31
 800b686:	4605      	mov	r5, r0
 800b688:	d4e4      	bmi.n	800b654 <_fflush_r+0xc>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	059b      	lsls	r3, r3, #22
 800b68e:	d4e1      	bmi.n	800b654 <_fflush_r+0xc>
 800b690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b692:	f7fe fb01 	bl	8009c98 <__retarget_lock_release_recursive>
 800b696:	e7dd      	b.n	800b654 <_fflush_r+0xc>

0800b698 <memmove>:
 800b698:	4288      	cmp	r0, r1
 800b69a:	b510      	push	{r4, lr}
 800b69c:	eb01 0402 	add.w	r4, r1, r2
 800b6a0:	d902      	bls.n	800b6a8 <memmove+0x10>
 800b6a2:	4284      	cmp	r4, r0
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	d807      	bhi.n	800b6b8 <memmove+0x20>
 800b6a8:	1e43      	subs	r3, r0, #1
 800b6aa:	42a1      	cmp	r1, r4
 800b6ac:	d008      	beq.n	800b6c0 <memmove+0x28>
 800b6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6b6:	e7f8      	b.n	800b6aa <memmove+0x12>
 800b6b8:	4402      	add	r2, r0
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	428a      	cmp	r2, r1
 800b6be:	d100      	bne.n	800b6c2 <memmove+0x2a>
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ca:	e7f7      	b.n	800b6bc <memmove+0x24>

0800b6cc <_sbrk_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_sbrk_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f7 fbb2 	bl	8002e40 <_sbrk>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_sbrk_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_sbrk_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	200006dc 	.word	0x200006dc

0800b6ec <memcpy>:
 800b6ec:	440a      	add	r2, r1
 800b6ee:	4291      	cmp	r1, r2
 800b6f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6f4:	d100      	bne.n	800b6f8 <memcpy+0xc>
 800b6f6:	4770      	bx	lr
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b702:	4291      	cmp	r1, r2
 800b704:	d1f9      	bne.n	800b6fa <memcpy+0xe>
 800b706:	bd10      	pop	{r4, pc}

0800b708 <__assert_func>:
 800b708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b70a:	4614      	mov	r4, r2
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b09      	ldr	r3, [pc, #36]	; (800b734 <__assert_func+0x2c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4605      	mov	r5, r0
 800b714:	68d8      	ldr	r0, [r3, #12]
 800b716:	b14c      	cbz	r4, 800b72c <__assert_func+0x24>
 800b718:	4b07      	ldr	r3, [pc, #28]	; (800b738 <__assert_func+0x30>)
 800b71a:	9100      	str	r1, [sp, #0]
 800b71c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b720:	4906      	ldr	r1, [pc, #24]	; (800b73c <__assert_func+0x34>)
 800b722:	462b      	mov	r3, r5
 800b724:	f000 f872 	bl	800b80c <fiprintf>
 800b728:	f000 f882 	bl	800b830 <abort>
 800b72c:	4b04      	ldr	r3, [pc, #16]	; (800b740 <__assert_func+0x38>)
 800b72e:	461c      	mov	r4, r3
 800b730:	e7f3      	b.n	800b71a <__assert_func+0x12>
 800b732:	bf00      	nop
 800b734:	20000064 	.word	0x20000064
 800b738:	08039fb7 	.word	0x08039fb7
 800b73c:	08039fc4 	.word	0x08039fc4
 800b740:	08039ff2 	.word	0x08039ff2

0800b744 <_calloc_r>:
 800b744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b746:	fba1 2402 	umull	r2, r4, r1, r2
 800b74a:	b94c      	cbnz	r4, 800b760 <_calloc_r+0x1c>
 800b74c:	4611      	mov	r1, r2
 800b74e:	9201      	str	r2, [sp, #4]
 800b750:	f7ff f994 	bl	800aa7c <_malloc_r>
 800b754:	9a01      	ldr	r2, [sp, #4]
 800b756:	4605      	mov	r5, r0
 800b758:	b930      	cbnz	r0, 800b768 <_calloc_r+0x24>
 800b75a:	4628      	mov	r0, r5
 800b75c:	b003      	add	sp, #12
 800b75e:	bd30      	pop	{r4, r5, pc}
 800b760:	220c      	movs	r2, #12
 800b762:	6002      	str	r2, [r0, #0]
 800b764:	2500      	movs	r5, #0
 800b766:	e7f8      	b.n	800b75a <_calloc_r+0x16>
 800b768:	4621      	mov	r1, r4
 800b76a:	f7fe fa16 	bl	8009b9a <memset>
 800b76e:	e7f4      	b.n	800b75a <_calloc_r+0x16>

0800b770 <__ascii_mbtowc>:
 800b770:	b082      	sub	sp, #8
 800b772:	b901      	cbnz	r1, 800b776 <__ascii_mbtowc+0x6>
 800b774:	a901      	add	r1, sp, #4
 800b776:	b142      	cbz	r2, 800b78a <__ascii_mbtowc+0x1a>
 800b778:	b14b      	cbz	r3, 800b78e <__ascii_mbtowc+0x1e>
 800b77a:	7813      	ldrb	r3, [r2, #0]
 800b77c:	600b      	str	r3, [r1, #0]
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	1e10      	subs	r0, r2, #0
 800b782:	bf18      	it	ne
 800b784:	2001      	movne	r0, #1
 800b786:	b002      	add	sp, #8
 800b788:	4770      	bx	lr
 800b78a:	4610      	mov	r0, r2
 800b78c:	e7fb      	b.n	800b786 <__ascii_mbtowc+0x16>
 800b78e:	f06f 0001 	mvn.w	r0, #1
 800b792:	e7f8      	b.n	800b786 <__ascii_mbtowc+0x16>

0800b794 <_realloc_r>:
 800b794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b798:	4680      	mov	r8, r0
 800b79a:	4614      	mov	r4, r2
 800b79c:	460e      	mov	r6, r1
 800b79e:	b921      	cbnz	r1, 800b7aa <_realloc_r+0x16>
 800b7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	f7ff b969 	b.w	800aa7c <_malloc_r>
 800b7aa:	b92a      	cbnz	r2, 800b7b8 <_realloc_r+0x24>
 800b7ac:	f7ff f8f2 	bl	800a994 <_free_r>
 800b7b0:	4625      	mov	r5, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	f000 f841 	bl	800b83e <_malloc_usable_size_r>
 800b7bc:	4284      	cmp	r4, r0
 800b7be:	4607      	mov	r7, r0
 800b7c0:	d802      	bhi.n	800b7c8 <_realloc_r+0x34>
 800b7c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7c6:	d812      	bhi.n	800b7ee <_realloc_r+0x5a>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	f7ff f956 	bl	800aa7c <_malloc_r>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d0ed      	beq.n	800b7b2 <_realloc_r+0x1e>
 800b7d6:	42bc      	cmp	r4, r7
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4631      	mov	r1, r6
 800b7dc:	bf28      	it	cs
 800b7de:	463a      	movcs	r2, r7
 800b7e0:	f7ff ff84 	bl	800b6ec <memcpy>
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f7ff f8d4 	bl	800a994 <_free_r>
 800b7ec:	e7e1      	b.n	800b7b2 <_realloc_r+0x1e>
 800b7ee:	4635      	mov	r5, r6
 800b7f0:	e7df      	b.n	800b7b2 <_realloc_r+0x1e>

0800b7f2 <__ascii_wctomb>:
 800b7f2:	b149      	cbz	r1, 800b808 <__ascii_wctomb+0x16>
 800b7f4:	2aff      	cmp	r2, #255	; 0xff
 800b7f6:	bf85      	ittet	hi
 800b7f8:	238a      	movhi	r3, #138	; 0x8a
 800b7fa:	6003      	strhi	r3, [r0, #0]
 800b7fc:	700a      	strbls	r2, [r1, #0]
 800b7fe:	f04f 30ff 	movhi.w	r0, #4294967295
 800b802:	bf98      	it	ls
 800b804:	2001      	movls	r0, #1
 800b806:	4770      	bx	lr
 800b808:	4608      	mov	r0, r1
 800b80a:	4770      	bx	lr

0800b80c <fiprintf>:
 800b80c:	b40e      	push	{r1, r2, r3}
 800b80e:	b503      	push	{r0, r1, lr}
 800b810:	4601      	mov	r1, r0
 800b812:	ab03      	add	r3, sp, #12
 800b814:	4805      	ldr	r0, [pc, #20]	; (800b82c <fiprintf+0x20>)
 800b816:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81a:	6800      	ldr	r0, [r0, #0]
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	f000 f83f 	bl	800b8a0 <_vfiprintf_r>
 800b822:	b002      	add	sp, #8
 800b824:	f85d eb04 	ldr.w	lr, [sp], #4
 800b828:	b003      	add	sp, #12
 800b82a:	4770      	bx	lr
 800b82c:	20000064 	.word	0x20000064

0800b830 <abort>:
 800b830:	b508      	push	{r3, lr}
 800b832:	2006      	movs	r0, #6
 800b834:	f000 fa0c 	bl	800bc50 <raise>
 800b838:	2001      	movs	r0, #1
 800b83a:	f7f7 fa89 	bl	8002d50 <_exit>

0800b83e <_malloc_usable_size_r>:
 800b83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b842:	1f18      	subs	r0, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	bfbc      	itt	lt
 800b848:	580b      	ldrlt	r3, [r1, r0]
 800b84a:	18c0      	addlt	r0, r0, r3
 800b84c:	4770      	bx	lr

0800b84e <__sfputc_r>:
 800b84e:	6893      	ldr	r3, [r2, #8]
 800b850:	3b01      	subs	r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	b410      	push	{r4}
 800b856:	6093      	str	r3, [r2, #8]
 800b858:	da08      	bge.n	800b86c <__sfputc_r+0x1e>
 800b85a:	6994      	ldr	r4, [r2, #24]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	db01      	blt.n	800b864 <__sfputc_r+0x16>
 800b860:	290a      	cmp	r1, #10
 800b862:	d103      	bne.n	800b86c <__sfputc_r+0x1e>
 800b864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b868:	f000 b934 	b.w	800bad4 <__swbuf_r>
 800b86c:	6813      	ldr	r3, [r2, #0]
 800b86e:	1c58      	adds	r0, r3, #1
 800b870:	6010      	str	r0, [r2, #0]
 800b872:	7019      	strb	r1, [r3, #0]
 800b874:	4608      	mov	r0, r1
 800b876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <__sfputs_r>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	4614      	mov	r4, r2
 800b884:	18d5      	adds	r5, r2, r3
 800b886:	42ac      	cmp	r4, r5
 800b888:	d101      	bne.n	800b88e <__sfputs_r+0x12>
 800b88a:	2000      	movs	r0, #0
 800b88c:	e007      	b.n	800b89e <__sfputs_r+0x22>
 800b88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b892:	463a      	mov	r2, r7
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ffda 	bl	800b84e <__sfputc_r>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d1f3      	bne.n	800b886 <__sfputs_r+0xa>
 800b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8a0 <_vfiprintf_r>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	b09d      	sub	sp, #116	; 0x74
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	4698      	mov	r8, r3
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	b118      	cbz	r0, 800b8b8 <_vfiprintf_r+0x18>
 800b8b0:	6a03      	ldr	r3, [r0, #32]
 800b8b2:	b90b      	cbnz	r3, 800b8b8 <_vfiprintf_r+0x18>
 800b8b4:	f7fe f8d8 	bl	8009a68 <__sinit>
 800b8b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ba:	07d9      	lsls	r1, r3, #31
 800b8bc:	d405      	bmi.n	800b8ca <_vfiprintf_r+0x2a>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	059a      	lsls	r2, r3, #22
 800b8c2:	d402      	bmi.n	800b8ca <_vfiprintf_r+0x2a>
 800b8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c6:	f7fe f9e6 	bl	8009c96 <__retarget_lock_acquire_recursive>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	071b      	lsls	r3, r3, #28
 800b8ce:	d501      	bpl.n	800b8d4 <_vfiprintf_r+0x34>
 800b8d0:	692b      	ldr	r3, [r5, #16]
 800b8d2:	b99b      	cbnz	r3, 800b8fc <_vfiprintf_r+0x5c>
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f000 f93a 	bl	800bb50 <__swsetup_r>
 800b8dc:	b170      	cbz	r0, 800b8fc <_vfiprintf_r+0x5c>
 800b8de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8e0:	07dc      	lsls	r4, r3, #31
 800b8e2:	d504      	bpl.n	800b8ee <_vfiprintf_r+0x4e>
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	b01d      	add	sp, #116	; 0x74
 800b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	0598      	lsls	r0, r3, #22
 800b8f2:	d4f7      	bmi.n	800b8e4 <_vfiprintf_r+0x44>
 800b8f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f6:	f7fe f9cf 	bl	8009c98 <__retarget_lock_release_recursive>
 800b8fa:	e7f3      	b.n	800b8e4 <_vfiprintf_r+0x44>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b900:	2320      	movs	r3, #32
 800b902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b906:	f8cd 800c 	str.w	r8, [sp, #12]
 800b90a:	2330      	movs	r3, #48	; 0x30
 800b90c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bac0 <_vfiprintf_r+0x220>
 800b910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b914:	f04f 0901 	mov.w	r9, #1
 800b918:	4623      	mov	r3, r4
 800b91a:	469a      	mov	sl, r3
 800b91c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b920:	b10a      	cbz	r2, 800b926 <_vfiprintf_r+0x86>
 800b922:	2a25      	cmp	r2, #37	; 0x25
 800b924:	d1f9      	bne.n	800b91a <_vfiprintf_r+0x7a>
 800b926:	ebba 0b04 	subs.w	fp, sl, r4
 800b92a:	d00b      	beq.n	800b944 <_vfiprintf_r+0xa4>
 800b92c:	465b      	mov	r3, fp
 800b92e:	4622      	mov	r2, r4
 800b930:	4629      	mov	r1, r5
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ffa2 	bl	800b87c <__sfputs_r>
 800b938:	3001      	adds	r0, #1
 800b93a:	f000 80a9 	beq.w	800ba90 <_vfiprintf_r+0x1f0>
 800b93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b940:	445a      	add	r2, fp
 800b942:	9209      	str	r2, [sp, #36]	; 0x24
 800b944:	f89a 3000 	ldrb.w	r3, [sl]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 80a1 	beq.w	800ba90 <_vfiprintf_r+0x1f0>
 800b94e:	2300      	movs	r3, #0
 800b950:	f04f 32ff 	mov.w	r2, #4294967295
 800b954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b958:	f10a 0a01 	add.w	sl, sl, #1
 800b95c:	9304      	str	r3, [sp, #16]
 800b95e:	9307      	str	r3, [sp, #28]
 800b960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b964:	931a      	str	r3, [sp, #104]	; 0x68
 800b966:	4654      	mov	r4, sl
 800b968:	2205      	movs	r2, #5
 800b96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b96e:	4854      	ldr	r0, [pc, #336]	; (800bac0 <_vfiprintf_r+0x220>)
 800b970:	f7f4 fc2e 	bl	80001d0 <memchr>
 800b974:	9a04      	ldr	r2, [sp, #16]
 800b976:	b9d8      	cbnz	r0, 800b9b0 <_vfiprintf_r+0x110>
 800b978:	06d1      	lsls	r1, r2, #27
 800b97a:	bf44      	itt	mi
 800b97c:	2320      	movmi	r3, #32
 800b97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b982:	0713      	lsls	r3, r2, #28
 800b984:	bf44      	itt	mi
 800b986:	232b      	movmi	r3, #43	; 0x2b
 800b988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b98c:	f89a 3000 	ldrb.w	r3, [sl]
 800b990:	2b2a      	cmp	r3, #42	; 0x2a
 800b992:	d015      	beq.n	800b9c0 <_vfiprintf_r+0x120>
 800b994:	9a07      	ldr	r2, [sp, #28]
 800b996:	4654      	mov	r4, sl
 800b998:	2000      	movs	r0, #0
 800b99a:	f04f 0c0a 	mov.w	ip, #10
 800b99e:	4621      	mov	r1, r4
 800b9a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a4:	3b30      	subs	r3, #48	; 0x30
 800b9a6:	2b09      	cmp	r3, #9
 800b9a8:	d94d      	bls.n	800ba46 <_vfiprintf_r+0x1a6>
 800b9aa:	b1b0      	cbz	r0, 800b9da <_vfiprintf_r+0x13a>
 800b9ac:	9207      	str	r2, [sp, #28]
 800b9ae:	e014      	b.n	800b9da <_vfiprintf_r+0x13a>
 800b9b0:	eba0 0308 	sub.w	r3, r0, r8
 800b9b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	46a2      	mov	sl, r4
 800b9be:	e7d2      	b.n	800b966 <_vfiprintf_r+0xc6>
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	1d19      	adds	r1, r3, #4
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	9103      	str	r1, [sp, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bfbb      	ittet	lt
 800b9cc:	425b      	neglt	r3, r3
 800b9ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b9d2:	9307      	strge	r3, [sp, #28]
 800b9d4:	9307      	strlt	r3, [sp, #28]
 800b9d6:	bfb8      	it	lt
 800b9d8:	9204      	strlt	r2, [sp, #16]
 800b9da:	7823      	ldrb	r3, [r4, #0]
 800b9dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9de:	d10c      	bne.n	800b9fa <_vfiprintf_r+0x15a>
 800b9e0:	7863      	ldrb	r3, [r4, #1]
 800b9e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e4:	d134      	bne.n	800ba50 <_vfiprintf_r+0x1b0>
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	1d1a      	adds	r2, r3, #4
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	9203      	str	r2, [sp, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfb8      	it	lt
 800b9f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9f6:	3402      	adds	r4, #2
 800b9f8:	9305      	str	r3, [sp, #20]
 800b9fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bad0 <_vfiprintf_r+0x230>
 800b9fe:	7821      	ldrb	r1, [r4, #0]
 800ba00:	2203      	movs	r2, #3
 800ba02:	4650      	mov	r0, sl
 800ba04:	f7f4 fbe4 	bl	80001d0 <memchr>
 800ba08:	b138      	cbz	r0, 800ba1a <_vfiprintf_r+0x17a>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	eba0 000a 	sub.w	r0, r0, sl
 800ba10:	2240      	movs	r2, #64	; 0x40
 800ba12:	4082      	lsls	r2, r0
 800ba14:	4313      	orrs	r3, r2
 800ba16:	3401      	adds	r4, #1
 800ba18:	9304      	str	r3, [sp, #16]
 800ba1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1e:	4829      	ldr	r0, [pc, #164]	; (800bac4 <_vfiprintf_r+0x224>)
 800ba20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba24:	2206      	movs	r2, #6
 800ba26:	f7f4 fbd3 	bl	80001d0 <memchr>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d03f      	beq.n	800baae <_vfiprintf_r+0x20e>
 800ba2e:	4b26      	ldr	r3, [pc, #152]	; (800bac8 <_vfiprintf_r+0x228>)
 800ba30:	bb1b      	cbnz	r3, 800ba7a <_vfiprintf_r+0x1da>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	3307      	adds	r3, #7
 800ba36:	f023 0307 	bic.w	r3, r3, #7
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba40:	443b      	add	r3, r7
 800ba42:	9309      	str	r3, [sp, #36]	; 0x24
 800ba44:	e768      	b.n	800b918 <_vfiprintf_r+0x78>
 800ba46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	2001      	movs	r0, #1
 800ba4e:	e7a6      	b.n	800b99e <_vfiprintf_r+0xfe>
 800ba50:	2300      	movs	r3, #0
 800ba52:	3401      	adds	r4, #1
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	4619      	mov	r1, r3
 800ba58:	f04f 0c0a 	mov.w	ip, #10
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba62:	3a30      	subs	r2, #48	; 0x30
 800ba64:	2a09      	cmp	r2, #9
 800ba66:	d903      	bls.n	800ba70 <_vfiprintf_r+0x1d0>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0c6      	beq.n	800b9fa <_vfiprintf_r+0x15a>
 800ba6c:	9105      	str	r1, [sp, #20]
 800ba6e:	e7c4      	b.n	800b9fa <_vfiprintf_r+0x15a>
 800ba70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba74:	4604      	mov	r4, r0
 800ba76:	2301      	movs	r3, #1
 800ba78:	e7f0      	b.n	800ba5c <_vfiprintf_r+0x1bc>
 800ba7a:	ab03      	add	r3, sp, #12
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	462a      	mov	r2, r5
 800ba80:	4b12      	ldr	r3, [pc, #72]	; (800bacc <_vfiprintf_r+0x22c>)
 800ba82:	a904      	add	r1, sp, #16
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7fd fb9d 	bl	80091c4 <_printf_float>
 800ba8a:	4607      	mov	r7, r0
 800ba8c:	1c78      	adds	r0, r7, #1
 800ba8e:	d1d6      	bne.n	800ba3e <_vfiprintf_r+0x19e>
 800ba90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba92:	07d9      	lsls	r1, r3, #31
 800ba94:	d405      	bmi.n	800baa2 <_vfiprintf_r+0x202>
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	059a      	lsls	r2, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_vfiprintf_r+0x202>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba9e:	f7fe f8fb 	bl	8009c98 <__retarget_lock_release_recursive>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	065b      	lsls	r3, r3, #25
 800baa6:	f53f af1d 	bmi.w	800b8e4 <_vfiprintf_r+0x44>
 800baaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baac:	e71c      	b.n	800b8e8 <_vfiprintf_r+0x48>
 800baae:	ab03      	add	r3, sp, #12
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	462a      	mov	r2, r5
 800bab4:	4b05      	ldr	r3, [pc, #20]	; (800bacc <_vfiprintf_r+0x22c>)
 800bab6:	a904      	add	r1, sp, #16
 800bab8:	4630      	mov	r0, r6
 800baba:	f7fd fe27 	bl	800970c <_printf_i>
 800babe:	e7e4      	b.n	800ba8a <_vfiprintf_r+0x1ea>
 800bac0:	08039f9c 	.word	0x08039f9c
 800bac4:	08039fa6 	.word	0x08039fa6
 800bac8:	080091c5 	.word	0x080091c5
 800bacc:	0800b87d 	.word	0x0800b87d
 800bad0:	08039fa2 	.word	0x08039fa2

0800bad4 <__swbuf_r>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	460e      	mov	r6, r1
 800bad8:	4614      	mov	r4, r2
 800bada:	4605      	mov	r5, r0
 800badc:	b118      	cbz	r0, 800bae6 <__swbuf_r+0x12>
 800bade:	6a03      	ldr	r3, [r0, #32]
 800bae0:	b90b      	cbnz	r3, 800bae6 <__swbuf_r+0x12>
 800bae2:	f7fd ffc1 	bl	8009a68 <__sinit>
 800bae6:	69a3      	ldr	r3, [r4, #24]
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	071a      	lsls	r2, r3, #28
 800baee:	d525      	bpl.n	800bb3c <__swbuf_r+0x68>
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	b31b      	cbz	r3, 800bb3c <__swbuf_r+0x68>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	6922      	ldr	r2, [r4, #16]
 800baf8:	1a98      	subs	r0, r3, r2
 800bafa:	6963      	ldr	r3, [r4, #20]
 800bafc:	b2f6      	uxtb	r6, r6
 800bafe:	4283      	cmp	r3, r0
 800bb00:	4637      	mov	r7, r6
 800bb02:	dc04      	bgt.n	800bb0e <__swbuf_r+0x3a>
 800bb04:	4621      	mov	r1, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7ff fd9e 	bl	800b648 <_fflush_r>
 800bb0c:	b9e0      	cbnz	r0, 800bb48 <__swbuf_r+0x74>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	60a3      	str	r3, [r4, #8]
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	6022      	str	r2, [r4, #0]
 800bb1a:	701e      	strb	r6, [r3, #0]
 800bb1c:	6962      	ldr	r2, [r4, #20]
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d004      	beq.n	800bb2e <__swbuf_r+0x5a>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	07db      	lsls	r3, r3, #31
 800bb28:	d506      	bpl.n	800bb38 <__swbuf_r+0x64>
 800bb2a:	2e0a      	cmp	r6, #10
 800bb2c:	d104      	bne.n	800bb38 <__swbuf_r+0x64>
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7ff fd89 	bl	800b648 <_fflush_r>
 800bb36:	b938      	cbnz	r0, 800bb48 <__swbuf_r+0x74>
 800bb38:	4638      	mov	r0, r7
 800bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f806 	bl	800bb50 <__swsetup_r>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d0d5      	beq.n	800baf4 <__swbuf_r+0x20>
 800bb48:	f04f 37ff 	mov.w	r7, #4294967295
 800bb4c:	e7f4      	b.n	800bb38 <__swbuf_r+0x64>
	...

0800bb50 <__swsetup_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4b2a      	ldr	r3, [pc, #168]	; (800bbfc <__swsetup_r+0xac>)
 800bb54:	4605      	mov	r5, r0
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	460c      	mov	r4, r1
 800bb5a:	b118      	cbz	r0, 800bb64 <__swsetup_r+0x14>
 800bb5c:	6a03      	ldr	r3, [r0, #32]
 800bb5e:	b90b      	cbnz	r3, 800bb64 <__swsetup_r+0x14>
 800bb60:	f7fd ff82 	bl	8009a68 <__sinit>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb6a:	0718      	lsls	r0, r3, #28
 800bb6c:	d422      	bmi.n	800bbb4 <__swsetup_r+0x64>
 800bb6e:	06d9      	lsls	r1, r3, #27
 800bb70:	d407      	bmi.n	800bb82 <__swsetup_r+0x32>
 800bb72:	2309      	movs	r3, #9
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb80:	e034      	b.n	800bbec <__swsetup_r+0x9c>
 800bb82:	0758      	lsls	r0, r3, #29
 800bb84:	d512      	bpl.n	800bbac <__swsetup_r+0x5c>
 800bb86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb88:	b141      	cbz	r1, 800bb9c <__swsetup_r+0x4c>
 800bb8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb8e:	4299      	cmp	r1, r3
 800bb90:	d002      	beq.n	800bb98 <__swsetup_r+0x48>
 800bb92:	4628      	mov	r0, r5
 800bb94:	f7fe fefe 	bl	800a994 <_free_r>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	2300      	movs	r3, #0
 800bba6:	6063      	str	r3, [r4, #4]
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f043 0308 	orr.w	r3, r3, #8
 800bbb2:	81a3      	strh	r3, [r4, #12]
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	b94b      	cbnz	r3, 800bbcc <__swsetup_r+0x7c>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbc2:	d003      	beq.n	800bbcc <__swsetup_r+0x7c>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f000 f884 	bl	800bcd4 <__smakebuf_r>
 800bbcc:	89a0      	ldrh	r0, [r4, #12]
 800bbce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd2:	f010 0301 	ands.w	r3, r0, #1
 800bbd6:	d00a      	beq.n	800bbee <__swsetup_r+0x9e>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	6963      	ldr	r3, [r4, #20]
 800bbde:	425b      	negs	r3, r3
 800bbe0:	61a3      	str	r3, [r4, #24]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	b943      	cbnz	r3, 800bbf8 <__swsetup_r+0xa8>
 800bbe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbea:	d1c4      	bne.n	800bb76 <__swsetup_r+0x26>
 800bbec:	bd38      	pop	{r3, r4, r5, pc}
 800bbee:	0781      	lsls	r1, r0, #30
 800bbf0:	bf58      	it	pl
 800bbf2:	6963      	ldrpl	r3, [r4, #20]
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	e7f4      	b.n	800bbe2 <__swsetup_r+0x92>
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	e7f7      	b.n	800bbec <__swsetup_r+0x9c>
 800bbfc:	20000064 	.word	0x20000064

0800bc00 <_raise_r>:
 800bc00:	291f      	cmp	r1, #31
 800bc02:	b538      	push	{r3, r4, r5, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	d904      	bls.n	800bc14 <_raise_r+0x14>
 800bc0a:	2316      	movs	r3, #22
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc16:	b112      	cbz	r2, 800bc1e <_raise_r+0x1e>
 800bc18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc1c:	b94b      	cbnz	r3, 800bc32 <_raise_r+0x32>
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f830 	bl	800bc84 <_getpid_r>
 800bc24:	462a      	mov	r2, r5
 800bc26:	4601      	mov	r1, r0
 800bc28:	4620      	mov	r0, r4
 800bc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2e:	f000 b817 	b.w	800bc60 <_kill_r>
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d00a      	beq.n	800bc4c <_raise_r+0x4c>
 800bc36:	1c59      	adds	r1, r3, #1
 800bc38:	d103      	bne.n	800bc42 <_raise_r+0x42>
 800bc3a:	2316      	movs	r3, #22
 800bc3c:	6003      	str	r3, [r0, #0]
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e7e7      	b.n	800bc12 <_raise_r+0x12>
 800bc42:	2400      	movs	r4, #0
 800bc44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc48:	4628      	mov	r0, r5
 800bc4a:	4798      	blx	r3
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7e0      	b.n	800bc12 <_raise_r+0x12>

0800bc50 <raise>:
 800bc50:	4b02      	ldr	r3, [pc, #8]	; (800bc5c <raise+0xc>)
 800bc52:	4601      	mov	r1, r0
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f7ff bfd3 	b.w	800bc00 <_raise_r>
 800bc5a:	bf00      	nop
 800bc5c:	20000064 	.word	0x20000064

0800bc60 <_kill_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4d07      	ldr	r5, [pc, #28]	; (800bc80 <_kill_r+0x20>)
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f7f7 f85f 	bl	8002d30 <_kill>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d102      	bne.n	800bc7c <_kill_r+0x1c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	b103      	cbz	r3, 800bc7c <_kill_r+0x1c>
 800bc7a:	6023      	str	r3, [r4, #0]
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	bf00      	nop
 800bc80:	200006dc 	.word	0x200006dc

0800bc84 <_getpid_r>:
 800bc84:	f7f7 b84c 	b.w	8002d20 <_getpid>

0800bc88 <__swhatbuf_r>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc90:	2900      	cmp	r1, #0
 800bc92:	b096      	sub	sp, #88	; 0x58
 800bc94:	4615      	mov	r5, r2
 800bc96:	461e      	mov	r6, r3
 800bc98:	da0d      	bge.n	800bcb6 <__swhatbuf_r+0x2e>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bca0:	f04f 0100 	mov.w	r1, #0
 800bca4:	bf0c      	ite	eq
 800bca6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcaa:	2340      	movne	r3, #64	; 0x40
 800bcac:	2000      	movs	r0, #0
 800bcae:	6031      	str	r1, [r6, #0]
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	b016      	add	sp, #88	; 0x58
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	466a      	mov	r2, sp
 800bcb8:	f000 f848 	bl	800bd4c <_fstat_r>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	dbec      	blt.n	800bc9a <__swhatbuf_r+0x12>
 800bcc0:	9901      	ldr	r1, [sp, #4]
 800bcc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcca:	4259      	negs	r1, r3
 800bccc:	4159      	adcs	r1, r3
 800bcce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd2:	e7eb      	b.n	800bcac <__swhatbuf_r+0x24>

0800bcd4 <__smakebuf_r>:
 800bcd4:	898b      	ldrh	r3, [r1, #12]
 800bcd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcd8:	079d      	lsls	r5, r3, #30
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	d507      	bpl.n	800bcf0 <__smakebuf_r+0x1c>
 800bce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	2301      	movs	r3, #1
 800bcea:	6163      	str	r3, [r4, #20]
 800bcec:	b002      	add	sp, #8
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	ab01      	add	r3, sp, #4
 800bcf2:	466a      	mov	r2, sp
 800bcf4:	f7ff ffc8 	bl	800bc88 <__swhatbuf_r>
 800bcf8:	9900      	ldr	r1, [sp, #0]
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7fe febd 	bl	800aa7c <_malloc_r>
 800bd02:	b948      	cbnz	r0, 800bd18 <__smakebuf_r+0x44>
 800bd04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d4ef      	bmi.n	800bcec <__smakebuf_r+0x18>
 800bd0c:	f023 0303 	bic.w	r3, r3, #3
 800bd10:	f043 0302 	orr.w	r3, r3, #2
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	e7e3      	b.n	800bce0 <__smakebuf_r+0xc>
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	6020      	str	r0, [r4, #0]
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	6163      	str	r3, [r4, #20]
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	6120      	str	r0, [r4, #16]
 800bd2a:	b15b      	cbz	r3, 800bd44 <__smakebuf_r+0x70>
 800bd2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd30:	4630      	mov	r0, r6
 800bd32:	f000 f81d 	bl	800bd70 <_isatty_r>
 800bd36:	b128      	cbz	r0, 800bd44 <__smakebuf_r+0x70>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	f023 0303 	bic.w	r3, r3, #3
 800bd3e:	f043 0301 	orr.w	r3, r3, #1
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	431d      	orrs	r5, r3
 800bd48:	81a5      	strh	r5, [r4, #12]
 800bd4a:	e7cf      	b.n	800bcec <__smakebuf_r+0x18>

0800bd4c <_fstat_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_fstat_r+0x20>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f7f7 f848 	bl	8002dee <_fstat>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d102      	bne.n	800bd68 <_fstat_r+0x1c>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	b103      	cbz	r3, 800bd68 <_fstat_r+0x1c>
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	bd38      	pop	{r3, r4, r5, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200006dc 	.word	0x200006dc

0800bd70 <_isatty_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d06      	ldr	r5, [pc, #24]	; (800bd8c <_isatty_r+0x1c>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7f7 f847 	bl	8002e0e <_isatty>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d102      	bne.n	800bd8a <_isatty_r+0x1a>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b103      	cbz	r3, 800bd8a <_isatty_r+0x1a>
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	200006dc 	.word	0x200006dc

0800bd90 <_init>:
 800bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd92:	bf00      	nop
 800bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd96:	bc08      	pop	{r3}
 800bd98:	469e      	mov	lr, r3
 800bd9a:	4770      	bx	lr

0800bd9c <_fini>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr
